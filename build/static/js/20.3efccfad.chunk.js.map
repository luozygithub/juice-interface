{"version":3,"sources":["components/VolumeChart/daysToMillis.ts","components/VolumeChart/index.tsx","components/VolumeChart/hooks/useDuration.ts","components/VolumeChart/loadBlockRefs.ts","components/VolumeChart/loadProjectEvents.ts","components/VolumeChart/loadDomain.ts","components/VolumeChart/loadTapEvents.ts"],"names":["daysToMillis","days","SECONDS_IN_DAY","now","moment","VolumeChart","style","height","createdAt","projectId","cv","events","setEvents","useState","loading","setLoading","domain","setDomain","showGraph","setShowGraph","duration","setDuration","useEffect","createdAtMs","useDuration","theme","colors","useContext","ThemeContext","dateStringForBlockTime","timestamp","format","undefined","async","EthDater","readProvider","getEvery","toISOString","then","res","newBlockRefs","i","push","block","Math","round","valueOf","loadBlockRefs","projectEvents","blockRefs","newEvents","promises","length","queryKeys","forEach","blockRef","whereOpts","key","value","number","querySubgraph","entity","keys","where","projects","project","parseFloat","fromWad","totalPaid","toFixed","currentBalance","Promise","allSettled","loadProjectEvents","max","min","r","domainPad","loadDomain","tapEvents","toString","operator","map","event","tapped","netTransferAmount","loadTapEvents","concat","sortedEvents","sort","a","b","e","previousBalance","axisStyle","fontSize","fill","text","tertiary","visibility","xTicks","useMemo","ticks","tab","selected","textTransform","fontWeight","color","secondary","cursor","onClick","display","justifyContent","alignItems","size","className","width","onChange","val","Option","position","ResponsiveContainer","LineChart","opacity","data","CartesianGrid","paddingLeft","stroke","strokeDasharray","Line","dot","props","cx","payload","transform","x1","y1","x2","y2","strokeWidth","hidden","activeDot","primary","dataKey","connectNulls","brand","type","animationDuration","YAxis","axisLine","scale","tickSize","tickCount","tick","mirror","XAxis","x","y","dy","interval","Tooltip","contentStyle","background","l0","border","content","active","padding","CurrencySymbol","currency","left","top","right","bottom","disabled"],"mappings":"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","file":"static/js/20.3efccfad.chunk.js","sourcesContent":["import { SECONDS_IN_DAY } from 'constants/numbers'\r\n\r\nexport const daysToMillis = (days: number) => days * SECONDS_IN_DAY * 1000\r\n","import { Select, Space } from 'antd'\r\nimport { t, Trans } from '@lingui/macro'\r\nimport CurrencySymbol from 'components/CurrencySymbol'\r\n\r\nimport { ThemeContext } from 'contexts/themeContext'\r\nimport moment from 'moment'\r\nimport {\r\n  CSSProperties,\r\n  SVGProps,\r\n  useContext,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n} from 'react'\r\nimport {\r\n  CartesianGrid,\r\n  Line,\r\n  LineChart,\r\n  ResponsiveContainer,\r\n  Tooltip,\r\n  XAxis,\r\n  YAxis,\r\n} from 'recharts'\r\n\r\nimport { EventRef, ShowGraph } from './types'\r\nimport { useDuration } from './hooks/useDuration'\r\nimport { loadBlockRefs } from './loadBlockRefs'\r\nimport { loadProjectEvents } from './loadProjectEvents'\r\nimport { loadDomain } from './loadDomain'\r\nimport { loadTapEvents } from './loadTapEvents'\r\nimport { daysToMillis } from './daysToMillis'\r\n\r\nconst now = moment.now() - 5 * 60 * 1000 // 5 min ago\r\n\r\nexport default function VolumeChart({\r\n  style: { height },\r\n  createdAt,\r\n  projectId,\r\n  cv,\r\n}: {\r\n  style: { height: number }\r\n  createdAt: number | undefined\r\n  projectId: number | undefined\r\n  cv: string\r\n}) {\r\n  const [events, setEvents] = useState<EventRef[]>([])\r\n  // const [blockRefs, setBlockRefs] = useState<BlockRef[]>([])\r\n  const [loading, setLoading] = useState<boolean>()\r\n  const [domain, setDomain] = useState<[number, number]>()\r\n  const [showGraph, setShowGraph] = useState<ShowGraph>('volume')\r\n  const [duration, setDuration] = useDuration({ createdAt, now })\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n\r\n  const dateStringForBlockTime = (timestamp: number) =>\r\n    duration\r\n      ? moment(timestamp * 1000).format(duration > 1 ? 'M/DD' : 'h:mma')\r\n      : undefined\r\n\r\n  // Get references to timestamp of blocks in interval\r\n  useEffect(() => {\r\n    if (!duration || !showGraph) return\r\n\r\n    setLoading(true)\r\n    setEvents([])\r\n    setDomain(undefined)\r\n\r\n    loadBlockRefs({ duration, now }).then(async blockRefs => {\r\n      if (!projectId) return\r\n      const projectEvents = await loadProjectEvents({\r\n        blockRefs,\r\n        showGraph,\r\n        projectId,\r\n        cv,\r\n      })\r\n      if (!projectEvents) return\r\n      const domain = loadDomain(projectEvents)\r\n      setDomain(domain)\r\n      if (showGraph === 'balance') {\r\n        const tapEvents = await loadTapEvents({ projectId, duration, now })\r\n        projectEvents.concat(tapEvents)\r\n      }\r\n      const sortedEvents = projectEvents.sort((a, b) =>\r\n        a.timestamp < b.timestamp ? -1 : 1,\r\n      )\r\n      const events = sortedEvents.map((e, i) => {\r\n        if (e.tapped) {\r\n          return { ...e, previousBalance: sortedEvents[i - 1]?.value }\r\n        }\r\n        return e\r\n      })\r\n      setEvents(events)\r\n      setLoading(false)\r\n    })\r\n    // loadEvents(blockRefs)\r\n  }, [cv, duration, projectId, showGraph])\r\n\r\n  const buttonStyle: CSSProperties = {\r\n    fontSize: '0.7rem',\r\n    textTransform: 'uppercase',\r\n  }\r\n\r\n  const axisStyle: SVGProps<SVGTextElement> = {\r\n    fontSize: 11,\r\n    fill: colors.text.tertiary,\r\n    visibility: events?.length ? 'visible' : 'hidden',\r\n  }\r\n\r\n  const xTicks = useMemo(() => {\r\n    if (!events?.length) return []\r\n\r\n    const ticks = []\r\n    const max = now / 1000\r\n    const min = duration ? (now - daysToMillis(duration)) / 1000 : undefined\r\n\r\n    if (!min) return []\r\n\r\n    // TODO why are only roughly half of ticks rendered?\r\n    for (let i = 0; i < 20; i++) {\r\n      ticks.push(Math.round(((max - min) / 20) * i + min))\r\n    }\r\n\r\n    return ticks\r\n  }, [events, duration])\r\n\r\n  const tab = (tab: ShowGraph) => {\r\n    const selected = tab === showGraph\r\n\r\n    let text: string\r\n    switch (tab) {\r\n      case 'balance':\r\n        text = t`In Juicebox`\r\n        break\r\n      case 'volume':\r\n        text = t`Volume`\r\n        break\r\n    }\r\n\r\n    return (\r\n      <div\r\n        style={{\r\n          textTransform: 'uppercase',\r\n          fontSize: '0.8rem',\r\n          fontWeight: selected ? 600 : 400,\r\n          color: selected ? colors.text.secondary : colors.text.tertiary,\r\n          cursor: 'pointer',\r\n        }}\r\n        onClick={() => setShowGraph(tab)}\r\n      >\r\n        {text}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'baseline',\r\n        }}\r\n      >\r\n        <div>\r\n          <Space size=\"large\">\r\n            {tab('volume')}\r\n            {tab('balance')}\r\n          </Space>\r\n        </div>\r\n\r\n        <Select\r\n          className=\"small\"\r\n          style={{\r\n            ...buttonStyle,\r\n            width: 100,\r\n          }}\r\n          value={duration}\r\n          onChange={val => setDuration(val)}\r\n        >\r\n          <Select.Option value={1}>\r\n            <Trans>24 hours</Trans>\r\n          </Select.Option>\r\n          <Select.Option value={7}>\r\n            <Trans>7 days</Trans>\r\n          </Select.Option>\r\n          <Select.Option value={30}>\r\n            <Trans>30 days</Trans>\r\n          </Select.Option>\r\n          <Select.Option value={90}>\r\n            <Trans>90 days</Trans>\r\n          </Select.Option>\r\n          <Select.Option value={365}>\r\n            <Trans>1 year</Trans>\r\n          </Select.Option>\r\n        </Select>\r\n      </div>\r\n      <div style={{ position: 'relative' }}>\r\n        <ResponsiveContainer width={'100%'} height={height}>\r\n          <LineChart style={{ opacity: loading ? 0.5 : 1 }} data={events}>\r\n            <CartesianGrid\r\n              style={{ paddingLeft: 200 }}\r\n              stroke={colors.stroke.tertiary}\r\n              strokeDasharray=\"4 2\"\r\n            />\r\n            {showGraph === 'balance' && (\r\n              <Line\r\n                dot={props => {\r\n                  const { cx, payload } = props\r\n\r\n                  return payload.tapped && domain ? (\r\n                    <g transform={`translate(${cx},${0})`}>\r\n                      <line\r\n                        x1=\"0\"\r\n                        y1={\r\n                          80 -\r\n                          (payload.tapped * 25) / (domain[1] - domain[0]) +\r\n                          '%'\r\n                        }\r\n                        x2=\"0\"\r\n                        y2={height - 35 + 'px'}\r\n                        strokeWidth={4}\r\n                        stroke={colors.stroke.secondary}\r\n                      />\r\n                    </g>\r\n                  ) : (\r\n                    <span hidden></span>\r\n                  )\r\n                }}\r\n                activeDot={false}\r\n                stroke={colors.stroke.primary}\r\n                strokeWidth={0}\r\n                dataKey=\"previousBalance\"\r\n              />\r\n            )}\r\n            <Line\r\n              dot={false}\r\n              connectNulls\r\n              stroke={colors.text.brand.primary}\r\n              strokeWidth={2}\r\n              type=\"monotone\"\r\n              dataKey=\"value\"\r\n              animationDuration={0}\r\n            />\r\n            <YAxis\r\n              axisLine={false}\r\n              stroke={colors.stroke.tertiary}\r\n              type=\"number\"\r\n              dataKey=\"value\"\r\n              domain={domain}\r\n              scale=\"linear\"\r\n              tickSize={2}\r\n              tickCount={4}\r\n              tick={axisStyle}\r\n              mirror\r\n            />\r\n            <XAxis\r\n              axisLine={false}\r\n              tickSize={4}\r\n              stroke={colors.stroke.tertiary}\r\n              ticks={xTicks}\r\n              tickCount={xTicks.length}\r\n              tick={props => {\r\n                const { x, y, payload } = props\r\n                return (\r\n                  <g transform={`translate(${x},${y})`}>\r\n                    <text dy={12} {...axisStyle}>\r\n                      {dateStringForBlockTime(payload.value)}\r\n                    </text>\r\n                  </g>\r\n                )\r\n              }}\r\n              domain={[xTicks[0], xTicks[xTicks.length - 1]]}\r\n              type=\"number\"\r\n              dataKey=\"timestamp\"\r\n              scale=\"time\"\r\n              interval={2}\r\n            />\r\n            <Tooltip\r\n              contentStyle={{\r\n                background: colors.background.l0,\r\n                border: '1px solid ' + colors.stroke.secondary,\r\n                fontSize: '0.8rem',\r\n              }}\r\n              cursor={{ stroke: colors.stroke.secondary }}\r\n              content={({ active, payload }) => {\r\n                if (!active || !payload?.length) return null\r\n\r\n                return (\r\n                  <div\r\n                    style={{\r\n                      padding: 10,\r\n                      background: colors.background.l0,\r\n                      border: '1px solid ' + colors.stroke.tertiary,\r\n                    }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        fontSize: '0.7rem',\r\n                        color: colors.text.tertiary,\r\n                      }}\r\n                    >\r\n                      {dateStringForBlockTime(payload[0].payload.timestamp)}\r\n                    </div>\r\n                    {payload[0].payload.tapped ? (\r\n                      <div>\r\n                        -<CurrencySymbol currency=\"ETH\" />\r\n                        {payload[0].payload.tapped}\r\n                        <div\r\n                          style={{\r\n                            fontSize: '0.7rem',\r\n                            fontWeight: 500,\r\n                            color: colors.text.secondary,\r\n                          }}\r\n                        >\r\n                          withdraw\r\n                        </div>\r\n                      </div>\r\n                    ) : (\r\n                      <div>\r\n                        <CurrencySymbol currency=\"ETH\" />\r\n                        {payload[0].payload.value}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                )\r\n              }}\r\n              animationDuration={100}\r\n            />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n\r\n        {loading && (\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              justifyContent: 'center',\r\n              alignItems: 'center',\r\n              position: 'absolute',\r\n              left: 0,\r\n              top: 0,\r\n              right: 0,\r\n              bottom: 20,\r\n            }}\r\n          >\r\n            <div style={{ color: colors.text.disabled }}>\r\n              <Trans>loading</Trans>...\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { useState, useEffect } from 'react'\r\n\r\nimport { daysToMillis } from '../daysToMillis'\r\nimport { Duration } from '../types'\r\n\r\nconst epochToEpochMs = (epoch: number) => epoch * 1000\r\n\r\nexport const useDuration = ({\r\n  createdAt,\r\n  now,\r\n}: {\r\n  createdAt: number | undefined\r\n  now: number\r\n}): [\r\n  Duration | undefined,\r\n  React.Dispatch<React.SetStateAction<Duration | undefined>>,\r\n] => {\r\n  const [duration, setDuration] = useState<Duration>()\r\n\r\n  useEffect(() => {\r\n    if (!createdAt) return\r\n    const createdAtMs = epochToEpochMs(createdAt)\r\n    if (createdAtMs > now - daysToMillis(1)) {\r\n      setDuration(1)\r\n    } else if (createdAtMs > now - daysToMillis(7)) {\r\n      setDuration(7)\r\n    } else {\r\n      setDuration(30)\r\n    }\r\n  }, [createdAt, now])\r\n\r\n  return [duration, setDuration]\r\n}\r\n","import EthDater from 'ethereum-block-by-date'\r\n\r\nimport moment from 'moment'\r\n\r\nimport { readProvider } from 'constants/readProvider'\r\nimport { BlockRef, Duration } from './types'\r\nimport { daysToMillis } from './daysToMillis'\r\n\r\nexport const loadBlockRefs = async ({\r\n  duration,\r\n  now,\r\n}: {\r\n  duration: Duration\r\n  now: number\r\n}) => {\r\n  // Get number of most recent block, and block at start of duration window\r\n  const blockRefs = new EthDater(readProvider)\r\n    .getEvery(\r\n      'days',\r\n      //TODO + 0.1 fixes bug where only one block is returned. Needs better fix\r\n      moment(now - daysToMillis(duration + 0.1)).toISOString(),\r\n      moment(now).toISOString(),\r\n      duration,\r\n      false,\r\n    )\r\n    .then((res: (BlockRef & { block: number })[]) => {\r\n      const newBlockRefs: BlockRef[] = []\r\n      const blocksCount = 40\r\n\r\n      // Calculate intermediate block numbers at consistent intervals\r\n      for (let i = 0; i < blocksCount; i++) {\r\n        newBlockRefs.push({\r\n          block: Math.round(\r\n            ((res[1].block - res[0].block) / blocksCount) * i + res[0].block,\r\n          ),\r\n          timestamp: Math.round(\r\n            ((res[1].timestamp - res[0].timestamp) / blocksCount) * i +\r\n              res[0].timestamp,\r\n          ),\r\n        })\r\n      }\r\n\r\n      // Push blockRef for \"now\"\r\n      newBlockRefs.push({\r\n        block: null,\r\n        timestamp: Math.round(now.valueOf() / 1000),\r\n      })\r\n\r\n      return newBlockRefs\r\n      // setBlockRefs(newBlockRefs)\r\n    })\r\n  return blockRefs\r\n}\r\n","import { Project } from 'models/subgraph-entities/vX/project'\r\nimport { fromWad } from 'utils/formatNumber'\r\nimport { WhereConfig, querySubgraph } from 'utils/graph'\r\n\r\nimport { BlockRef, EventRef, ShowGraph } from './types'\r\n\r\nexport const loadProjectEvents = async ({\r\n  blockRefs,\r\n  showGraph,\r\n  projectId,\r\n  cv,\r\n}: {\r\n  blockRefs: BlockRef[]\r\n  showGraph: ShowGraph\r\n  projectId: number\r\n  cv: string\r\n}) => {\r\n  const newEvents: EventRef[] = []\r\n  const promises: Promise<void>[] = []\r\n\r\n  if (!blockRefs.length) return\r\n\r\n  let queryKeys: (keyof Project)[]\r\n\r\n  switch (showGraph) {\r\n    case 'volume':\r\n      queryKeys = ['totalPaid']\r\n      break\r\n    case 'balance':\r\n      queryKeys = ['currentBalance']\r\n      break\r\n  }\r\n\r\n  // Query balance of project for interval blocks\r\n  blockRefs.forEach(blockRef => {\r\n    const whereOpts: WhereConfig<'project'>[] = []\r\n    if (projectId) {\r\n      whereOpts.push({ key: 'projectId', value: projectId })\r\n    }\r\n    if (cv) {\r\n      whereOpts.push({ key: 'cv', value: cv })\r\n    }\r\n\r\n    // For block == null, don't specify block param\r\n    const block =\r\n      blockRef.block !== null ? { block: { number: blockRef.block } } : {}\r\n\r\n    promises.push(\r\n      querySubgraph({\r\n        entity: 'project',\r\n        keys: queryKeys,\r\n        ...block,\r\n        where: whereOpts,\r\n      }).then(projects => {\r\n        if (!projects.length) return\r\n\r\n        let value: number | undefined = undefined\r\n\r\n        const project = projects[0]\r\n\r\n        if (!project) return\r\n        projects.forEach(project => {\r\n          switch (showGraph) {\r\n            case 'volume':\r\n              value = parseFloat(\r\n                parseFloat(fromWad(project.totalPaid)).toFixed(4),\r\n              )\r\n              break\r\n            case 'balance':\r\n              value = parseFloat(\r\n                parseFloat(fromWad(project.currentBalance)).toFixed(4),\r\n              )\r\n              break\r\n          }\r\n\r\n          if (value !== undefined) {\r\n            newEvents.push({\r\n              timestamp: blockRef.timestamp,\r\n              value,\r\n            })\r\n          }\r\n        })\r\n      }),\r\n    )\r\n  })\r\n\r\n  await Promise.allSettled(promises)\r\n  return newEvents\r\n}\r\n","import { EventRef } from './types'\r\n\r\nexport const loadDomain = (events: EventRef[]): [number, number] => {\r\n  let max: number | undefined\r\n  let min: number | undefined\r\n  // Calculate domain for graph based on floor/ceiling balances\r\n  events.forEach(r => {\r\n    if (r.value === undefined) return\r\n    if (min === undefined || r.value < min) min = r.value\r\n    if (max === undefined || r.value > max) max = r.value\r\n  })\r\n\r\n  if (max === undefined || min === undefined) {\r\n    return [0, 0.1]\r\n  } else {\r\n    const domainPad = (max - min) * 0.05\r\n    return [Math.max(min - domainPad, 0), Math.max(max + domainPad, 0.1)]\r\n  }\r\n}\r\n","import { fromWad } from 'utils/formatNumber'\r\nimport { querySubgraph } from 'utils/graph'\r\n\r\nimport { daysToMillis } from './daysToMillis'\r\n\r\nimport { Duration } from './types'\r\n\r\nexport const loadTapEvents = async ({\r\n  projectId,\r\n  duration,\r\n  now,\r\n}: {\r\n  projectId: number\r\n  duration: Duration\r\n  now: number\r\n}) => {\r\n  const tapEvents = await querySubgraph({\r\n    entity: 'tapEvent',\r\n    keys: ['netTransferAmount', 'timestamp'],\r\n    where: projectId\r\n      ? [\r\n          {\r\n            key: 'project',\r\n            value: projectId.toString(),\r\n          },\r\n          {\r\n            key: 'timestamp',\r\n            value: Math.round((now - daysToMillis(duration)) / 1000),\r\n            operator: 'gte',\r\n          },\r\n        ]\r\n      : undefined,\r\n  })\r\n\r\n  return tapEvents.map(event => ({\r\n    ...event,\r\n    tapped: parseFloat(parseFloat(fromWad(event.netTransferAmount)).toFixed(4)),\r\n    timestamp: event.timestamp ?? 0,\r\n  }))\r\n}\r\n"],"sourceRoot":""}