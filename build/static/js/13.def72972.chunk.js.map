{"version":3,"sources":["hooks/v2/contractReader/V2ContractReader.ts","utils/v2/fundingCycle.ts","constants/v2/juiceboxTokens.ts","hooks/v2/contractReader/ProjectDistributionLimit.ts","utils/v2/distributions.ts","constants/styles/drawerStyle.ts","hooks/v2/contractReader/ProjectSplits.ts","utils/v2/splits.ts","components/v2/shared/SplitItem.tsx","components/v2/shared/SplitList.tsx","components/forms/ProjectDetailsForm.tsx","components/v2/shared/UnsavedChangesModal.tsx","components/v2/shared/FundingCycleConfigurationDrawers/FundingCycleDrawer.tsx","constants/v2/metadataDomain.ts","constants/projectHandleENSTextRecordKey.ts","hooks/v2/contractReader/ETHPaymentTerminalFee.ts","components/v2/shared/DistributionSplitsSection/DistributionSplitModal.tsx","components/v2/shared/FundingCycleConfigurationDrawers/useFundingCycleDrawer.ts","hooks/v2/contractReader/ProjectOwner.ts","hooks/v2/contractReader/ProjectTerminals.ts","hooks/v2/contractReader/ProjectCurrentFundingCycle.ts","pages/create/tabs/ReviewDeployTab/FundingAttributes.tsx","hooks/v2/contractReader/TerminalCurrentOverflow.ts","hooks/v2/contractReader/ProjectToken.ts","components/v2/V2Project/DistributionLimit.tsx","components/v2/shared/DistributionSplitsSection/DistributionSplitCard.tsx","hooks/v2/contractReader/UsedDistributionLimit.ts","hooks/v2/contractReader/HasPermission.ts","hooks/v2/contractReader/ProjectQueuedFundingCycle.ts","hooks/v2/transactor/EditV2ProjectDetailsTx.ts","components/v2/shared/V2BugNotice.tsx","components/Banner.tsx","components/v2/V2Project/V2ProjectReconfigureModal/ReconfigurePreview.tsx","components/v2/V2Project/banners/RelaunchFundingCycleBanner.tsx","hooks/v2/transactor/LaunchFundingCyclesTx.ts","hooks/v2/transactor/DeployProjectPayerTx.ts","hooks/v2/transactor/IssueTokensTx.ts","components/v2/V2Project/V2ReconfigureProjectHandleDrawer.tsx","hooks/v2/contractReader/ProjectHandleENSTextRecord.ts","hooks/v2/contractReader/ProjectENSName.ts","hooks/v2/transactor/EditV2ProjectHandleTx.ts","hooks/v2/transactor/SetENSTextRecordForHandleTx.ts","components/v2/V2Project/NewDeployModal.tsx","components/v2/V2Project/V2DownloadPaymentsModal.tsx","components/v2/V2Project/V2DownloadActivityModal.tsx","components/v2/V2Project/ProjectActivity/eventElems/DistributePayoutsElem.tsx","components/v2/V2Project/ProjectActivity/eventElems/DistributeReservedTokensElem.tsx","components/v2/V2Project/ProjectActivity/index.tsx","components/v2/shared/V2CurrencyAmount.tsx","components/v2/V2Project/TreasuryStats/ProjectBalance.tsx","components/v2/V2Project/TreasuryStats/DistributedRatio.tsx","components/v2/V2Project/TreasuryStats/OwnerBalance.tsx","components/v2/V2Project/TreasuryStats/index.tsx","hooks/v2/contractReader/TotalBalanceOf.ts","components/v2/shared/V2ProjectTokenBalance/V2ProjectTokenBalance.tsx","components/v2/V2Project/V2BalancesModal/V2TokenRefs.tsx","components/v2/V2Project/V2BalancesModal/V2BalancesModal.tsx","components/v2/V2Project/V2FundingCycleSection/FundingCycleDetails.tsx","components/v2/V2Project/V2FundingCycleSection/modals/DistributePayoutsModal.tsx","hooks/v2/transactor/DistributePayouts.ts","models/v2/splits.ts","hooks/v2/transactor/SetProjectSplits.ts","components/v2/V2Project/V2FundingCycleSection/modals/EditPayoutsModal.tsx","components/v2/V2Project/V2FundingCycleSection/PayoutSplitsCard.tsx","hooks/v2/contractReader/ProjectReservedTokens.ts","components/v2/V2Project/V2FundingCycleSection/modals/DistributeReservedTokensModal.tsx","hooks/v2/transactor/DistributeReservedTokensTx.ts","components/v2/V2Project/V2FundingCycleSection/modals/EditTokenAllocationModal.tsx","components/v2/V2Project/V2FundingCycleSection/ReservedTokensSplitsCard.tsx","components/v2/V2Project/V2FundingCycleSection/CurrentFundingCycle.tsx","components/v2/V2Project/V2ProjectReconfigureModal/drawers/V2ReconfigureProjectDetailsDrawer.tsx","components/v2/V2Project/V2ProjectReconfigureModal/V2ReconfigureUpcomingMessage.tsx","components/v2/V2Project/V2ProjectReconfigureModal/hooks/reconfigureFundingCycle.ts","hooks/v2/transactor/ReconfigureV2FundingCycleTx.ts","components/v2/V2Project/V2ProjectReconfigureModal/index.tsx","components/v2/V2Project/V2ProjectReconfigureModal/hooks/initialEditingData.ts","components/v2/V2Project/V2ProjectReconfigureModal/hooks/editingProjectData.ts","components/v2/V2Project/V2ProjectReconfigureModal/hooks/fundingHasSavedChanges.ts","components/v2/V2Project/V2ProjectReconfigureModal/V2ReconfigureModalTrigger.tsx","models/v2/fundingCycle.ts","components/v2/V2Project/V2FundingCycleSection/UpcomingFundingCycle.tsx","hooks/v2/contractReader/ProjectLatestConfiguredFundingCycle.ts","components/v2/V2Project/V2FundingCycleSection/FundingCycleHistory.tsx","components/v2/V2Project/V2FundingCycleSection/NoFundingCycle.tsx","components/v2/V2Project/V2FundingCycleSection/index.tsx","hooks/v2/contractReader/UserUnclaimedTokenBalance.ts","hooks/v2/contractReader/ETHReceivedFromTokens.ts","components/v2/V2Project/V2ManageTokensSection/V2RedeemModal.tsx","hooks/v2/transactor/RedeemTokensTx.ts","../node_modules/@ant-design/icons-svg/es/asn/WarningOutlined.js","../node_modules/@ant-design/icons/es/icons/WarningOutlined.js","components/v2/V2Project/V2ManageTokensSection/V2ClaimTokensModal.tsx","hooks/v2/transactor/ClaimTokensTx.ts","components/v2/V2Project/V2ManageTokensSection/V2MintModal.tsx","hooks/v2/transactor/MintTokensTx.ts","components/v2/V2Project/V2ManageTokensSection/index.tsx","hooks/v2/contractReader/ERC20BalanceOf.ts","components/v2/V2Project/V2PayButton/V2ConfirmPayModal/index.tsx","hooks/v2/transactor/PayV2ProjectTx.ts","components/v2/V2Project/V2PayButton/index.tsx","hooks/v2/transactor/AddToBalanceTx.ts","hooks/v2/transactor/TransferProjectOwnershipTx.ts","hooks/v2/transactor/TransferUnclaimedTokensTx.ts","components/v2/V2Project/V2ProjectHeaderActions.tsx","components/v2/V2Project/index.tsx","components/v2/shared/DistributionSplitsSection/SpecificLimitModal.tsx","components/v2/shared/DistributionSplitsSection/PayoutConfigurationExplainerCollapse.tsx","components/v2/shared/DistributionSplitsSection/index.tsx","constants/time.ts","pages/create/forms/FundingForm/DurationInputAndSelect.tsx","pages/create/forms/FundingForm/FundingCycleExplainerCollapse.tsx","pages/create/forms/FundingForm/index.tsx","components/v2/shared/FundingCycleConfigurationDrawers/FundingDrawer.tsx","pages/create/forms/TokenForm/ReservedTokensFormItem.tsx","pages/create/forms/TokenForm/MintRateFormItem.tsx","pages/create/forms/TokenForm/index.tsx","components/v2/shared/FundingCycleConfigurationDrawers/TokenDrawer.tsx","pages/create/forms/RulesForm/TokenMintingExtra.tsx","pages/create/forms/RulesForm/index.tsx","components/v2/shared/FundingCycleConfigurationDrawers/RulesDrawer.tsx","../node_modules/antd/es/radio/context.js","../node_modules/antd/es/radio/radio.js","../node_modules/antd/es/radio/group.js","../node_modules/antd/es/_util/getDataOrAriaProps.js","../node_modules/antd/es/radio/radioButton.js","../node_modules/antd/es/radio/index.js"],"names":["useV2ContractReader","contract","functionName","args","updateOn","formatter","callback","valueDidChange","value","setValue","useState","loading","setLoading","contracts","useContext","V2UserContext","_formatter","useCallback","val","_callback","_valueDidChange","a","b","useDeepCompareEffectNoCheck","async","getValue","readContract","contractToRead","console","info","result","newValue","address","err","error","Sentry","tags","undefined","contract_function","listener","subscriptions","length","forEach","u","_contract","eventName","filter","filters","topics","on","push","s","off","data","contractConfig","hasDistributionLimit","fundAccessConstraint","Boolean","distributionLimit","parseWad","eq","MAX_DISTRIBUTION_LIMIT","hasFundingDuration","fundingCycle","duration","getDefaultFundAccessConstraint","fundAccessConstraints","bigNumberToBoolean","toNumber","parameters","name","bits","parser","allowSetTerminals","BigNumber","from","shr","allowSetController","invertPermyriad","dataSource","toHexString","constants","getAddress","decodeV2FundingCycleMetadata","packedMetadata","reduce","metadata","parameter","i","shiftRightBits","slice","acc","p","and","getUnsafeV2FundingCycleProperties","ballotAddress","getBallotStrategyByAddress","ballot","reservedRatePercentage","parseFloat","fromWad","reservedRate","allowMinting","unsafeFundingCycleProperties","gt","V2FundingCycleRiskCount","Object","values","v","ETH_TOKEN_ADDRESS","useProjectDistributionLimit","projectId","configuration","terminal","useDeprecatedContract","V2ContractName","DeprecatedJBController","JBController","amountFromPercent","percent","amount","getDistributionPercentFromAmount","splitPercentFrom","getTotalSplitsPercentage","splits","curr","preciseFormatSplitPercent","adjustedSplitPercents","oldDistributionLimit","newDistributionLimit","adjustedSplits","split","newPercent","adjustedSplit","beneficiary","preferClaimed","lockedUntil","allocator","getNewDistributionLimit","editingSplitPercent","newSplitAmount","currentDistributionLimit","previousSplitAmount","toFixed","drawerStyle","placement","width","Math","min","window","innerWidth","useProjectSplits","splitGroup","domain","DeprecatedJBSplitsStore","JBSplitsStore","map","oldValue","isEqual","toSplit","mod","permyriadToPercent","preferUnstaked","toMod","percentToPermyriad","formatSplitPercent","sanitizeSplit","SplitItem","showSplitValue","currency","totalValue","projectOwnerAddress","valueSuffix","valueFormatProps","theme","colors","ThemeContext","isProjectOwner","isJuiceboxProject","LockedText","lockedUntilFormatted","formatDate","style","fontSize","color","text","secondary","LockOutlined","itemFontSize","useMobile","JuiceboxProjectBeneficiary","fontWeight","title","to","v2ProjectRoute","target","className","marginLeft","TooltipLabel","label","tip","FormattedAddress","CrownFilled","ETHAddressBeneficiary","display","alignItems","SplitValue","splitValue","mul","div","SPLITS_TOTAL_PERCENT","splitValueFormatted","formatWad","CurrencySymbol","V2CurrencyName","formattedSplitPercent","justifyContent","marginBottom","lineHeight","TooltipIcon","iconStyle","SplitList","showSplitValues","totalSplitPercentage","sum","ownerPercentage","sort","ProjectDetailsForm","form","onFinish","hideProjectHandle","saveButton","onValuesChange","scrollToFirstError","behavior","layout","direction","size","ProjectName","formItemProps","rules","required","onChange","normalizeHandle","setFieldsValue","handle","ProjectHandleFormItem","initialValue","getFieldValue","requireState","dependencies","extra","ProjectDescription","ProjectLogoUri","initialUrl","onSuccess","logoUri","ProjectLink","ProjectTwitter","ProjectDiscord","ProjectPayButton","ProjectPayDisclosure","Item","htmlType","type","UnsavedChangesModal","visible","onOk","onCancel","okText","destroyOnClose","FundingCycleDrawer","onClose","children","JUICEBOX_MONEY_METADATA_DOMAIN","projectHandleENSTextRecordKey","useETHPaymentTerminalFee","fee","setFee","useEffect","res","JBETHPaymentTerminal","functions","fetchData","DistributionSplitModal","mode","overrideDistTypeWithPercentage","editingSplit","onSplitsChanged","setDistributionLimit","currencyName","onCurrencyChange","useForm","distributionLimitIsInfinite","useMemo","isFirstSplit","editingSplitType","setEditingSplitType","distributionType","setDistributionType","setProjectId","setNewDistributionLimit","setAmount","setLockedUntil","ETHPaymentTerminalFee","feePercentage","formatFee","toString","Moment","percentPerBillion","resetStates","confirmSplit","validateFields","roundedLockedUntil","round","valueOf","newSplit","newSplits","m","resetFields","validatePayoutPercentage","validatePercentage","amountSubFee","AfterFeeMessage","onKeyDown","e","key","Group","EthAddress","defaultValue","validator","Promise","resolve","validateEthAddress","findIndex","onAddressChange","stringIsDigit","reject","parseInt","placeholder","primary","newAmount","onAmountChange","accessory","content","flex","percentage","step","sliderValue","suffix","disabledDate","current","moment","endOf","useFundingCycleDrawer","unsavedChangesModalVisible","setUnsavedChangesModalVisible","formUpdated","setFormUpdated","emitDrawerClose","openModal","handleDrawerCloseClick","closeModal","useProjectOwner","isPreviewMode","V2ProjectContext","useContractReader","JBProjects","useProjectTerminals","DeprecatedJBDirectory","JBDirectory","useProjectCurrentFundingCycle","DistributionLimitStatistic","showDetail","valueRender","DurationStatistic","showWarning","formattedDuration","detailedTimeString","timeSeconds","hasDuration","tooltipTitle","FUNDING_CYCLE_WARNING_TEXT","ReservedTokensStatistic","reservedPercentage","RESERVED_RATE_WARNING_THRESHOLD_PERCENT","metadataReservedRate","IssuanceRateStatistic","issuanceRate","isInitial","InflationRateStatistic","inflationRate","DiscountRateStatistic","discountRate","DISCOUNT_RATE_EXPLANATION","formatDiscountRate","RedemptionRateStatistic","redemptionRate","REDEMPTION_RATE_EXPLANATION","formatRedemptionRate","PausePayStatistic","pausePay","AllowMintingStatistic","ReconfigurationStatistic","durationSeconds","DistributionSplitsStatistic","fundingCycleDuration","fullWords","ReservedSplitsStatistic","useTerminalCurrentOverflow","JBSingleTokenPaymentTerminalStore","useProjectToken","JBTokenStore","DistributionLimit","showTooltip","distributionLimitIsZero","_tooltip","_text","Parens","withParens","DistributionSplitCard","isLocked","editInputMode","onSplitDelete","radii","editSplitModalOpen","setEditSplitModalOpen","isProject","isOwner","percentIsRounded","cursor","padding","border","stroke","disabled","tertiary","borderRadius","md","onClick","gutter","align","span","marginRight","maxWidth","paddingTop","icon","stopPropagation","height","useUsedDistributionLimit","fundingCycleNumber","V2OperatorPermission","useHasPermission","permission","userAddress","NetworkContext","owner","hasOperatorPermission","JBOperatorStore","Array","isArray","toLowerCase","process","useProjectQueuedFundingCycle","useEditV2ProjectDetailsTx","transactor","cid","txOpts","onDone","V2BugNotice","warn","href","Banner","body","actions","backgroundColor","background","l2","position","ExclamationCircleOutlined","left","top","ReconfigurePreview","payoutSplits","reserveSplits","fundingCycleMetadata","fundingCycleData","number","basedOn","start","Date","now","distributionLimitCurrency","gte","formattedNum","formatIssuanceRate","weightedAmount","weight","parseEther","formatReservedRate","secondRowColWidth","sm","RelaunchFundingCycleBanner","newDuration","setNewDuration","newStart","setNewStart","modalOpen","setModalOpen","transactionPending","setTransactionPending","deprecatedFundingCycleLoading","deprecatedFundingCycle","deprecatedFundingCycleMetadata","deprecatedPayoutSplits","payoutSplitsLoading","ETH_PAYOUT_SPLIT_GROUP","deprecatedTokenSplits","tokenSplitsLoading","RESERVED_TOKEN_SPLIT_GROUP","terminals","primaryTerminal","distributionLimitData","distributionLimitLoading","deprecatedDistributionLimit","deprecatedDistributionLimitCurrency","deprecatedFundAccessConstraint","token","overflowAllowance","overflowAllowanceCurrency","launchFundingCycleTx","groupedSplits","mustStartAtOrAfter","useLaunchFundingCyclesTx","newBallot","DEPRECATED_BALLOT_ADDRESSES","THREE_DAY","readNetwork","BALLOT_ADDRESSES","TransactionModal","group","onConfirmed","location","reload","gap","useDeployProjectPayerTx","DEFAULT_METADATA","customBeneficiaryAddress","customMemo","tokenMintingEnabled","JBETHERC20ProjectPayerDeployer","useIssueTokensTx","symbol","V2ReconfigureProjectHandleDrawer","ensNameForm","ensNameInputDisabled","setEnsNameInputDisabled","loadingSetENSName","setLoadingSetENSName","loadingSetTextRecord","setLoadingSetTextRecord","textRecordValue","ensName","node","namehash","endsWith","PublicResolver","useProjectHandleENSTextRecord","projectEnsName","JBProjectHandles","join","useProjectENSName","editV2ProjectHandleTx","ensNameParts","reverse","useEditV2ProjectHandleTx","setENSTextRecordForHandleTx","useSetENSTextRecordForHandleTx","resetHandleForm","rel","ENSName","hideLabel","CheckCircleFilled","NewDeployModal","issueTokenModalVisible","setIssueTokenModalVisible","launchProjectPayerModalVisible","setLaunchProjectPayerModalVisible","handleModalVisible","setHandleModalVisible","hasIssuedToken","setHasIssuedToken","hasLaunchedPayableAddress","setHasLaunchedPayableAddress","completedAllSteps","seenColor","stepButtonStyle","okButtonProps","hidden","cancelButtonProps","cancelText","RichButton","prefix","heading","description","primaryColor","IssueTokenModal","LaunchProjectPayerModal","V2DownloadPaymentsModal","latestBlockNumber","setLatestBlockNumber","blockNumber","setBlockNumber","readProvider","getBlockNumber","then","download","rows","payments","querySubgraphExhaustive","entity","keys","orderBy","orderDirection","block","where","emitErrorNotification","Error","date","timestamp","toUTCString","includes","caller","note","csvContent","encodedUri","encodeURI","link","document","createElement","setAttribute","appendChild","click","confirmLoading","centered","marginTop","FormattedNumberInput","InputAccessoryButton","V2DownloadActivityModal","paymentsModalVisible","setPaymentsModalVisible","DistributePayoutsElem","event","distributePayoutsEvents","useSubgraphQuery","id","smallHeaderStyle","textAlign","formatHistoricalDate","EtherscanLink","txHash","splitProjectId","precision","beneficiaryDistributionAmount","distributedAmount","DistributeReservedTokensEventElem","tokenSymbol","V1ProjectContext","distributeEvents","tokenSymbolText","capitalize","plural","tokenCount","beneficiaryTokenCount","ProjectActivity","downloadModalVisible","setDownloadModalVisible","eventFilter","setEventFilter","_where","operator","projectEvents","fetchNextPage","hasNextPage","isLoading","isFetchingNextPage","useInfiniteSubgraphQuery","pageSize","list","pages","elem","payEvent","PayEventElem","redeemEvent","RedeemEventElem","projectCreateEvent","ProjectCreateEventElem","deployedERC20Event","DeployedERC20EventElem","distributePayoutsEvent","distributeReservedTokensEvent","useAllowanceEvent","paddingBottom","borderBottom","listStatus","count","prev","cur","Loading","borderTop","SectionHeader","margin","DownloadOutlined","Option","V2CurrencyAmount","NO_CURRENCY","V2_CURRENCY_ETH","ETHAmount","padEnd","V2_CURRENCY_USD","USDAmount","ProjectBalance","ETHBalance","balanceInDistributionLimitCurrency","balanceInDistributionLimitCurrencyLoading","StatLine","statLabel","statLabelTip","statValue","textPrimary","brand","textSecondary","DistributedRatio","usedDistributionLimit","secondaryTextStyle","OwnerBalance","projectOwnerWalletBalance","useEthBalanceQuery","TreasuryStats","totalVolume","overflow","overflowLoading","fundingProgressBarLoading","VolumeStatLine","paragraph","active","FundingProgressBar","targetAmount","balanceInTargetCurrency","overflowAmountInTargetCurrency","useTotalBalanceOf","bigNumbersDiff","V2ProjectTokenBalance","tokenAddress","useSymbolOfERC20","balance","V2ProjectHandle","AssetTypeSwitcherButton","formattedType","CaretDownFilled","AssetInput","input","setInput","setType","triggerChange","changedValue","onTypeChange","newType","toggleType","V2TokenRefs","List","fields","add","remove","_","validateTrigger","message","DeleteOutlined","PlusOutlined","V2BalancesModal","projectMetadata","projectName","hasEditPermissions","storeCidTx","editModalVisible","setEditModalVisible","initialTokens","tokens","r","tokenRefs","t","assetInput","footer","SettingOutlined","V2_PROJECT_IDS","JUICEBOX_DAO","ERC20TokenBalance","wallet","editingTokenRefs","getFieldsValue","uploadedMetadata","uploadProjectMetadata","IpfsHash","FundingCycleDetails","formattedStartTime","formattedEndTime","ballotStrategy","tokenSymbolPlural","ReservedTokensText","IssuanceRateText","payerRate","riskWarningText","labelStyle","column","xs","lg","xl","xxl","contentStyle","whiteSpace","FundingCycleDetailWarning","minWidth","DistributePayoutsModal","distributionAmount","setDistributionAmount","distributePayoutsTx","memo","useDistributePayoutsTx","converter","useCurrencyConverter","unusedFunds","sub","distributable","distributionCurrencyName","grossAvailableAmount","feeAmount","feeForAmount","netAvailableAmount","netAvailableAmountFormatted","netDistributionAmount","usdToWei","connectWalletText","defaultSplit","useSetProjectSplits","txGroupedSplits","OwnerSplitCard","remainingSplitsPercentage","ownerSplit","thousandsSeparator","isLockedSplit","confirmedSplitsIncludesSplit","find","confirmedSplit","DescriptionParagraphOne","DescriptionParagraphTwo","DistributionLimitHeader","fundingCycleLoading","history","useHistory","projectLoading","search","go","EditPayoutsModal","contextPayoutSplits","setProjectSplits","modalLoading","setModalLoading","editingSplits","setEditingSplits","lockedSplits","editableSplits","addSplitModalVisible","setAddSplitModalVisible","totalSplitsPercentage","totalSplitsPercentageInvalid","ownerSplitCardVisible","onSplitsConfirmed","onError","renderSplitCard","index","deletedSplit","newEdited","concat","minHeight","failure","PayoutSplitsCard","hideDistributeButton","distributePayoutsModalVisible","setDistributePayoutsModalVisible","editPayoutModalVisible","setEditPayoutModalVisible","isLoadingStats","ETHBalanceLoading","usedDistributionLimitLoading","canEditPayouts","SET_SPLITS","CardSection","flexWrap","SpendingStats","hasFundingTarget","projectBalanceInCurrency","ownerAddress","useProjectReservedTokens","DistributeReservedTokensModal","reservedTokensSplits","distributeReservedTokensTx","log","useDistributeReservedTokens","reservedTokens","reservedTokensFormatted","tokenTextPlural","tokenTextSingular","distributeReservedTokens","EditTokenAllocationModal","editingReservedTokensSplits","setEditingReservedTokensSplits","totalPercentagesInvalid","onSaveTokenAllocation","Callout","ProjectTicketMods","mods","onModsChanged","ReservedTokensSplitsCard","distributeReservedTokensModalVisible","setDistributeReservedTokensModalVisible","editTokenAllocationModalVisible","setEditTokenAllocationModalVisible","loadingReservedTokens","canEditTokens","tokensText","tokensTextSingular","textTransform","CurrentFundingCycle","expandCard","LoadingOutlined","FundingCycleDetailsCard","fundingCycleDetails","fundingCycleDurationSeconds","fundingCycleStartTime","isFundingCycleRecurring","fundingCycleRiskCount","expand","V2ReconfigureProjectDetailsDrawer","projectForm","loadingSaveChanges","setLoadingSaveChanges","EditV2ProjectDetailsTx","resetProjectForm","infoUri","twitter","discord","payButton","payDisclosure","substring","PROJECT_PAY_CHARACTER_LIMIT","V2ReconfigureUpcomingMessage","currentFCNumber","ballotStrategyLength","secondsUntilNextFC","secondsUntil","useReconfigureFundingCycle","editingProjectData","exit","editingPayoutGroupedSplits","editingReservedTokensGroupedSplits","editingFundingCycleMetadata","editingFundingCycleData","editingFundAccessConstraints","reconfigureV2FundingCycleTx","useReconfigureV2FundingCycleTx","reconfigureTxLoading","setReconfigureTxLoading","reconfigureLoading","reconfigureFundingCycle","ReconfigureButton","reconfigureHasChanges","action","CaretRightFilled","V2ProjectReconfigureModal","hideProjectDetails","useLocation","params","URLSearchParams","initialFundingDrawerVisible","get","initialEditingData","setInitialEditingData","dispatch","useAppDispatch","queuedFundingCycleResponse","queuedFundingCycle","queuedPayoutSplits","queuedReservedTokensSplits","queuedDistributionLimitData","queuedDistributionLimit","queuedDistributionLimitCurrency","effectiveFundingCycle","effectivePayoutSplits","effectiveReservedTokensSplits","effectiveDistributionLimit","effectiveDistributionLimitCurrency","editingV2ProjectActions","setFundAccessConstraints","serializeV2FundingCycleData","setFundingCycleData","serializeV2FundingCycleMetadata","defaultFundingCycleMetadata","setFundingCycleMetadata","setPayoutSplits","setReservedTokensSplits","payoutGroupedSplits","reservedTokensGroupedSplits","useInitialEditingData","useAppSelector","state","editingV2Project","useEditingV2FundingCycleMetadataSelector","useEditingV2FundingCycleDataSelector","useEditingV2FundAccessConstraintsSelector","useEditingProjectData","fundingHasSavedChanges","fundingDrawerHasSavedChanges","tokenDrawerHasSavedChanges","rulesDrawerHasSavedChanges","editedChanges","serializeFundAccessConstraint","durationUpdated","distributionLimitUpdated","distributionLimitCurrencyUpdated","payoutGroupedSplitsUpdated","reservedRateUpdated","reservedTokensGroupedSplitsUpdated","discountRateUpdated","redemptionRateUpdated","pausePaymentsUpdated","allowMintingUpdated","ballotUpdated","useFundingHasSavedChanges","projectHandleDrawerVisible","setProjectHandleDrawerVisible","projectDetailsDrawerVisible","setProjectDetailsDrawerVisible","fundingDrawerVisible","setFundingDrawerVisible","tokenDrawerVisible","setTokenDrawerVisible","rulesDrawerVisible","setRulesDrawerVisible","closeReconfigureDrawer","unsavedChangesModalVisibile","closeUnsavedChangesModal","handleGlobalModalClose","FundingDrawer","TokenDrawer","RulesDrawer","V2ReconfigureFundingModalTrigger","triggerButton","initialReconfigureModalVisible","useDispatch","reconfigureModalVisible","setReconfigureModalVisible","localStoreRef","useRef","handleModalOpen","createStore","replace","setDistributionLimitCurrency","setDuration","store","BallotState","useUpcomingFundingCycle","latestConfiguredFundingCycleResponse","useProjectLatestConfiguredFundingCycle","latestConfiguredFundingCycle","latestConfiguredFundingCycleMetadata","latestConfiguredFundingCycleBallotState","isCurrentFundingCycleLatest","queuedFundingCycleMetadata","hasLatestBallotFailed","failed","UpcomingFundingCycle","upcomingFundingCycle","upcomingFundingCycleMetadata","ballotState","queuedReservedRate","ballotStrategyAddress","HistoricalFundingCycle","numFundingCycles","isLastFundingCycle","role","CaretRightOutlined","FundingCycleHistory","currentFundingCycle","selectedIndex","setSelectedIndex","pastFundingCycles","setPastFundingCycles","selectedFundingCycle","firstFCOfEachConfiguration","JBFundingCycleStore","previousReconfiguration","previousReconfigurationFirstFundingCycle","allFundingCycles","firstFundingCycleOfConfiguration","configurationIndex","currentReconfigurationStart","nextConfigurationStart","currentDuration","currentDiscountRate","numInterimFundingCycles","isLastConfiguration","interimIndex","interimWeight","interimStart","interimNumber","interimFundingCycle","nextInterimWeight","nextInterimStart","nextInterimNumber","nextFundingCycle","deriveFundingCyclesBetweenEachConfiguration","loadPastFundingCycles","allCyclesLoaded","FundingCycles","maxHeight","NoFundingCycle","V2FundingCycleSection","canReconfigure","RECONFIGURE","queuedFundingCycleLoading","tabText","tabs","FundingCycleSection","reconfigureButton","useUserUnclaimedTokenBalance","useETHReceivedFromTokens","tokenAmount","primaryTerminalCurrentOverflow","totalTokenSupply","undistributedReservedTokens","realTotalTokenSupply","V2BallotState","Active","ballotRedemptionRate","tokenAmountWad","base","numerator","MAX_REDEMPTION_RATE","statsStyle","V2RedeemModal","redeemAmount","setRedeemAmount","totalBalance","maxClaimable","rewardAmount","redeemTokensTx","minReturnedTokens","useRedeemTokensTx","share","formatPercent","tokensTextLong","includeTokenWord","tokensTextShort","modalTitle","minReturnedTokensFormatted","exectuteRedeemTransaction","flexDirection","redeemBN","WarningOutlined","props","ref","React","AntdIcon","_objectSpread","WarningOutlinedSvg","displayName","V2ClaimTokensModal","claimAmount","setClaimAmount","claimTokensTx","useClaimTokensTx","unclaimedBalance","useLayoutEffect","ticketsIssued","tokenTextLong","tokenTextShort","l1","max","V2MintModal","mintTokensTx","useMintTokensTx","erc20Issued","tokensTokenLower","tokensTokenUpper","isAddress","rule","valuePropName","V2ManageTokensSection","manageTokensModalVisible","setManageTokensModalVisible","cv","claimedBalance","walletAddress","useErc20Contract","useERC20BalanceOf","participantsModalVisible","setParticipantsModalVisible","hasIssuedERC20","hasIssueTicketsPermission","ISSUE","tokenText","userOwnershipPercentage","showIssueTokensButton","claimedBalanceFormatted","unclaimedBalanceFormatted","manageTokensRowStyle","hasOverflow","userHasMintPermission","MINT","projectAllowsMint","IssueTokenButton","onCompleted","ManageTokensModal","RedeemModal","ClaimTokensModal","MintModal","ParticipantsModal","V2ConfirmPayModal","weiAmount","onSelectWallet","payProjectTx","preferClaimedTokens","usePayV2ProjectTx","setPreferClaimed","customBeneficiaryEnabled","setCustomBeneficiaryEnabled","setMemo","usdAmount","weiToUsd","receivedTickets","ownerTickets","riskCount","hasIssuedTokens","txBeneficiary","Paragraph","ProjectRiskNotice","unsafeProperties","bordered","MemoFormItem","ImageUploader","url","checked","htmlFor","V2PayButton","payAmount","payInCurrency","wrapperStyle","isArchived","payModalVisible","setPayModalVisible","payWarningModalVisible","setPayWarningModalVisible","weiPayAmt","useWeiConverter","payButtonText","disabledMessage","isPayDisabled","PayWarningModal","useAddToBalanceTx","useTransferProjectOwnershipTx","newOwnerAddress","useTransferUnclaimedTokensTx","V2ProjectHeaderActions","toolDrawerVisible","setToolDrawerVisible","showReconfigureButton","unclaimedTokenBalance","paddingRight","ProjectVersionBadge","versionText","ProjectToolsDrawer","useSetProjectUriTx","ToolOutlined","GUTTER_PX","VolumeChart","lazy","AllAssetsButton","RightCircleOutlined","V2Project","singleColumnLayout","expandFundingCycleCard","createdAt","canReconfigureFundingCycles","editV2ProjectDetailsTx","isNewDeploy","isMobile","hasEditPermission","useIsUserAddress","newDeployModalVisible","setNewDeployModalVisible","balancesModalVisible","setBalancesModalVisible","colSizeMd","hasCurrentFundingCycle","hasQueuedFundingCycle","ProjectHeader","onClickSetHandle","PayInputGroup","PayButton","weightingFn","MOON_MARS","SpecificLimitModal","withArrow","PayoutConfigurationExplainerCollapse","MinimalCollapse","header","ExternalLink","helpPagePath","DistributionSplitsSection","specificLimitModalOpen","setSpecificLimitModalOpen","allSplits","splitsAfterDelete","DURATION_UNIT_OPTIONS","durationUnitText","unit","DurationInputAndSelect","defaultDurationUnit","FundingCycleExplainerCollapse","FundingForm","onFormUpdated","isCreate","fundingForm","Form","setSplits","durationEnabled","setDurationEnabled","initialValues","_distributionLimit","_distributionLimitCurrency","durationUnit","deriveDurationUnit","secondsToOtherUnit","onFundingFormSave","durationInSeconds","otherUnitToSeconds","setDiscountRate","defaultFundingCycleData","setRedemptionRate","setBallotRedemptionRate","onFormChange","hasFormUpdated","shadowCard","SwitchHeading","DEFAULT_FUNDING_CYCLE_DURATION","FormItemWarningText","getV2CurrencyOption","ItemNoInput","ReservedTokensFormItem","onReservedTokensSplitsChange","setReservedRate","hasReservedRate","reservedRateChecked","setReservedRateChecked","defaultReservedRateNum","ProjectReserved","onToggled","MintRateFormItem","MAX_MINT_RATE","DiscountRateExtra","initialIssuanceRate","discountRatePercent","discountRateDecimal","secondIssuanceRate","thirdIssuanceRate","TokenForm","tokenForm","canSetRedemptionRate","canSetDiscountRate","DEFAULT_MINT_RATE","setWeight","discountRateChecked","setDiscountRateChecked","redemptionRateChecked","setRedemptionRateChecked","onTokenFormSaved","newReservedTokensSplits","issuanceRateFrom","defaultValueStyle","reservedRatePercent","initialMintingRate","newWeight","newReservedRatePercentage","reservedRateFrom","NumberSlider","discountRateFrom","ProjectRedemptionRate","DEFAULT_BONDING_CURVE_RATE_PERCENTAGE","newRedemptionRatePercentage","redemptionRateFrom","TokenMintingExtra","showMintingWarning","RulesForm","DEFAULT_BALLOT_STRATEGY","setShowMintingWarning","setBallotStrategy","setPausePay","setAllowMinting","onFormSaved","setBallot","switchContainerStyle","disableSaveButton","FormItemLabel","ReconfigurationStrategySelector","ballotStrategies","selectedStrategy","RadioGroupContext","RadioGroupContextProvider","Provider","RadioOptionTypeContext","RadioOptionTypeContextProvider","__rest","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","propertyIsEnumerable","InternalRadio","_classNames","groupContext","radioOptionTypeContext","_React$useContext","ConfigContext","getPrefixCls","innerRef","mergedRef","composeRef","isFormItemInput","FormItemInputContext","customizePrefixCls","prefixCls","customDisabled","restProps","radioPrefixCls","optionType","radioProps","_extends","DisabledContext","_a","_b","wrapperClassString","classNames","_defineProperty","onMouseEnter","onMouseLeave","RcCheckbox","Radio","RadioGroup","SizeContext","_useMergedState","useMergedState","_useMergedState2","_slicedToArray","ev","lastValue","_props$className","options","_props$buttonStyle","buttonStyle","customizeSize","groupPrefixCls","childrenToRender","option","mergedSize","classString","startsWith","getDataOrAriaProps","renderGroup","RadioButton","Button"],"mappings":"gHACA,wEAiBe,SAASA,GAAuB,SAC7CC,EAD6C,aAE7CC,EAF6C,KAG7CC,EAH6C,SAI7CC,EAJ6C,UAK7CC,EAL6C,SAM7CC,EAN6C,eAO7CC,IAUA,MAAOC,EAAOC,GAAYC,sBACnBC,EAASC,GAAcF,oBAAkB,IAE1C,UAAEG,GAAcC,qBAAWC,KAE3BC,EAAaC,uBAChBC,GAAcb,EAAYA,EAAUa,GAAOA,GAC5C,CAACb,IAEGc,EAAYF,uBACfC,GAAcZ,EAAWA,EAASY,GAAOA,GAC1C,CAACZ,IAEGc,EAAkBH,uBACtB,CAACI,EAASC,IAAaf,EAAiBA,EAAec,EAAGC,GAAKD,IAAMC,GACrE,CAACf,IAkGH,OA/FAgB,aAA4B,KAC1BC,eAAeC,IACb,MAAMC,EAAeC,EAAe1B,EAAUY,GAI9C,GAFAe,QAAQC,KAAKH,EAAcxB,EAAcC,EAAMF,EAAUY,GAEpDa,GAAiBxB,GAAyB,OAATC,EAEtC,IACEyB,QAAQC,KAAK,sBAAa3B,GAE1BU,GAAW,GACX,MAAMkB,QAAeJ,EAAaxB,MAAc,OAAIC,QAAJ,IAAIA,IAAQ,IAEtD4B,EAAWf,EAAWc,GAExBV,EAAgBZ,EAAOuB,KACzBH,QAAQC,KACN,qBACA3B,EACA,CAAEC,QACF,CAAE4B,YACF,CAAE9B,SAAUyB,EAAaM,UAE3BvB,EAASsB,GACTZ,EAAUY,IAEZ,MAAOE,GACPL,QAAQM,MACN,4BACAhC,EACA,CAAEC,QACF,CAAE8B,OACF,CAAEhC,SAAUyB,EAAaM,SACzBnB,GAGFsB,IAAwBF,EAAK,CAC3BG,KAAM,CACJnC,SAA8B,kBAAbA,EAAwBA,OAAWoC,EACpDC,kBAAmBpC,KAIvBO,EAASO,OAAWqB,IACpBlB,EAAUH,OAAWqB,IArCvB,QAuCEzB,GAAW,IAIfa,IAEA,MAAMc,EAAW,IAAMd,IAEjBe,EAGA,GAEN,UAAIpC,QAAJ,IAAIA,KAAUqC,OACZ,IAEErC,EAASsC,SAAQC,IAAM,IAAD,EACpB,MAAMC,EAAYjB,EAAegB,EAAE1C,SAAUY,GAE7C,IAAK8B,EAAEE,YAAcD,EAAW,OAEhC,MAAME,EAASF,EAAUG,QAAQJ,EAAEE,cAAW,UAAIF,EAAEK,cAAN,QAAgB,IACrD,OAATJ,QAAS,IAATA,KAAWK,GAAGH,EAAQP,GACtBC,EAAcU,KAAK,CACjBjD,SAAU2C,EACVE,cAGJ,MAAOZ,GACPN,QAAQM,MAAM,kBAAmB,CAC/BhC,eACAgC,UAKN,MAAO,IAAMM,EAAcE,SAAQS,GAAKA,EAAElD,SAASmD,IAAID,EAAEL,OAAQP,OAChE,CACDtC,EACAY,EACAX,EACAE,EACAD,EACAa,EACAG,EACAC,IAGK,CAAEiC,KAAM7C,EAAOG,WAGxB,SAASgB,EACP2B,EACAzC,GAEA,GAAKyC,EAEL,MAA8B,kBAAnBA,EACFzC,EAAYA,EAAUyC,QAAkBjB,EACnCiB,I,kCC/JhB,oRAsBO,MAAMC,EACXC,GAEOC,SACe,OAApBD,QAAoB,IAApBA,OAAA,EAAAA,EAAsBE,qBACnBC,YAASH,EAAqBE,mBAAmBE,GAChDC,MAKKC,EACXC,GACGN,SAAoB,OAAZM,QAAY,IAAZA,OAAA,EAAAA,EAAcC,WAAuC,OAAf,OAAZD,QAAY,IAAZA,OAAA,EAAAA,EAAcC,WAQ9C,SAASC,EACdC,GAEA,OAAOA,EAAsB,GAQ/B,MAIMC,EAAsBjD,GAAmBuC,QAAQvC,EAAIkD,YAErDC,EAYA,CACJ,CACEC,KAAM,UACNC,KAAM,EACNC,OAAStD,GACPA,EAAIkD,YAER,CACEE,KAAM,SACNC,KAAM,GACNC,OAAQtD,IACC,CACLuD,kBAAmBN,EAAmBO,IAAUC,KAAKzD,GAAK0D,IAAI,IAC9DC,mBAAoBV,EAAmBO,IAAUC,KAAKzD,GAAK0D,IAAI,OAIrE,CAAEN,KAAM,eAAgBC,KAAM,IAC9B,CAAED,KAAM,iBAAkBC,KAAM,GAAIC,OAAQM,KAC5C,CAAER,KAAM,uBAAwBC,KAAM,GAAIC,OAAQM,KAClD,CAAER,KAAM,WAAYC,KAAM,EAAGC,OAAQL,GACrC,CACEG,KAAM,qBACNC,KAAM,EACNC,OAAQL,GAEV,CAAEG,KAAM,cAAeC,KAAM,EAAGC,OAAQL,GACxC,CAAEG,KAAM,YAAaC,KAAM,EAAGC,OAAQL,GACtC,CAAEG,KAAM,eAAgBC,KAAM,EAAGC,OAAQL,GACzC,CAAEG,KAAM,mBAAoBC,KAAM,EAAGC,OAAQL,GAC7C,CACEG,KAAM,yBACNC,KAAM,EACNC,OAAQL,GAEV,CACEG,KAAM,2BACNC,KAAM,EACNC,OAAQL,GAEV,CAAEG,KAAM,WAAYC,KAAM,EAAGC,OAAQL,GACrC,CACEG,KAAM,iCACNC,KAAM,EACNC,OAAQL,GAEV,CACEG,KAAM,sBACNC,KAAM,EACNC,OAAQL,GAEV,CACEG,KAAM,yBACNC,KAAM,EACNC,OAAQL,GAEV,CACEG,KAAM,aACNC,KAAM,EACNC,OAAQtD,IACN,MAAM6D,EAAa7D,EAAI8D,cACvB,OAAOD,IAAeL,IAAUC,KAAK,KAAKK,cACtCC,IACAC,qBAAWH,MAKRI,EACXC,GAEiBf,EAAWgB,QAAO,CAACC,EAAUC,EAAWC,KAAO,IAAD,IAE7D,MAAMjB,EACe,KAAnBgB,EAAUhB,KA5FD,MA8Fc,IAAnBgB,EAAUhB,KA7FN,IA+Fe,IAAnBgB,EAAUhB,KA9FN,EAgGJ,EAGAkB,EACE,IAAND,EACI,EACAnB,EAAWqB,MAAM,EAAGF,GAAGH,QAAO,CAACM,EAAKC,IAAOD,EAAOC,EAAErB,MAAO,GAGjE,IAAI/D,EAOJ,OALEA,EADW,IAAT+D,EACMa,EAAeR,IAAIa,GAEnBL,EAAeR,IAAIa,GAAgBI,IAAItB,GAG1C,IACFe,EAED,CAACC,EAAUjB,MAAX,oBAAkBiB,EAAUf,cAA5B,aAAkB,OAAAe,EAAmB/E,UAArC,QAA+CA,KAGlD,IAWQsF,EACX/B,IAC2B,IAAD,EAC1B,MAAMuB,EAAWH,EAA6BpB,EAAauB,UACrDS,EAAgBC,YAA2BjC,EAAakC,QAAQjE,QAChEkE,EAAyBC,WAAWC,YAAO,OAACd,QAAD,IAACA,OAAD,EAACA,EAAUe,eACtDC,EAAe7C,QAAO,OAAC6B,QAAD,IAACA,OAAD,EAACA,EAAUgB,cAEvC,OAAOC,YAA6B,CAClCR,gBACAG,yBACApC,mBAAkB,UAAEC,EAAaC,gBAAf,aAAE,EAAuBwC,GAAG,GAC9CF,kBAQSG,EACX1C,GAEO2C,OAAOC,OAAOb,EAAkC/B,IAAejB,QACpE8D,IAAW,IAANA,IACLnE,Q,kCClNJ,kCACO,MAAMoE,EAAoB,8C,kCCCjC,mEAMe,SAASC,GAA4B,UAClDC,EADkD,cAElDC,EAFkD,SAGlDC,EAHkD,sBAIlDC,IAOA,OAAOlH,YAAiC,CACtCC,SAAUiH,EACNC,IAAeC,uBACfD,IAAeE,aACnBnH,aAAc,sBACdC,KACE4G,GAAaC,GAAiBC,EAC1B,CAACF,EAAWC,EAAeC,EAAUJ,KACrC,S,kCCzBV,uLAQO,SAASS,GAAkB,QAChCC,EADgC,OAEhCC,IAKA,OAAQD,EAAU,IAAOpB,WAAWqB,GAS/B,SAASC,GAAiC,OAC/CD,EAD+C,kBAE/C9D,IAKA,OAAOgE,YAAkBF,EAAS9D,EAAqB,KAAKU,WAQvD,SAASuD,EAAyBC,GACvC,OAAOA,EAAOvC,QACZ,CAACM,EAAKkC,IAASlC,EAAMmC,YAA0BD,EAAKN,UACpD,GAWG,SAASQ,GAAsB,OACpCH,EADoC,qBAEpCI,EAFoC,qBAGpCC,IAMA,MAAMC,EAA0B,GAqBhC,OApBAN,EAAOlF,SAASyF,IACd,MAKMC,EAAaX,EAAiC,CAClDD,OANoBF,EAAkB,CACtCC,QAASO,YAA0BK,EAAMZ,SACzCC,OAAQQ,IAKRtE,kBAAmByC,WAAW8B,KAE1BI,EAAgB,CACpBC,YAAaH,EAAMG,YACnBf,QAASa,EACTG,cAAeJ,EAAMI,cACrBC,YAAaL,EAAMK,YACnBzB,UAAWoB,EAAMpB,UACjB0B,UAAWN,EAAMM,WAEL,OAAdP,QAAc,IAAdA,KAAgBhF,KAAKmF,MAEhBH,EASF,SAASQ,GAAwB,oBACtCC,EADsC,eAEtCC,EAFsC,yBAGtCC,IAMA,MAAMC,EAAsBxB,EAAkB,CAC5CC,QAASO,YAA0Ba,GACnCnB,OAAQqB,IAGJZ,EACJ9B,WAAW0C,GAA4BC,EAAsBF,EAE/D,OAAOzC,WAAW8B,EAAqBc,QAAQ,M,kCC7GjD,kCAAO,MAAMC,EAAoC,CAC/CC,UAAW,QACXC,MAAOC,KAAKC,IAAI,IAAyB,GAApBC,OAAOC,c,kCCH9B,kFA8Be,SAASC,GAAiB,UACvCxC,EADuC,WAEvCyC,EAFuC,OAGvCC,EAHuC,sBAIvCvC,IAOA,OAAOlH,YAA6B,CAClCC,SAAUiH,EACNC,IAAeuC,wBACfvC,IAAewC,cACnBzJ,aAAc,WACdC,KAAM4G,GAAa0C,EAAS,CAAC1C,EAAW0C,EAAQD,GAAc,KAC9DnJ,UAAWY,uBAAaT,IACE,OAAEA,QAAF,IAAEA,IAAS,IA9BpBoJ,KAAKzB,IACf,CACLZ,QAASY,EAAMZ,QAAQnD,WACvBoE,YAAaL,EAAMK,YAAYpE,WAC/B2C,UAAWoB,EAAMpB,UAAU/B,cAC3BsD,YAAaH,EAAMG,YACnBG,UAAWN,EAAMM,UACjBF,cAAeJ,EAAMI,mBAwBpB,IACHhI,eAAgBU,uBAAY,CAAC4I,EAAU9H,KAC7B+H,IAAQD,EAAU9H,IACzB,Q,kCCrDP,4IAQO,MAAMgI,EAAWC,IAA2B,IAAD,EAChD,MAAO,CAGLzC,QAASG,YACPvB,WAAW8D,YAAmBD,EAAIzC,WAClCnD,WACFoE,YAAawB,EAAIxB,YACjBF,YAAa0B,EAAI1B,YACjBvB,UAAS,UAAEiD,EAAIjD,iBAAN,aAAE,EAAe/B,cAC1ByD,UAAWuB,EAAIvB,UACfF,cAAeyB,EAAIE,iBAIVC,EAAShC,IACb,CAGLZ,QAAS6C,YACPC,YAAmB3F,IAAUC,KAAKwD,EAAMZ,WACxCnD,WACFoE,YAAaL,EAAMK,YACnBF,YAAaH,EAAMG,YACnBvB,UAAWoB,EAAMpB,UAAYrC,IAAUC,KAAKwD,EAAMpB,gBAAa1E,EAC/DoG,UAAWN,EAAMM,UACjByB,eAAgB/B,EAAMI,gBAIb+B,EAAiBnC,IAAyB,IAAD,MACpD,MAAO,CACLK,YAAW,UAAEL,EAAMK,mBAAR,QAAuB,EAClCzB,UAAS,UAAEoB,EAAMpB,iBAAR,QAAqBrC,IAAUC,KAAK,GAAGK,cAChDsD,YAAW,UAAEH,EAAMG,mBAAR,QAAuBrD,IAClCwD,UAAWxD,IACXsD,eAAe,EACfhB,QAASY,EAAMZ,W,qOCxBJ,SAASgD,GAAU,MAChCpC,EADgC,eAEhCqC,EAFgC,SAGhCC,EAHgC,WAIhCC,EAJgC,oBAKhCC,EALgC,YAMhCC,EANgC,iBAOhCC,EAPgC,aAQhCxE,IAWA,MACEyE,OAAO,OAAEC,IACPjK,qBAAWkK,KAETC,EAAiBN,IAAwBxC,EAAMG,YAC/C4C,IAAoB/C,EAAMpB,WAC5BrC,IAAUC,KAAKwD,EAAMpB,WAAWP,GAAG,GAGjC2E,EAAa,EAAG3C,kBACpB,MAAM4C,EAAuBC,YAAyB,IAAd7C,EAAoB,cAE5D,OACE,sBAAK8C,MAAO,CAAEC,SAAU,QAASC,MAAOT,EAAOU,KAAKC,WAApD,UACE,cAACC,EAAA,EAAD,IADF,IACmB,yFAAqBP,SAOtCQ,EAFWC,cAEe,SAAW,QAErCC,EAA6B,IAE/B,gCAGE,sBAAKR,MAAO,CAAES,WAAY,KAA1B,UACE,cAAC,IAAD,CACEC,MAAO,kEAAoC7D,EAAMpB,aADnD,SAGE,eAAC,IAAD,CACEkF,GAAIC,YAAe,CAAEnF,UAAWoB,EAAMpB,YACtCoF,OAAO,SACPC,UAAU,yEAHZ,cAKIjE,EAAMpB,eATd,OAcA,sBACEuE,MAAO,CACLC,SAAU,QACVC,MAAOT,EAAOU,KAAKC,UACnBW,WAAY,IAJhB,UAOE,cAACC,EAAA,EAAD,CACEC,MAAO,kCACPC,IACE,8GAKD,IACH,cAACC,EAAA,EAAD,CAAkBzK,QAASmG,EAAMG,cAAgB,IAChD2C,GACC,cAAC,IAAD,CAASe,MAAO,wCAAhB,SACE,cAACU,EAAA,EAAD,YAQNC,EAAwB,IAE1B,sBACErB,MAAO,CACLS,WAAY,IACZR,SAAUK,EACVgB,QAAS,OACTC,WAAY,YALhB,UAQG1E,EAAMG,YACL,cAACmE,EAAA,EAAD,CAAkBzK,QAASmG,EAAMG,cAC/B,MACFH,EAAMG,aAAe2C,EACrB,8CACE,KACHA,GACC,sBAAMK,MAAO,CAAEe,WAAY,GAA3B,SACE,cAAC,IAAD,CAASL,MAAO,wCAAhB,SACE,cAACU,EAAA,EAAD,QAjBR,OA0BEI,EAAa,KACjB,MAAMC,EAAU,OAAGrC,QAAH,IAAGA,OAAH,EAAGA,EAAYsC,IAAI7E,EAAMZ,SAAS0F,IAAIC,KAChDC,EAAsBC,YAAUL,EAAY,IAAKlC,IAEvD,OACE,uBAAMS,MAAO,CAAEC,SAAUK,GAAzB,cAEE,cAACyB,EAAA,EAAD,CACE5C,SAAU6C,YAAc,OACtB7C,QADsB,IACtBA,OADsB,EACtBA,EAAUrG,cAGb+I,EACAvC,EAAc,qCAAQA,KAAsB,KAR/C,QAaE2C,EAAwBlD,YAC5B3F,IAAUC,KAAKwD,EAAMZ,UAGvB,OACE,sBACE+D,MAAO,CACLsB,QAAS,OACTC,WAAY,WACZW,eAAgB,gBAChBC,aAAc,GALlB,UAQE,sBAAKnC,MAAO,CAAEoC,WAAY,KAA1B,UACE,qBAAKpC,MAAO,CAAEsB,QAAS,OAAQC,WAAY,YAA3C,SACG3B,EACC,cAACY,EAAD,IAEA,cAACa,EAAD,MAIHxE,EAAMK,YACL,cAAC2C,EAAD,CAAY3C,YAAaL,EAAMK,cAC7B,QAEN,gCACE,iCAAO+E,EAAP,OACW,OAAV7C,QAAU,IAAVA,KAAYlE,GAAG,IAAMgE,EACpB,uBAAMc,MAAO,CAAEe,WAAY,UAA3B,UACG,IACD,cAACS,EAAD,OAEA,KACHzG,EACC,cAACsH,EAAA,EAAD,CACEC,UAAW,CAAEvB,WAAY,GACzBG,IACE,mEACInG,EAAeF,WAAWoH,GAA0B,SAK1D,WCjMG,SAASM,GAAU,OAChCjG,EADgC,gBAEhCkG,GAAkB,EAFc,SAGhCrD,EAHgC,WAIhCC,EAJgC,oBAKhCC,EALgC,YAMhCC,EANgC,iBAOhCC,EAPgC,aAQhCxE,IAUE,IAAD,EACD,MAAM0H,EAAoB,iBACxBnG,QADwB,IACxBA,OADwB,EACxBA,EAAQvC,QAAO,CAAC2I,EAAK7F,IAAU6F,EAAM7F,EAAMZ,SAAS,UAD5B,QACkC,EACtD0G,EAAkBf,IAAuBa,EAE/C,OACE,gCACG,IAAInG,GACFsG,MAAK,CAAC7M,EAAGC,IAAOD,EAAEkG,QAAUjG,EAAEiG,QAAU,GAAK,IAC7CqC,KAAIzB,GACH,qBAEEmD,MAAO,CAAEmC,aAAc,GAFzB,SAIE,cAAClD,EAAD,CACEpC,MAAOA,EACPqC,eAAgBsD,EAChBrD,SAAUA,EACVC,WAAYA,EACZC,oBAAqBA,EACrBC,YAAaA,EACbC,iBAAkBA,EAClBxE,aAAcA,KAXV,GAAE8B,EAAMG,eAAeH,EAAMZ,aAexC0G,EACC,cAAC1D,EAAD,CACEpC,MAAO,CACLG,YAAaqC,EACbpD,QAAS0G,EACT1F,mBAAelG,EACfmG,iBAAanG,EACb0E,eAAW1E,EACXoG,eAAWpG,GAEbmI,eAAgBsD,EAChBrD,SAAUA,EACVC,WAAYA,EACZC,oBAAqBA,EACrBC,YAAaA,EACbC,iBAAkBA,EAClBxE,aAAcA,IAEd,U,iJChDK,SAAS8H,GAAmB,KACzCC,EADyC,SAEzCC,EAFyC,kBAGzCC,GAAoB,EAHqB,WAIzCC,EAJyC,MAKzCjD,EALyC,QAMzC3K,EANyC,eAOzC6N,IAUA,OACE,cAAC,IAAD,CACEC,mBAAoB,CAAEC,SAAU,UAChCN,KAAMA,EACNO,OAAO,WACPN,SAAUA,EACV/C,MAAOA,EACPkD,eAAgB,WAAMA,QAAN,IAAMA,OAAN,EAAMA,IANxB,SAQE,eAAC,IAAD,CAAOI,UAAU,WAAWC,KAAK,QAAjC,UACE,gCACE,cAAC,IAAUC,YAAX,CACExK,KAAK,OACLyK,cAAe,CACbC,MAAO,CAAC,CAAEC,UAAU,KAEtBC,SAAU5K,IACR,MAAMpD,EAAMoD,EAAO6K,YAAgB7K,GAAQ,GAE3C8J,EAAKgB,eAAe,CAAEC,OAAQnO,QAGhCoN,GACA,cAAC,IAAUgB,sBAAX,CACEhL,KAAK,SACLiL,aAAcnB,EAAKoB,cAAc,UACjCC,aAAa,WACbV,cAAe,CACbW,aAAc,CAAC,QACfC,MAAO,yCAETV,UAAQ,IAGZ,cAAC,IAAUW,mBAAX,CAA8BtL,KAAK,gBACnC,cAAC,IAAUuL,eAAX,CACEvL,KAAK,UACLwL,WAAY1B,EAAKoB,cAAc,WAC/BO,UAAWC,IACT5B,EAAKgB,eAAe,CAAEY,kBAK5B,gCACE,6BACE,kCAEF,cAAC,IAAUC,YAAX,CAAuB3L,KAAK,YAC5B,cAAC,IAAU4L,eAAX,CAA0B5L,KAAK,YAC/B,cAAC,IAAU6L,eAAX,CAA0B7L,KAAK,eAGjC,gCACE,6BACE,wDAGF,cAAC,IAAU8L,iBAAX,CAA4B9L,KAAK,cACjC,cAAC,IAAU+L,qBAAX,CAAgC/L,KAAK,qBAEvC,gCACE,cAAC,IAAKgM,KAAN,iBACG/B,QADH,IACGA,IACC,cAAC,IAAD,CAAQgC,SAAS,SAAS5P,QAASA,EAAS6P,KAAK,UAAjD,SACE,+BACE,qDAMR,cAAC,IAAD,UACE,uI,sGC3GG,SAASC,GAAoB,QAC1CC,EAD0C,KAE1CC,EAF0C,SAG1CC,IAMA,OACE,cAAC,IAAD,CACE5E,MAAO,yBACP6E,OAAQ,iBACRH,QAASA,EACTC,KAAMA,EACNC,SAAUA,EACVE,gBAAc,EANhB,SAQE,+F,kCCrBN,gEAQe,SAASC,GAAmB,MACzC/E,EADyC,QAEzC0E,EAFyC,QAGzCM,EAHyC,SAIzCC,IAMA,OACE,eAAC,IAAD,IAAYjI,IAAa0H,QAASA,EAASM,QAASA,EAASF,gBAAc,EAA3E,UACE,6BAAK9E,IACJiF,O,kCCrBP,kCAAO,MAAMC,EAAiC,G,kCCA9C,kCAAO,MAAMC,EAAgC,uB,kCCC7C,sDAGO,SAASC,IACd,MAAOC,EAAKC,GAAU5Q,sBAChB,UAAEG,GAAcC,qBAAWC,KAYjC,OAVAwQ,qBAAU,MACR/P,iBACE,MAAMgQ,QAAM,OAAM3Q,QAAN,IAAMA,OAAN,EAAMA,EAAW4Q,qBAAqBC,UAAUL,OACvDG,GAELF,EAAOE,EAAI,IAEbG,KACC,CAAC9Q,IAEGwQ,I,yUCqCM,SAASO,GAAuB,QAC7ClB,EAD6C,KAE7CmB,EAF6C,+BAG7CC,GAAiC,EAHY,OAI7ClK,EAJ6C,aAK7CmK,EAL6C,gBAM7CC,EAN6C,kBAO7CtO,EAP6C,qBAQ7CuO,EAR6C,QAS7CjB,EAT6C,aAU7CkB,EAV6C,iBAW7CC,IAaE,IAAD,EACD,MACErH,OAAO,OAAEC,IACPjK,qBAAWkK,MAERoD,GAAQgE,oBAETC,EAA8BC,mBAClC,KACG5O,GACDC,YAASD,GAAmBE,GAAGC,MACjC,CAACH,IAIG6O,EAAeD,mBACnB,KAAO1K,EAAOnF,QAA6B,IAAlBmF,EAAOnF,aAAiCJ,IAAjB0P,GAChD,CAACA,EAAcnK,EAAOnF,UAGjB+P,EAAkBC,GAAuB/R,mBAAoB,YAC7DgS,EAAkBC,GAAuBjS,mBAC9C2R,EAA8B,UAAY,WAErCtL,EAAW6L,GAAgBlS,sBAC3BuH,EAAsB4K,GAA2BnS,sBACjD8G,EAAQsL,IAAapS,sBACrB8H,GAAauK,IAAkBrS,qBAGhCsS,GAAwB5B,cAExB6B,GAAgBD,GAClBE,YAAUF,SACV3Q,EAEJkP,qBAAU,IACRnD,EAAKgB,eAAe,CAClBrI,YACAyB,mBAKJ+I,qBAAU,KACiB,YAArBiB,IACFpE,EAAKgB,eAAe,CAAErI,eAAW1E,IACjCuQ,OAAavQ,MAEd,CAACmQ,EAAkBpE,IAEtBmD,qBAAU,KAENoB,EADEb,GAIgBO,EAHE,UAGwC,YAC7D,CAACA,EAA6BP,EAAgCpB,IAIjEa,qBAAU,KACR,IAAKQ,EAAc,OACnBU,EAAoB,WAMQ,IAAD,EAJzBV,EAAahL,YACZrC,IAAUC,KAAKoN,EAAahL,WAAWnD,GACtCc,IAAUC,KAAKM,QAGjBwN,EAAoB,WACpBG,EAAY,UAACb,EAAahL,iBAAd,aAAC,EAAwBoM,aAavC,GAXAJ,GACEhB,EAAavJ,YACT4K,IAA0C,IAA3BrB,EAAavJ,kBAC5BnG,GAGN+L,EAAKgB,eAAe,CAClB9G,YAAayJ,EAAazJ,YAC1Bf,QAASO,YAA0BiK,EAAaxK,WAG9C8K,EACFS,GACExL,YAAkB,CAChBC,QAASO,YAA0BiK,EAAaxK,SAChDC,OAAM,OAAE9D,QAAF,IAAEA,IAAqB,YAG5B,GAAIA,EAAmB,CAC5B,MAAM2P,EAAoBtB,EAAaxK,QACjCC,EAASF,YAAkB,CAC/BC,QAASO,YAA0BuL,GACnC7L,OAAQ9D,IAEVoP,GAAUtL,QAEVsL,QAAUzQ,KAEX,CACDqB,EACA2O,EACAN,EACA3D,EACAsC,IAGF,MAAM4C,GAAc,KAClBV,OAAavQ,GACbyQ,QAAUzQ,GACV0Q,QAAe1Q,IAIXkR,GAAe/R,gBACb4M,EAAKoF,iBAEX,MAAMC,EAAqBjL,GACvBW,KAAKuK,MAAMlL,GAAYmL,UAAY,UACnCtR,EAEEuR,EAAW,CACftL,YAAa8F,EAAKoB,cAAc,eAChCjI,QAASG,YAAiB0G,EAAKoB,cAAc,YAAYpL,WACzDoE,YAAaiL,EACblL,eAAe,EACfxB,UAAWA,EACX0B,eAAWpG,GAGb,IAAI6F,EAA0BN,EAG1BK,IAAyBoK,IAC3BnK,EAAiBH,YAAsB,CACrCH,SACAI,qBAAoB,OAAEtE,QAAF,IAAEA,IAAqB,IAC3CuE,yBAEkB,OAApBgK,QAAoB,IAApBA,KAAuBhK,IAGzB,MAAM4L,EACK,SAAThC,EACI3J,EAAe0B,KAAIkK,GACjBA,EAAExL,eAAF,OAAkByJ,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAczJ,cAChCwL,EAAE/M,aAAF,OAAgBgL,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAchL,WAC1B,IACK+M,KACAF,GAELE,IAEN,IAAI5L,EAAgB0L,GAEX,OAAf5B,QAAe,IAAfA,KAAkB6B,GAElBP,KACAlF,EAAK2F,cAEL/C,KAkDIgD,GAA2B,KAAO,IAAD,EACrC,OAAOC,YACLnM,YAAyB,UAACsG,EAAKoB,cAAc,kBAApB,QAAkC,KAQzD0E,GAAe1M,EACjBA,EAAUA,EAASrB,WAAU,OAAC8M,SAAD,IAACA,MAAiB,KAAQ,SACvD5Q,EAEJ,SAAS8R,KACP,OAAOD,IAAgBA,GAAe,EACpC,cAAC,IAAD,CACE3H,MACE,oFAEGmH,gBAAMQ,GAAc,GAFvB,cAEkCjB,IAFlC,cACE,cAAC,IAAD,CAAgBxI,SAAUyH,OAI9B1F,IACE,gLACyCyG,QAK3C,KAGN,OACE,cAAC,IAAD,CACEjH,MAAgB,SAAT6F,EAAkB,qBAAiB,wBAC1CnB,QAASA,EACTC,KAAM4C,GACN1C,OAAiB,SAATgB,EAAkB,qBAAiB,oBAC3CjB,SAAU,KACR0C,KACAlF,EAAK2F,cACL/C,KAEFF,gBAAc,EAVhB,SAYE,eAAC,IAAD,CACE1C,KAAMA,EACNO,OAAO,WACPF,mBAAoB,CAAEC,SAAU,UAChC0F,UAAWC,IACK,UAAVA,EAAEC,KAAiBf,MAL3B,UAQE,cAAC,IAAKjD,KAAN,CAAW/D,MAAO,mBAAlB,SACE,eAAC,IAAMgI,MAAP,CACE/T,MAAOgS,EACPtD,SAAUmF,GAAK5B,EAAoB4B,EAAElI,OAAO3L,OAF9C,UAIE,cAAC,IAAD,CAAOA,MAAM,UAAU8K,MAAO,CAAES,WAAY,KAA5C,SACE,2CAEF,cAAC,IAAD,CAAOvL,MAAM,UAAU8K,MAAO,CAAES,WAAY,KAA5C,SACE,kDAKgB,YAArByG,EACC,cAAC,IAAUgC,WAAX,CACElQ,KAAK,cACLmQ,aAAcrG,EAAKoB,cAAc,eACjCT,cAAe,CACbxC,MAAO,iBACPyC,MAAO,CACL,CACE0F,UAtGc,KAC5B,MAAMpM,EAAc8F,EAAKoB,cAAc,eACvC,OAAgB,OAAZuC,QAAY,IAAZA,OAAA,EAAAA,EAAczJ,eAAgBA,EACzBqM,QAAQC,UAEVC,YAAkB,OACvBvM,QADuB,IACvBA,IAAe,GACfV,EACAiK,EACAiD,oBACElN,GACAzE,GACEA,EAAEmF,eAAF,OAAkByJ,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAczJ,cAChCnF,EAAE4D,aAAF,OAAgBgL,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAchL,iBA4F1BkI,UAAU,GAEZ8F,gBAAiBzM,GACf8F,EAAKgB,eAAe,CAAE9G,kBAI1B,cAAC,IAAKgI,KAAN,CACEhM,KAAM,YACN0K,MAAO,CAAC,CAAE0F,UAhGM,IACnBM,YAAc5G,EAAKoB,cAAc,cAI/BmF,QAAQC,UAHND,QAAQM,OAAO,yCA+FhB1I,MAAO,6BACP0C,UAAQ,EAJV,SAME,cAAC,IAAD,CACEzO,MAAO0U,SAAQ,OAACnO,QAAD,IAACA,IAAa,IAC7BuE,MAAO,CAAEpC,MAAO,QAChBiM,YAAa,YACbjG,SAAWnI,IACT6L,EAAY,OAAC7L,QAAD,IAACA,OAAD,EAACA,EAAWoM,iBAKV,YAArBX,EACC,cAAC,IAAUgC,WAAX,CACElQ,KAAK,cACLmQ,aAAcrG,EAAKoB,cAAc,eACjCT,cAAe,CACbxC,MAAO,mCACP0C,UAAU,EACVU,MAAO,sFAEToF,gBAAiBzM,IACf8F,EAAKgB,eAAe,CAAE9G,mBAGxB,KAGH5E,GAA0C,WAArBgP,EACpB,cAAC,IAAKpC,KAAN,CACElE,UAAU,2BACVG,MAAO,sBACP0C,UAAQ,EACRU,MACEsD,IAAiB7E,EAAKoB,cAAc,YAAc,IAChD,mCACwB,YAArBgD,EACC,8BACE,cAAC2B,GAAD,MAGF,sFAKF,KAjBR,SAoBE,sBACE7I,MAAO,CACLsB,QAAS,OACTpB,MAAOT,EAAOU,KAAK2J,QACnBvI,WAAY,UAJhB,UAOE,cAAC,IAAD,CACErM,MAAK,OAAEgH,QAAF,IAAEA,OAAF,EAAEA,EAAQuB,QAAQ,GACvBoM,YAAa,IACbjG,SAAU1H,GApMA6N,KAAuB,IAAD,EAC5C,GAAIhD,IAAgCgD,EAAW,OAC/C,MAAMpN,EAAuBS,YAAwB,CACnDG,yBAAwB,OAAEnF,QAAF,IAAEA,IAAqB,IAC/CkF,eAAgByM,EAChB1M,oBAA8B,QAATkJ,EAAiB,EAAjB,iBAAqBE,QAArB,IAAqBA,OAArB,EAAqBA,EAAcxK,eAAnC,QAA8C,IAG/Da,EAAaX,YAAiC,CAClDD,OAAQ6N,EACR3R,kBAAmBuE,IAGrB4K,EAAwB5K,EAAqBkL,YAC7CL,GAAUuC,GACVjH,EAAKgB,eAAe,CAClB7H,QAASO,YAA0BM,MAoLLkN,CAAenP,WAAWqB,GAAU,MACxDuH,cAAe,CACbC,MAAO,CAAC,CAAE0F,UAAWV,KACrB/E,UAAU,GAEZsG,UACEhD,GAAgBJ,EACd,cAAC,IAAD,CACEA,iBAAkBA,EAClB1H,SAAUyH,IAGZ,cAAC,IAAD,CAAsBsD,QAAStD,MAIrC,sBACE5G,MAAO,CACLsB,QAAS,OACTC,WAAY,SACZR,WAAY,IAJhB,UAOE,uCAAQ+B,EAAKoB,cAAc,cAC3B,cAAC,IAAD,CACEhD,IACE,uKAIG4B,EAAKoB,cAAc,WAJtB,kBAGG9L,GAHH,cAEE,cAAC,IAAD,CAAgB+G,SAAUyH,OAM9BjJ,UAAW,UACX2E,UAAW,CAAEvB,WAAY,aAMjC,cAAC,IAAKiE,KAAN,UACE,qBACEhF,MAAO,CACLsB,QAAS,OACTC,WAAY,UAHhB,SAME,sBAAMvB,MAAO,CAAEmK,KAAM,GAArB,SACE,cAAC,IAAD,CACEvG,SAAWwG,IACTtH,EAAKgB,eAAe,CAAE7H,QAASmO,KAEjCC,KAAM,IACNlB,aAAc,EACdmB,YAAW,UAAExH,EAAKoB,cAAc,kBAArB,QAAmC,EAC9CqG,OAAO,IACPvR,KAAK,UACLyK,cAAe,CACbC,MAAO,CAAC,CAAE0F,UAAWV,cAOjC,cAAC,IAAK1D,KAAN,CACEhM,KAAK,cACLiI,MAAO,oBACPoD,MACE,wIAJJ,SAUE,cAAC,IAAD,CACEmG,aA3NYC,GACpBA,GAAWA,EAAUC,MAASC,MAAM,OA2N5B/G,SAAU1G,GAAeuK,GAAevK,c,kCCtgBpD,6CAKO,SAAS0N,EAAsBlF,GACpC,MAAOmF,EAA4BC,GACjC1V,oBAAS,IAEJ2V,EAAaC,GAAkB5V,oBAAkB,GAElD6V,EAAkBvF,EAElBwF,EAAY,IAAMJ,GAA8B,GAGhDK,EAAyBxV,uBAAY,KACzC,IAAKoV,EACH,OAAOE,IAETC,MACC,CAACH,EAAaE,IAEjB,MAAO,CACLA,kBACAF,cACAC,iBACAH,6BACAK,YACAE,WAfiB,IAAMN,GAA8B,GAgBrDK,4B,kCC9BJ,yEAOe,SAASE,EAAgB5P,GACtC,MAAM,cAAE6P,GAAkB9V,qBAAW+V,KAErC,OAAOC,YAA0B,CAC/B7W,SAAUkH,IAAe4P,WACzB7W,aAAc,UACdC,KAAM4G,IAAc6P,EAAgB,CAAC7P,GAAa,S,kCCbtD,yDAIe,SAASiQ,GAAoB,UAC1CjQ,EAD0C,sBAE1CG,IAKA,OAAOlH,YAA8B,CACnCC,SAAUiH,EACNC,IAAe8P,sBACf9P,IAAe+P,YACnBhX,aAAc,cACdC,KAAM4G,EAAY,CAACA,GAAa,S,kCChBpC,yDAKe,SAASoQ,GAA8B,UACpDpQ,EADoD,sBAEpDG,IAKA,OAAOlH,YAA8D,CACnEC,SAAUiH,EACNC,IAAeC,uBACfD,IAAeE,aACnBnH,aAAc,wBACdC,KAAM4G,EAAY,CAACA,GAAa,S,qjBCW7B,SAASqQ,GAA2B,kBACzC1T,EADyC,aAEzCwO,EAFyC,WAGzCmF,IAMA,MAAM9T,EACJG,IAAsBA,EAAkBE,GAAGC,KAC7C,OACE,cAAC,IAAD,CACEmI,MACE,cAAC,IAAD,CACEO,MAAO,4BACPC,IAAK,iHAGT8K,YAAa,IACX/T,EACEG,EAAkBE,GAAG,GACnB,+BACGyT,EACC,+HAKA,iCAIJ,iCACE,cAAC,IAAD,CAAgB5M,SAAUyH,IACzB9E,YAAU1J,GAAoB,OAInC,+BACG2T,EACC,gLAEE,mBAAG/L,MAAO,CAAEC,SAAU,aAMxB,kDASP,SAASgM,GAAkB,SAChCvT,EADgC,YAEhCwT,IAKA,MAAMC,EAAoBC,YAAmB,CAC3CC,YAAW,OAAE3T,QAAF,IAAEA,OAAF,EAAEA,EAAUI,aAEnBwT,EAAW,OAAG5T,QAAH,IAAGA,OAAH,EAAGA,EAAUwC,GAAG,GAEjC,OACE,cAAC,IAAD,CACEwF,MAAO,kBACPsL,YAAa,IACX,cAAC,IAAD,CACEE,YAAaA,EACbK,aAAcC,cAA6B9T,SAF7C,SAIG4T,EAAcH,EAAoB,qBAOtC,SAASM,GAAwB,aACtC1R,EADsC,mBAEtC2R,IAKA,OACE,cAAC,IAAD,CACEhM,MACE,cAAC,IAAD,CACEO,MAAO,yBACPC,IACE,uQAEE,gCAQRhM,MAAQ,GAAE6F,MAAiB2R,IAC3BnC,OACE,cAAC,IAAD,CACE2B,YACEQ,EAAqBC,IAEvBJ,aAAcC,cAA6BI,qBAJ7C,kBAaD,SAASC,GAAsB,aACpCC,EADoC,UAEpCC,IAKA,OACE,cAAC,IAAD,CACErM,MACE,cAAC,IAAD,CACEO,MAAO8L,EAAY,+BAA2B,0BAC9C7L,IAAK,mGAGThM,MAAO,kDAAI4X,MAKV,SAASE,GAAuB,cACrCC,EADqC,UAErCF,IAKA,OACE,cAAC,IAAD,CACErM,MACE,cAAC,IAAD,CACEO,MAAO8L,EAAY,2BAAuB,mBAC1C7L,IACE,kNACE,gCAORhM,MAAO,oDAAI+X,MAKV,SAASC,GAAsB,aACpCC,IAIA,OACE,cAAC,IAAD,CACEzM,MACE,cAAC,IAAD,CACEO,MAAO,uBACPC,IAAKkM,MAGTlY,MAAOmY,YAAmBF,GAC1B5C,OAAO,MAKN,SAAS+C,GAAwB,eACtCC,IAIA,OACE,cAAC,IAAD,CACE7M,MACE,cAAC,IAAD,CACEO,MAAO,yBACPC,IAAKsM,MAGTtY,MAAOuY,YAAqBF,GAC5BhD,OAAO,MAKN,SAASmD,GAAkB,SAAEC,IAClC,OACE,cAAC,IAAD,CACEjN,MACE,cAAC,IAAD,CACEO,MAAO,yBACPC,IACGyM,EAEG,+DADA,6DAKVzY,MAAOyY,EAAW,aAAS,cAK1B,SAASC,GAAsB,aACpC5S,IAIA,OACE,cAAC,IAAD,CACE0F,MACE,cAAC,IAAD,CACEO,MAAO,6BACPC,IACElG,EACI,4CACA,gDAIVgR,YAAa,IACX,eAAC,IAAD,CACEE,YAAalR,EACbuR,aAAcC,cAA6BxR,aAF7C,UAIGA,EAAe,iBAAa,kBAC3B,SAOL,SAAS6S,GAAyB,cACvCpT,IAIA,OACE,cAAC,IAAD,CACEiG,MACE,cAAC,IAAD,CACEO,MAAO,+BACPC,IAAK,6GAGT8K,YAAa,KACX,MAAMrR,EAASD,YAA2BD,GAC1C,OACE,cAAC,IAAD,CACEyR,aACGvR,EAAOmT,iBAA8C,IAA3BnT,EAAOmT,gBAEpCvB,aAAcC,cAA6B7R,OAJ7C,SAME,gCACGA,EAAO3B,KAAM,IACd,qBAAKgH,MAAO,CAAEC,SAAU,UAAxB,SAAqCtF,EAAOjE,kBASnD,SAASqX,GAA4B,OAC1CzR,EAD0C,SAE1C6C,EAF0C,WAG1CC,EAH0C,oBAI1CC,EAJ0C,gBAK1CmD,EAL0C,qBAM1CwL,IASA,MAAM7B,EAAoBC,YAAmB,CAC3CC,YAAW,OAAE2B,QAAF,IAAEA,OAAF,EAAEA,EAAsBlV,WACnCmV,WAAW,IAEP3B,EAAW,OAAG0B,QAAH,IAAGA,OAAH,EAAGA,EAAsB9S,GAAG,GAE7C,OACE,cAAC,IAAD,CACEwF,MACE,cAAC,IAAD,CACEO,MAAO,iBACPC,IACE,wGAEGoL,EAAe,UAASH,IAAsB,UAKvDH,YAAa,IACX,cAAC,IAAD,CACE1P,OAAQA,EACR6C,SAAUA,EACVC,WAAYA,EACZC,oBAAqBA,EACrBmD,gBAAiBA,MAOpB,SAAS0L,GAAwB,OACtC5R,EADsC,mBAEtCoQ,EAFsC,oBAGtCrN,IAMA,OACE,cAAC,IAAD,CACEqB,MACE,cAAC,IAAD,CACEO,MAAO,mCACPC,IAAK,2GAAYwL,MAGrBV,YAAa,IACX,cAAC,IAAD,CACE1P,OAAQA,EACR+C,oBAAqBA,EACrBD,gBAAYrI,Q,kCC/XtB,yDAIe,SAASoX,GAA2B,SACjDxS,EADiD,UAEjDF,IAKA,OAAO/G,YAA+B,CACpCC,SAAUkH,IAAeuS,kCACzBxZ,aAAc,oBACdC,KAAM8G,GAAYF,EAAY,CAACE,EAAUF,GAAa,S,kCCf1D,yDAIe,SAAS4S,GAAgB,UAAE5S,IACxC,OAAO/G,YAA4B,CACjCC,SAAUkH,IAAeyS,aACzB1Z,aAAc,UACdC,KAAM4G,EAAY,CAACA,GAAa,S,uICIrB,SAAS8S,GAAkB,kBACxCnW,EADwC,aAExCwO,EAFwC,YAGxC4H,IAMA,MACEhP,OAAO,OAAEC,IACPjK,qBAAWkK,KAETqH,EAA2B,OAAG3O,QAAH,IAAGA,OAAH,EAAGA,EAAmBE,GACrDC,KAEIkW,EAAuB,OAAGrW,QAAH,IAAGA,OAAH,EAAGA,EAAmBE,GAAG,GAEhDoW,EAAWF,EACf,cAAC,IAAD,CACEtN,IACE6F,EACE,kKAEuB,8BAGrB0H,EACF,+IAKA,2HAMJ9Q,UAAW,UACX2E,UAAW,CAAEvB,WAAY,KAEzB,KAEE4N,EAAQ5H,EACZ,8CACE0H,EACF,+BAEA,qCACE,cAAC,IAAD,CAAgBtP,SAAUyH,IACzB9E,YAAU1J,MAIf,OACE,uBAAM4H,MAAO,CAAEE,MAAOT,EAAOU,KAAK2J,SAAlC,UACG6E,EACAD,O,0QC5CP,MAAME,EAAS,EACbC,cAAa,EACblJ,cAEIkJ,EAAmB,yCAAIlJ,EAAJ,OAChB,mCAAGA,IAGG,SAASmJ,GAAsB,MAC5CjS,EAD4C,OAE5CP,EAF4C,kBAG5ClE,EAH4C,aAI5CwO,EAJ4C,SAK5CmI,EAL4C,eAM5CpP,EAN4C,cAO5CqP,EAP4C,gBAQ5CtI,EAR4C,cAS5CuI,EAT4C,qBAU5CtI,EAV4C,iBAW5CE,IAaE,IAAD,QACD,MACErH,OAAO,OAAEC,EAAF,MAAUyP,IACf1Z,qBAAWkK,MACT,oBAAEL,GAAwB7J,qBAAW+V,MAEpC4D,EAAoBC,GAAyBha,oBAAkB,GAOhEia,EAAYzF,SAAQ,UAAC/M,EAAMpB,iBAAP,QAAoB,KAAO,EAI/C6T,EACHjQ,IAAwBxC,EAAMG,cAAgBqS,GAAc1P,EAEzDoH,GACH3O,GAAqBC,YAASD,GAAmBE,GAAGC,KAGjDgX,EACJ1S,EAAMZ,UAAY2F,MAClB,WAAC/E,EAAMZ,QAAU2F,KAAsBiG,WAAWhL,MAAM,KAAK,UAA7D,eAAiE1F,QAAS,EAEtEqY,EAAST,EAAW,UAAY,UAEtC,OACE,sBACE/O,MAAO,CACLsB,QAAS,OACTmO,QAAS,GACTC,OACE,cACCX,EAAWtP,EAAOkQ,OAAOC,SAAWnQ,EAAOkQ,OAAOE,UACrDC,aAAcZ,EAAMa,IAPxB,UAUE,eAAC,IAAD,CACEzM,UAAU,WACVtD,MAAO,CACLpC,MAAO,OACPsC,MAAOT,EAAOU,KAAK2J,QACnB0F,UAEFQ,QAAUjB,OAA+ChY,EAApC,IAAMqY,GAAsB,GAPnD,UASGvS,EAAMpB,WAAamO,SAAS/M,EAAMpB,WAAa,EAC9C,eAAC,IAAD,CAAKwU,OA3CE,GA2CcjQ,MAAO,CAAEpC,MAAO,QAAUsS,MAAM,SAArD,UACE,eAAC,IAAD,CAAKC,KA1CM,EA0CX,UACE,uBAAOnQ,MAAO,CAAEwP,UAAhB,SACE,wCACO,OAEX,cAAC,IAAD,CAAKW,KA9CK,GA8CV,SACE,qBACEnQ,MAAO,CACLsB,QAAS,OACTC,WAAY,SACZW,eAAgB,iBAJpB,SAOE,sBAAMlC,MAAO,CAAEwP,UAAf,SAA0B3S,EAAMpB,mBAKtC,eAAC,IAAD,CAAKwU,OA9DE,GA8DcjQ,MAAO,CAAEpC,MAAO,QAAUsS,MAAM,SAArD,UACE,eAAC,IAAD,CAAKC,KA7DM,EA6DX,UACE,uBAAOnQ,MAAO,CAAEwP,UAAhB,SACE,qCACO,OAEX,cAAC,IAAD,CAAKW,KAjEK,GAiEV,SACE,sBACEnQ,MAAO,CACLsB,QAAS,OACTC,WAAY,SACZW,eAAgB,iBAJpB,UAOGoN,IAAYzS,EAAMG,YACjB,sBAAMgD,MAAO,CAAEwP,UAAf,SACE,gDAGF,sBAAMxP,MAAO,CAAEwP,OAAQ,WAAvB,SACE,cAAC,IAAD,CAAkB9Y,QAASmG,EAAMG,gBAGpCsS,GACC,cAAC,IAAD,CAAS5O,MAAO,uBAAhB,SACE,cAAC,IAAD,cAQXkJ,SAAQ,UAAC/M,EAAMpB,iBAAP,QAAoB,KAAO,EAClC,eAAC,IAAD,WACE,cAAC,IAAD,CAAK0U,KA/FM,EA+FX,SACE,uBAAOnQ,MAAO,CAAEwP,UAAhB,SACE,iDAGJ,cAAC,IAAD,CAAKW,KAnGK,GAmGV,SACE,sBAAMnQ,MAAO,CAAEwP,OAAQ,WAAvB,SACE,cAAC,IAAD,CAAkB9Y,QAASmG,EAAMG,qBAIrC,KAEJ,eAAC,IAAD,CAAKiT,OA9GI,GA8GYjQ,MAAO,CAAEpC,MAAO,QAAUsS,MAAM,SAArD,UACE,cAAC,IAAD,CAAKC,KA7GQ,EA6Gb,SACE,uBAAOnQ,MAAO,CAAEwP,UAAhB,SACGzI,EACC,sCAEA,sCAIN,cAAC,IAAD,CAAKoJ,KArHO,GAqHZ,SACE,qBACEnQ,MAAO,CACLsB,QAAS,OACT1D,MAAO,OACPsE,eAAgB,gBAChBX,WAAY,UALhB,SAQE,sBACEvB,MAAO,CACLoQ,YAAa,GACbxS,MAAO,IACPyS,SAAU,KAJd,SAOE,eAAC,IAAD,CAAO9M,KAAK,QAAQD,UAAU,aAA9B,WACIyD,GACA,iCACE,cAAC,IAAD,CAAgB5H,SAAUyH,IACzB/L,WACCmB,YAAkB,CAChBC,QAASO,YAA0BK,EAAMZ,SACzCC,OAAQ9D,IACPqF,QAAQ,OAIjB,+BACE,eAACmR,EAAD,CAAQC,YAAa9H,EAArB,UACGwI,EAAmB,IAAM,KACzBxQ,YAAmB3F,IAAUC,KAAKwD,EAAMZ,UAF3C,qBAWXY,EAAMK,YACL,eAAC,IAAD,CAAK+S,OAjKE,GAiKcjQ,MAAO,CAAEpC,MAAO,QAAUsS,MAAM,SAArD,UACE,cAAC,IAAD,CAAKC,KAhKM,EAgKX,SACE,uBAAOnQ,MAAO,CAAEwP,UAAhB,SACE,sCAGJ,eAAC,IAAD,CAAKW,KApKK,GAoKV,mBACSpQ,YAAsC,KAA3B,UAAClD,EAAMK,mBAAP,QAAsB,GAAW,oBAGrD,QAGL6R,EACC,mCACIO,EAOA,cAAC,IAAD,CACEhN,UAAW,CAAEgO,WAAY,OACzBpP,IACE,2LATJ,cAAC,IAAD,CAASR,MAAO,2CAAhB,SACE,cAAC,IAAD,CACEV,MAAO,CAAEE,MAAOT,EAAO8Q,KAAKX,SAAUU,WAAY,aAiB1D,cAAC,IAAD,CAAS5P,MAAO,wCAAhB,SACE,cAAC,IAAD,CACEwE,KAAK,OACL8K,QAASjH,IACM,OAAbkG,QAAa,IAAbA,KAAgBpS,GAChBkM,EAAEyH,mBAEJD,KAAM,cAAC,IAAD,IACNvQ,MAAO,CAAEyQ,OAAQ,QAIrB1B,EAcE,KAbF,cAAC,IAAD,CACE3J,QAAS+J,EACT3I,+BAAkD,eAAlBwI,EAChCtI,gBAAiBA,EACjBH,KAAM,OACNjK,OAAQA,EACRmK,aAAc5J,EACdzE,kBAAmBA,EACnBuO,qBAAsBA,EACtBjB,QAAS,IAAM0J,GAAsB,GACrCxI,aAAcA,EACdC,iBAAkBA,S,kCC7R5B,yDAIe,SAAS6J,GAAyB,UAC/CjV,EAD+C,SAE/CE,EAF+C,mBAG/CgV,IAMA,OAAOjc,YAA+B,CACpCC,SAAUkH,IAAeuS,kCACzBxZ,aAAc,0BACdC,KACE8G,GAAYF,GAAakV,EACrB,CAAChV,EAAUF,EAAWkV,GACtB,S,6MCXH,IAAKC,EAqBL,SAASC,EACdC,GAEA,MAAM,YAAEC,GAAgBvb,qBAAWwb,MAC7B,UAAEvV,EAAF,cAAa6P,GAAkB9V,qBAAW+V,MAExCxT,KAAMkZ,GAAU5F,YAAgB5P,GAIlCyV,EAAwB1F,YAA2B,CACvD7W,SAAUkH,IAAesV,gBACzBvc,aAAc,iBACdC,KACEkc,GAAeE,GAASxV,IAAc6P,EAClC,CACEyF,EACAE,EACAxV,EACA2V,MAAMC,QAAQP,GAAcA,EAAa,CAACA,IAE5C,OAGR,GAAIxF,EAAe,OAAO,EAK1B,OAFEyF,GAAeE,GAASF,EAAYO,gBAAkBL,EAAMK,eAI5DJ,EAAsBnZ,OACtBwZ,ECzDW,SAASC,GAA6B,UACnD/V,IAIA,OAAO/G,YAA8D,CACnEC,SAAUkH,IAAeE,aACzBnH,aAAc,uBACdC,KAAM4G,EAAY,CAACA,GAAa,Q,SDJxBmV,O,6BAAAA,I,mBAAAA,I,2CAAAA,I,uCAAAA,I,+BAAAA,I,+BAAAA,I,iBAAAA,I,+BAAAA,I,eAAAA,I,gBAAAA,I,kBAAAA,I,wBAAAA,I,kCAAAA,I,oCAAAA,I,kCAAAA,I,gDAAAA,I,kCAAAA,I,6BAAAA,M,4BEDL,SAASa,IAGd,MAAM,WAAEC,EAAF,UAAcnc,GAAcC,qBAAWC,MACvC,UAAEgG,GAAcjG,qBAAW+V,KAEjC,MAAO,EAAGoG,OAAOC,KAC2C,IAAD,EAAzD,OAAKF,GAAejW,GAAa,OAAClG,QAAD,IAACA,KAAWkW,WAKtCiG,EACLnc,EAAUkW,WACV,gBACA,CAAChQ,EAAW,CAACkW,EAAK/L,MAClBgM,IARM,OAANA,QAAM,IAANA,GAAA,UAAAA,EAAQC,cAAR,cAAAD,GACOvI,QAAQC,SAAQ,K,8CCdd,SAASwI,IACtB,MACEtS,OAAO,OAAEC,IACPjK,qBAAWkK,KAIf,OACE,sBACEM,MAAO,CACLyP,QAAS,GACTvP,MAAOT,EAAOU,KAAK4R,KACnBrC,OAAS,aAAYjQ,EAAOkQ,OAAOoC,QAJvC,UAOE,oBAAI/R,MAAO,CAAEE,MAAOT,EAAOU,KAAK4R,MAAhC,sBACA,6JAEyD,IACvD,uDAHF,gDAKA,yPAIY,mBAAGC,KAAK,oBAAR,gC,yDCxBH,SAASC,GAAO,MAC7BvR,EAD6B,KAE7BwR,EAF6B,QAG7BC,IAMA,MACE3S,OAAO,OAAEC,IACPjK,qBAAWkK,KACf,OACE,sBACEM,MAAO,CACLyP,QAAS,cACT2C,gBAAiB3S,EAAO4S,WAAWC,GACnCC,SAAU,YAJd,UAOE,cAACC,EAAA,EAAD,CACExS,MAAO,CAAEuS,SAAU,WAAYE,KAAM,GAAIC,IAAK,MAGhD,oBAAI1S,MAAO,CAAEE,MAAOT,EAAOU,KAAK2J,QAAS7J,SAAU,GAAIQ,WAAY,KAAnE,SACGC,IAEH,4BAAIwR,IAEJ,8BAAMC,O,wHCIG,SAASQ,GAAmB,aACzCC,EADyC,cAEzCC,EAFyC,qBAGzCC,EAHyC,iBAIzCC,EAJyC,sBAKzCna,IAOE,IAAD,QACD,MAAM,YAAEmY,GAAgBvb,qBAAWwb,KAE7BvY,EAA+B,IAChCsa,EACHC,OAAQ5Z,IAAUC,KAAK,GACvBqC,cAAetC,IAAUC,KAAK,GAC9B4Z,QAAS7Z,IAAUC,KAAK,GACxB6Z,MAAO9Z,IAAUC,KAAK8Z,KAAKC,OAAOzR,IAAI,KACtC3H,SAAUZ,IAAUC,KAAK,IAGrBnB,EAAuBS,YAC3BC,GAGIgO,EAAe5E,YAAc,OACjC9J,QADiC,IACjCA,OADiC,EACjCA,EAAsBmb,0BAA0Bva,YAG5CV,EAAiB,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAsBE,kBAC1CH,EAAuBE,QAC3BC,IAAsBA,EAAkBkb,IAAI/a,MAGxCG,EAAWD,EAAaC,SACxB4T,EAAW,OAAG5T,QAAH,IAAGA,OAAH,EAAGA,EAAUwC,GAAG,GAE3B4R,EAAY,UAChByG,YACEC,YACEC,YAAc,OACZhb,QADY,IACZA,OADY,EACZA,EAAcib,OADF,OAEZZ,QAFY,IAEZA,OAFY,EAEZA,EAAsB/X,aAAajC,WACnC6a,qBAAW,KACX,kBAPU,QAUX,IAEDjH,EAAqB7R,WACzB+Y,YAAkB,OAACd,QAAD,IAACA,OAAD,EAACA,EAAsB/X,eAMrC8Y,EAAoBvH,GAAerU,EAAuB,EAAI,GAE9D8C,EAAY,UAChBwY,YACEC,YAAkB,UAChBC,YAAc,OACZhb,QADY,IACZA,OADY,EACZA,EAAcib,OADF,OAEZZ,QAFY,IAEZA,OAFY,EAEZA,EAAsB/X,aAAajC,WACnC6a,qBAAW,KACX,mBALc,QAMX,YARO,QAUX,IAEP,OACE,sBAAK3T,MAAO,CAAEyP,QAAS,SAAvB,UACE,eAAC,IAAD,CAAKQ,OAnBM,GAmBUjQ,MAAO,CAAEmC,aAlBhB,IAkBd,UACE,cAAC,IAAD,CAAK4N,GAAI,GAAI+D,GAAI,GAAjB,SACE,cAAC,IAAD,CAAmBpb,SAAUD,EAAaC,aAE5C,cAAC,IAAD,CAAKqX,GAAI,GAAI+D,GAAI,GAAjB,SACE,cAAC,IAAD,CACE1b,kBAAmBA,EACnBwO,aAAY,OAAEA,QAAF,IAAEA,IAAgB,aAIpC,eAAC,IAAD,CAAKqJ,OA9BM,GA8BUjQ,MAAO,CAAEmC,aA7BhB,IA6Bd,UACE,cAAC,IAAD,CAAK4N,GAAI,GAAI+D,GAAI,GAAjB,SACE,cAAC,IAAD,CACE7G,cAAa,UACXsG,YACEC,YAAkB,OAAC/a,QAAD,IAACA,OAAD,EAACA,EAAcib,OAAO7L,oBAF/B,QAGN,QAIX,cAAC,IAAD,CAAKkI,GAAI,GAAI+D,GAAI,GAAjB,SACE,cAAC,IAAD,CAAuBhH,aAAcA,SAGzC,eAAC,IAAD,CAAKmD,OA5CM,GA4CUjQ,MAAO,CAAEmC,aA3ChB,IA2Cd,UACE,cAAC,IAAD,CAAK4N,GAAI8D,EAAmBC,GAAI,GAAhC,SACE,cAAC,IAAD,CACE/Y,aAAcA,EACd2R,mBAAoBA,MAGvBJ,EACC,cAAC,IAAD,CAAKyD,GAAI8D,EAAmBC,GAAI,GAAhC,SACE,cAAC,IAAD,CAAuB3G,aAAc1U,EAAa0U,iBAElD,KACHlV,EACC,cAAC,IAAD,CAAK8X,GAAI8D,EAAmBC,GAAI,GAAhC,SACE,cAAC,IAAD,CACEvG,eAAgBuF,EAAqBvF,mBAGvC,QAEN,eAAC,IAAD,CAAK0C,OAhEM,GAgEUjQ,MAAO,CAAEmC,aA/DhB,IA+Dd,UACE,cAAC,IAAD,CAAK4N,GAAI,GAAI+D,GAAI,GAAjB,SACE,cAAC,IAAD,CAAmBnG,SAAUmF,EAAqBnF,aAEpD,cAAC,IAAD,CAAKoC,GAAI,GAAI+D,GAAI,GAAjB,SACE,cAAC,IAAD,CACE9Y,aAAc8X,EAAqB9X,oBAIzC,cAAC,IAAD,CAAKiV,OA1EM,GA0EUjQ,MAAO,CAAEmC,aAzEhB,IAyEd,SACGmK,EACC,cAAC,IAAD,CAAK6D,KAAM,GAAX,SACE,cAAC,IAAD,CAA0B1V,cAAehC,EAAakC,WAEtD,SAGL,OAACvC,QAAD,IAACA,KAAmBE,GAAG,KACtB,cAAC,IAAD,CACEgE,OAAQsW,EACRzT,SAAQ,OAAEjH,QAAF,IAAEA,OAAF,EAAEA,EAAsBmb,0BAChCjU,WAAYhH,EACZiH,oBAAqB0R,EACrBvO,gBAAiBvK,EACjB+V,qBAAsBtV,KAGL,OAApBoa,QAAoB,IAApBA,OAAA,EAAAA,EAAsB/X,aAAaG,GAAG,KACrC,cAAC,IAAD,CACEoB,OAAQuW,EACRnG,mBAAoBA,EACpBrN,oBAAqB0R,O,+BC7JxB,SAASgD,IAA8B,IAAD,QAC3C,MAAM,UAAEtY,GAAcjG,qBAAW+V,MAC3B,UAAEhW,GAAcC,qBAAWC,MAC1Bue,EAAaC,GAAkB7e,mBAAoBgE,IAAUC,KAAK,KAClE6a,EAAUC,GAAe/e,mBAAiB,MAE1Cgf,EAAWC,GAAgBjf,oBAAkB,IAC7Ckf,EAAoBC,GAAyBnf,oBAAkB,IAEhE,KAAE2C,EAAM1C,QAASmf,GACrB3I,YAA8B,CAC5BpQ,YACAG,uBAAuB,KAEpB6Y,EAAwBC,GAAzB,OAA2D3c,QAA3D,IAA2DA,IAAQ,IAEjEA,KAAM4c,EAAwBtf,QAASuf,GAC7C3W,YAAiB,CACfxC,YACAyC,WAAY2W,IACZ1W,OAAM,OAAEsW,QAAF,IAAEA,GAAF,UAAEA,EAAwB/Y,qBAA1B,aAAE,EAAuCmM,WAC/CjM,uBAAuB,KAEnB7D,KAAM+c,EAAuBzf,QAAS0f,GAC5C9W,YAAiB,CACfxC,YACAyC,WAAY8W,IACZ7W,OAAM,OAAEsW,QAAF,IAAEA,GAAF,UAAEA,EAAwB/Y,qBAA1B,aAAE,EAAuCmM,WAC/CjM,uBAAuB,IAG3BqK,qBAAU,KAAO,IAAD,EACdgO,EAAc,iBAACQ,QAAD,IAACA,OAAD,EAACA,EAAwB/b,gBAAzB,QAAqCU,IAAUC,KAAK,MACjE,CAACob,IAEJ,MAAQ1c,KAAMkd,GAAcvJ,YAAoB,CAC9CjQ,YACAG,uBAAuB,IAEnBsZ,EAAe,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAY,IAE5Bld,KAAMod,EAAuB9f,QAAS+f,GAC5C5Z,YAA4B,CAC1BC,YACAC,cAAa,OAAE+Y,QAAF,IAAEA,GAAF,UAAEA,EAAwB/Y,qBAA1B,aAAE,EAAuCmM,WACtDlM,SAAUuZ,EACVtZ,uBAAuB,KAGpByZ,EAA6BC,GAA9B,OACJH,QADI,IACJA,IAAyB,GAErBI,EAAyD,CAC7D5Z,SAAQ,iBAAEpG,QAAF,IAAEA,OAAF,EAAEA,EAAW4Q,qBAAqBzP,eAAlC,QAA6C,GACrD8e,MAAOja,IACPnD,kBAAmBid,EACnBhC,0BAA2BiC,EAC3BG,kBAAmBrc,IAAUC,KAAK,GAClCqc,0BAA2Btc,IAAUC,KAAK,IAGtCsc,EC7ED,WAQL,MAAM,WAAEjE,EAAF,UAAcnc,GAAcC,qBAAWC,MACvC,YAAEsb,GAAgBvb,qBAAWwb,KAEnC,MAAO,EAEHvV,YACAsX,mBACAD,uBACAla,wBACAgd,gBAAgB,GAChBC,qBArBiC,KAuBnCjE,KAEA,IACGF,IACAX,GACD,OAACxb,QAAD,IAACA,MAAWwG,cACZ,OAACxG,QAAD,IAACA,MAAW4Q,qBAEZ,OAAOkD,QAAQC,SAAQ,GAGzB,MAAMzU,EAAO,CACX4G,EACAsX,EACAD,EACA+C,EACAD,EACAhd,EACA,CAACrD,EAAU4Q,qBAAqBzP,SAxCjB,IA4CjB,OAAOgb,EACLnc,EAAUwG,aACV,yBACAlH,EACA+c,ID+ByBkE,GAEvBC,EAAY/O,mBAAQ,KACxB,GAAKyN,EAEL,OAAQA,EAAuB9Z,SACxBqb,IAA4BC,UAAUC,IAAYld,MAC9Cmd,IAAiBF,UAAUC,IAAYld,MAIvCyb,EAAuB9Z,SAEjC,CAAC8Z,IAEEpf,EACJuf,GACAJ,GACAO,GACAK,EAEF,IACG3Z,IACAgZ,IACAC,EAED,OAAO,KA6CT,OACE,qCACE,cAACzC,EAAD,CACEvR,MAAO,kDACPwR,KACE,2IAKFC,QACE,mCACE,cAAC,IAAD,CAAQjN,KAAK,UAAU8K,QAAS,IAAMqE,GAAa,GAAnD,SACE,gEAKR,cAAC+B,EAAA,EAAD,CACEhR,QAASgP,EACT1T,MAAO,+CACP6E,OACE,+BACE,iDAGJ3H,MAAO,IACPyH,KArEkBnP,UACtB,MAAM6c,EAAuC,CAC3Cra,SAAQ,OAAEsb,QAAF,IAAEA,IAAeS,EAAuB/b,SAChDiC,OAAM,OAAEob,QAAF,IAAEA,IAAatB,EAAuB9Z,OAC5C+Y,OAAQe,EAAuBf,OAC/BvG,aAAcsH,EAAuBtH,cAGjC2F,EACJ4B,QAEIiB,EACJ,CACEla,YACAsX,mBACAD,uBACAla,sBAAuB,CAAC2c,GACxBK,cAAe,CACb,CACES,MAAOxB,IACPvY,OAAM,OAAEqY,QAAF,IAAEA,IAA0B,IAEpC,CACE0B,MAAOrB,IACP1Y,OAAM,OAAEwY,QAAF,IAAEA,IAAyB,KAGrCe,mBAAoB3B,GAEtB,CACErC,SACEvb,QAAQC,KAAK,kDACbge,GAAsB,IAExB+B,cACE/B,GAAsB,GACtBxW,OAAOwY,SAASC,aAkClBlR,SAAU,IAAM+O,GAAa,GAC7BC,mBAAoBA,EAXtB,SAaGjf,EACC,aAEA,qCACE,mBAAG2K,MAAO,CAAEmC,aAAc,QAA1B,SACE,0FAIF,cAAC,IAAD,CAAMkB,OAAO,WAAWrD,MAAO,CAAEmC,aAAc,QAA/C,SACE,sBAAKnC,MAAO,CAAEsB,QAAS,OAAQmV,IAAK,IAApC,UACE,cAAC,IAAKzR,KAAN,CACE/D,MAAO,6CACP0C,UAAQ,EACR3D,MAAO,CAAEpC,MAAO,QAChByG,MACE2P,EAAYlb,WAAa,EACpB,KAAIkb,EAAYlb,WAAa,aAC9B,GAPR,SAUE,cAAC,IAAD,CACEoM,KAAK,SACLpH,IAAK,EACL5I,MAAO8e,EAAYlb,WACnB8K,SAAUmF,IACRkL,EAAe7a,IAAUC,KAAK0P,EAAElI,OAAO3L,OAAS,SAKtD,cAAC,IAAK8P,KAAN,CACE/D,MAAO,0DACPjB,MAAO,CAAEpC,MAAO,QAChByG,MAAO,4DAHT,SAKE,cAAC,IAAD,CACEa,KAAK,SACLpH,IAAK,EACL8F,SAAUmF,IACRoL,EAAYpL,EAAElI,OAAO3L,OAAS,eAOxC,6BACE,kDAEF,4BACE,mLAOF,cAACyd,EAAD,CACEC,aAAY,OAAE+B,QAAF,IAAEA,IAA0B,GACxC9B,cAAa,OAAEiC,QAAF,IAAEA,IAAyB,GACxChC,qBAAsB4B,EACtB3B,iBAAkB,IACb0B,EACH/b,SAAQ,OAAEsb,QAAF,IAAEA,IAAeS,EAAuB/b,SAChDiC,OAAM,OAAEob,QAAF,IAAEA,IAAatB,EAAuB9Z,QAE9C/B,sBAAuB,CAAC2c,a,gCEvP/B,SAASmB,KACd,MAAM,WAAEhF,EAAF,UAAcnc,GAAcC,qBAAWC,MACvC,YAAEsb,GAAgBvb,qBAAWwb,MAC7B,UAAEvV,GAAcjG,qBAAW+V,KAG3BoL,EAAmB,CAAC,GAE1B,MAAO,EAEHC,2BACAC,aACAC,sBACA7Z,iBAEF2U,KAEoE,IAAD,EAAnE,OAAKF,GAAejW,GAAa,OAAClG,QAAD,IAACA,KAAW4Q,qBAKtCuL,EAAU,OACfnc,QADe,IACfA,OADe,EACfA,EAAWwhB,+BACX,qBACA,CACEtb,EADF,OAEEmb,QAFF,IAEEA,IAA4Bjd,KAC5BsD,EAHF,OAIE4Z,QAJF,IAIEA,IAxBe,GAyBfF,GACCG,EACDvhB,EAAUqW,YAAYlV,QACtBqa,GAEF,IACKa,KAlBC,OAANA,QAAM,IAANA,GAAA,UAAAA,EAAQC,cAAR,cAAAD,GACOvI,QAAQC,SAAQ,KC5BtB,SAAS0N,KAId,MAAM,WAAEtF,EAAF,UAAcnc,GAAcC,qBAAWC,MACvC,UAAEgG,GAAcjG,qBAAW+V,KAEjC,MAAO,EAAGvS,OAAMie,UAAUrF,KACoC,IAAD,EAA3D,OAAKF,GAAejW,GAAa,OAAClG,QAAD,IAACA,KAAW+Y,aAKtCoD,EACLnc,EAAUwG,aACV,gBACA,CAACN,EAAWzC,EAAMie,GAClBrF,IARM,OAANA,QAAM,IAANA,GAAA,UAAAA,EAAQC,cAAR,cAAAD,GACOvI,QAAQC,SAAQ,K,2HCEtB,SAAS4N,IAAiC,QAC/C9R,EAD+C,SAE/CrC,IAIE,IAAD,EACD,MAAM,OAAEgB,EAAF,UAAUtI,GAAcjG,qBAAW+V,MAClC4L,GAAerQ,sBAEfsQ,EAAsBC,GAA2BjiB,sBACjDkiB,EAAmBC,GAAwBniB,sBAC3CoiB,EAAsBC,GAA2BriB,qBAElDsiB,ECxBD,SAAuCC,GAC5C,MAAMC,EAAOD,EACTE,mBAASF,GAAWA,EAAQG,SAAS,QAAU,GAAK,cACpD/gB,EAEJ,OAAOrC,YAA4B,CACjCC,SAAUkH,IAAekc,eACzBnjB,aAAc,OACdC,KAAM+iB,EAAO,CAACA,EAAM/R,MAAiC,KACrD9Q,UAAWY,uBAAaC,IACtB,IACE,OAAOgU,SAAShU,GAChB,MAAOmT,GACPzS,QAAQC,KAAK,4CAA6CwS,GAI5D,OAAO,IACN,IACHjU,SAAUkS,mBACR,IAAM,CACJ,CACErS,SAAUkH,IAAekc,eACzBxgB,UAAW,cACXG,OAAQ,CAAC,GAAImO,SAGjB,MDHoBmS,CACtBjU,EAASA,EAAS,YAAShN,IAGrBgB,KAAMkgB,GE5BD,UAA2B,UACxCxc,IAIA,OAAO/G,YAA4B,CACjCC,SAAUkH,IAAeqc,iBACzBtjB,aAAc,iBACdC,KAAM4G,EAAY,CAACA,GAAa,KAChC1G,UAAWY,uBACRC,GAAmBA,EAAMA,EAAIuiB,KAAK,UAAOphB,GAC1C,IAEFjC,SAAUkS,mBACR,IACEvL,EACI,CACE,CACE9G,SAAUkH,IAAeqc,iBACzB3gB,UAAW,kBACXG,OAAQ,CAAC0B,IAAUC,KAAKoC,GAAW/B,sBAGvC3C,GACN,CAAC0E,MFI4B2c,CAAkB,CAAE3c,eAE/C,OAAEgE,GAAWjK,qBAAWkK,KAAcF,MAEtC6Y,EGlCD,WAGL,MAAM,WAAE3G,EAAF,UAAcnc,GAAcC,qBAAWC,MACvC,UAAEgG,GAAcjG,qBAAW+V,KAEjC,MAAO,EAAGoM,WAAW/F,KACuC,IAAD,EAAzD,IAAKF,IAAejW,GAAa,OAAClG,QAAD,IAACA,MAAWkW,WAE3C,OADM,OAANmG,QAAM,IAANA,GAAA,UAAAA,EAAQC,cAAR,cAAAD,GACOvI,QAAQC,SAAQ,GAGzB,MAAMgP,EAAeX,EAAQ9a,MAAM,KAAK0b,UAExC,OAAO7G,EACLnc,EAAU2iB,iBACV,qBACA,CAACzc,EAAW6c,GACZ1G,IHgB0B4G,GACxBC,EIhCD,WAGL,MAAM,WAAE/G,EAAF,UAAcnc,GAAcC,qBAAWC,MACvC,UAAEgG,GAAcjG,qBAAW+V,KAEjC,MAAO,EAAGoM,WAAW/F,KACuC,IAAD,EAAzD,IAAKF,IAAejW,GAAa,OAAClG,QAAD,IAACA,MAAWkW,WAE3C,OADM,OAANmG,QAAM,IAANA,GAAA,UAAAA,EAAQC,cAAR,cAAAD,GACOvI,QAAQC,SAAQ,GAGzB,MAAMsO,EAAOC,mBAASF,GAAWA,EAAQG,SAAS,QAAU,GAAK,SAEjE,OAAOpG,EACLnc,EAAUwiB,eACV,UACA,CAACH,EAAM/R,KAA+BpK,EAAUoM,YAChD+J,IJcgC8G,GAEpCzS,qBAAU,KACR,OAAIgS,QAAJ,IAAIA,KAAgB9gB,QAAQkgB,GAAwB,KACnD,CAACY,IA2BJ,MAAMU,EAAkBhjB,uBAAY,KAClCwhB,EAAYrT,eAAe,CACzB6T,QAAO,OAAEM,QAAF,IAAEA,IAAkB,OAE5B,CAACd,EAAac,IAMjB,OAJAhS,qBAAU,KACR0S,MACC,CAACA,IAGF,eAAC,KAAD,CAAQvT,QAASA,KAAa1H,KAAagI,QAAS3C,EAApD,UACE,6BACGgB,EACC,gDAEA,+CAIHA,GACC,sBAAK/D,MAAO,CAAES,WAAY,OAAQR,SAAU,UAA5C,cAA0D8D,KAG5D,4BACE,kQAOsBnD,YAAe,CAAEmD,OAAQ,WAP/C,EAWsBnD,YAAe,CAAEnF,eAXvC,cAEE,uBAFF,EAGE,uBAHF,EAKE,uBALF,EAOE,sBAPF,EAQE,uBARF,EASE,uBATF,EAWE,2BAKJ,cAAC,KAAD,IAEA,mBAAGuE,MAAO,CAAEE,MAAOT,EAAOU,KAAK2J,SAA/B,SACE,mIAEE,mBACEkI,KAAK,uBACLnR,OAAO,SACP+X,IAAI,6BAQV,uBAEA,6BACE,4CAGF,mBAAG5Y,MAAO,CAAEE,MAAOT,EAAOU,KAAK2J,SAA/B,SACE,sQAIE,uBAJF,EAKE,uBALF,EAOE,4BAKHsN,EACC,gCACE,+CADF,IAC8Ba,EAD9B,OAEE,uBACA,uBACA,cAAC,IAAD,CAAQjI,QAAS,IAAMqH,GAAwB,GAAQnS,KAAK,UAA5D,SACE,+CAIJ,eAAC,KAAD,CAAMpC,KAAMqU,EAAapU,SA/G/B,WACEwU,GAAqB,GAErB,MAAMI,EAAUR,EAAYjT,cAAc,WAE1CmU,EACE,CAAEV,WACF,CACE9F,OAAQ,IAAM0F,GAAqB,MAuGnC,UACE,cAAC,KAAUsB,QAAX,CAAmB7f,KAAK,UAAU8f,WAAS,IAC3C,cAAC,IAAD,CAAQ7T,SAAS,SAAS5P,QAASiiB,EAAmBpS,KAAK,UAA3D,SACE,4CAKN,cAAC,KAAD,IAEA,6BACE,+CAGF,mBAAGlF,MAAO,CAAEE,MAAOT,EAAOU,KAAK2J,SAA/B,SACE,sRAEG/F,EAAS,mCAASA,EAAT,UAAgC,gBAF5C,UAIYtI,GAJZ,cAGM,2BAHN,EAIE,2BAJF,EAME,mBACEuW,KACEiG,EACK,gCAA+BA,YAChC,0BAENpX,OAAO,SACP+X,IAAI,6BASTnd,GAAaic,EAAgB3f,OAAS0D,EACrC,eAAC,IAAD,CAAQyJ,KAAK,UAAU0K,UAAQ,EAA/B,UACE,cAACmJ,GAAA,EAAD,IADF,IACwB,gDAGxB,cAAC,IAAD,CACE1jB,QAASmiB,EACTtS,KAAK,UACL0K,UAAWqI,EACXjI,QAhJR,WACEyH,GAAwB,GAExBgB,EACE,CAAEd,QAAO,OAAEM,QAAF,IAAEA,IAAkB,IAC7B,CACEpG,OAAQ,IAAM4F,GAAwB,MAsItC,SAME,oEACuBQ,EAAiB,cADxC,QACkD,iBAKpDA,GACA,mBAAGjY,MAAO,CAAEE,MAAOT,EAAOU,KAAKC,WAA/B,kEKrMO,SAAS4Y,IAAe,QACrC5T,EADqC,QAErCM,IAKA,MAAM,OAAE3B,GAAWvO,qBAAW+V,MAE5B/L,OAAO,OAAEC,IACPjK,qBAAWkK,MAERuZ,EAAwBC,GAC7B9jB,oBAAkB,IACb+jB,EAAgCC,GACrChkB,oBAAkB,IACbikB,EAAoBC,GAAyBlkB,oBAAkB,IAE/DmkB,EAAgBC,GAAqBpkB,sBACrCqkB,EAA2BC,GAChCtkB,qBAEIukB,EAAoBJ,GAAkBE,EAEtCG,EAAYna,EAAOU,KAAK0P,SAExBgK,EAAiC,CACrC1X,aAAc,IAGhB,OACE,eAAC,KAAD,CACEiD,QAASA,EACTC,KAAMK,EACNJ,SAAUI,EACVoU,cAAe,CAAEC,QAASJ,GAC1BK,kBAAmB,CAAED,OAAQJ,GAC7BpU,OAAQ,eACR0U,WAAY,qCAPd,UASE,6BACE,sDAEF,4BACE,qIAKF,gCACE,cAACC,GAAA,EAAD,CACEC,OAAO,IACPC,QAAS,0DACTC,YACE,sJAKFrK,QAAS,IAAMsJ,GAAsB,GACrC1J,WAAY7L,EACZwM,KACExM,EACE,cAACgV,GAAA,EAAD,CAAmB/Y,MAAO,CAAEE,MAAO0Z,UACjC7iB,EAENujB,aAAcvW,EAAS6V,OAAY7iB,EACnCiJ,MAAO6Z,IAET,cAACK,GAAA,EAAD,CACEC,OAAO,IACPC,QAAS,2DACTC,YACE,8JAKFrK,QAAS,IAAMkJ,GAA0B,GACzCtJ,SAAU2J,EACVhJ,KACEgJ,EACE,cAACR,GAAA,EAAD,CAAmB/Y,MAAO,CAAEE,MAAO0Z,UACjC7iB,EAENujB,aAAcf,EAAiBK,OAAY7iB,EAC3CiJ,MAAO6Z,IAET,cAACK,GAAA,EAAD,CACEC,OAAO,IACPC,QAAS,8DACTC,YACE,mJAKFrK,QAAS,IAAMoJ,GAAkC,GACjDxJ,SAAU6J,EACVlJ,KACEkJ,EACE,cAACV,GAAA,EAAD,CAAmB/Y,MAAO,CAAEE,MAAO0Z,UACjC7iB,EAENujB,aAAcb,EAA4BG,OAAY7iB,EACtDiJ,MAAO6Z,OAGX,cAAC3C,GAAD,CACE9R,QAASiU,EACTtW,SAAU,IAAMuW,GAAsB,KAExC,cAACiB,GAAA,EAAD,CACEnV,QAAS6T,EACTjC,iBAAkBA,GAClBtR,QAAS,IAAMwT,GAA0B,GACzC5C,YAAa,IAAMkD,GAAkB,KAEvC,cAACgB,GAAA,EAAD,CACEpV,QAAS+T,EACTzT,QAAS,IAAM0T,GAAkC,GACjD1C,wBAAyBA,GACzBJ,YAAa,IAAMoD,GAA6B,Q,8IC7HzC,SAASe,IAAwB,QAC9CrV,EAD8C,SAE9CE,IAKA,MAAOoV,EAAmBC,GAAwBvlB,sBAC3CwlB,EAAaC,GAAkBzlB,sBAC/BC,EAASC,GAAcF,sBACxB,UAAEqG,GAAcjG,qBAAW+V,KAEjCtF,qBAAU,KACR6U,KAAaC,iBAAiBC,MAAKplB,IACjC+kB,EAAqB/kB,GACrBilB,EAAejlB,QAEhB,IAEH,MAAMqlB,EAAWtlB,uBAAYO,UAC3B,QAAoBa,IAAhB6jB,IAA8Bnf,EAAW,OAE7CnG,GAAW,GAEX,MAAM4lB,EAAO,CACX,CAAC,sBAAgB,eAAS,gBAAU,sBAAgB,iBAGtD,IACE,MAAMC,QAAiBC,aAAwB,CAC7CC,OAAQ,WACRC,KAAM,CAAC,SAAU,cAAe,SAAU,YAAa,QACvDC,QAAS,YACTC,eAAgB,OAChBC,MAAO,CACLzI,OAAQ4H,GAEVc,MAAO,CACL,CACE1S,IAAK,YACL9T,MAAOuG,GAET,CACEuN,IAAK,KACL9T,MAAO,QAKb,IAAKimB,EAEH,MADAQ,aAAsB,kCAChB,IAAIC,MAAM,YAGlBT,EAAS/jB,SAAQkD,IAAM,IAAD,EACpB,IAAIuhB,EAAO,IAAI1I,KAA0B,KAArB,UAAC7Y,EAAEwhB,iBAAH,QAAgB,IAAWC,cAE3CF,EAAKG,SAAS,OAAMH,EAAOA,EAAKhf,MAAM,KAAK,IAE/Cqe,EAAKtjB,KAAK,CAACkD,YAAQR,EAAE4B,QAAS2f,EAAMvhB,EAAE2hB,OAAQ3hB,EAAE0C,YAAa1C,EAAE4hB,UAGjE,MAAMC,EACJ,+BAAiCjB,EAAK5c,KAAIyK,GAAKA,EAAEoP,KAAK,OAAMA,KAAK,MAC7DiE,EAAaC,UAAUF,GACvBG,EAAOC,SAASC,cAAc,KACpCF,EAAKG,aAAa,OAAQL,GAC1BE,EAAKG,aACH,WACC,WAAUhhB,mBAA2Bmf,SAExC2B,SAASrK,KAAKwK,YAAYJ,GAE1BA,EAAKK,QAELrnB,GAAW,GACX,MAAOyT,GACPzS,QAAQM,MAAM,6BAA8BmS,GAC5CzT,GAAW,MAEZ,CAACmG,EAAWnG,EAAYslB,IAE3B,OACE,cAAC,KAAD,CACExV,QAASA,EACTE,SAAUA,EACVD,KAAM4V,EACN1V,OAAQ,uBACRuU,cAAe,CAAE5U,KAAM,WACvB+U,WAAY,gBACZ2C,eAAgBvnB,EAChBwnB,UAAQ,EARV,SAUE,gCACE,6BACE,qDAGF,uBAAO7c,MAAO,CAAEsB,QAAS,QAASwb,UAAW,GAAI3a,aAAc,GAA/D,SACE,yCAEF,cAAC4a,GAAA,EAAD,CACE7nB,MAAK,OAAE0lB,QAAF,IAAEA,OAAF,EAAEA,EAAa/S,WACpBjE,SAAUhO,GAAOilB,EAAejlB,EAAMgU,SAAShU,QAAOmB,GACtDkT,UACE,cAAC+S,GAAA,EAAD,CACE9S,QAAS,iBACT8F,QAAS,IAAM6K,EAAeH,GAC9B9K,SAAUgL,IAAgBF,WCnHzB,SAASuC,IAAwB,QAC9C7X,EAD8C,SAE9CE,IAKA,MAAO4X,EAAsBC,GAA2B/nB,qBAExD,OACE,eAAC,KAAD,CACEgQ,QAASA,EACTE,SAAUA,EACV2U,WAAY,gBACZH,cAAe,CAAEC,QAAQ,GACzB8C,UAAQ,EALV,UAOE,gCACE,6BACE,6DAGF,qBAAK7c,MAAO,CAAE8c,UAAW,IAAzB,SACE,cAAC,IAAD,CAAQrB,OAAK,EAACzL,QAAS,IAAMmN,GAAwB,GAArD,2BAMJ,cAAC1C,GAAD,CACErV,QAAS8X,EACT5X,SAAU,IAAM6X,GAAwB,Q,kDCvBjC,SAASC,IAAsB,MAC5CC,IAeE,IAAD,EACD,MACE7d,OAAO,OAAEC,IACPjK,qBAAWkK,MAEP3H,KAAMulB,GAA4BC,aAAiB,CACzDlC,OAAQ,+BACRC,KAAM,CACJ,KACA,YACA,SACA,SACA,cACA,kBAEFE,eAAgB,OAChBD,QAAS,SACTG,MAAY,OAAL2B,QAAK,IAALA,KAAOG,GACV,CACExU,IAAK,yBACL9T,MAAOmoB,EAAMG,SAEfzmB,IAGN,OAAKsmB,EAGH,gCACE,sBACErd,MAAO,CACLsB,QAAS,OACTY,eAAgB,iBAHpB,UAME,qBAAKlC,MAAOyd,aAAiBhe,GAA7B,SACE,8CAGF,sBACEO,MAAO,CACL0d,UAAW,SAFf,UAKE,sBAAK1d,MAAOyd,aAAiBhe,GAA7B,UACG4d,EAAMvB,WACL,+BAAO6B,aAAuC,IAAlBN,EAAMvB,aACjC,IACH,cAAC8B,GAAA,EAAD,CAAe1oB,MAAOmoB,EAAMQ,OAAQ3Y,KAAK,UAE3C,qBAAKlF,MAAOyd,aAAiBhe,GAA7B,SACE,qDACY,cAAC0B,GAAA,EAAD,CAAkBzK,QAAS2mB,EAAMpB,oBAMnD,sBAAKjc,MAAO,CAAE8c,UAAW,GAAzB,iBACGQ,QADH,IACGA,OADH,EACGA,EAAyBhf,KAAIyK,GAC5B,sBAEE/I,MAAO,CACLsB,QAAS,OACTY,eAAgB,gBAChBX,WAAY,WACZtB,SAAU,UANd,UASE,sBAAKD,MAAO,CAAES,WAAY,KAA1B,UACGsI,EAAE+U,eACD,4CAAe/U,EAAE+U,kBAEjB,cAAC3c,GAAA,EAAD,CAAkBzK,QAASqS,EAAE/L,cAJjC,OASA,sBAAKgD,MAAO,CAAEE,MAAOT,EAAOU,KAAKC,WAAjC,UACE,cAAC2B,GAAA,EAAD,CAAgB5C,SAAS,QACxB2C,YAAUiH,EAAE7M,OAAQ,CAAE6hB,UAAW,SAnB/BhV,EAAEyU,OAwBV,UAAAH,EAAMW,qCAAN,eAAqC9iB,GAAG,KACvC,sBACE8E,MAAO,CACLsB,QAAS,OACTY,eAAgB,gBAChBX,WAAY,WACZtB,SAAiC,OAAvBqd,QAAuB,IAAvBA,KAAyBnmB,OAAS,cAAWJ,GAL3D,UAQE,sBAAKiJ,MAAO,CAAES,WAAY,KAA1B,UACE,cAACU,GAAA,EAAD,CAAkBzK,QAAS2mB,EAAMrgB,cADnC,OAGA,sBACEgD,MACyB,OAAvBsd,QAAuB,IAAvBA,KAAyBnmB,OACrB,CAAE+I,MAAOT,EAAOU,KAAKC,WACrB,CAAEK,WAAY,KAJtB,UAOE,cAACsB,GAAA,EAAD,CAAgB5C,SAAS,QACxB2C,YAAUub,EAAMW,8BAA+B,CAAED,UAAW,aAM7C,OAAvBT,QAAuB,IAAvBA,KAAyBnmB,OACxB,sBACE6I,MAAO,CACLE,MAAOT,EAAOU,KAAK2J,QACnBrJ,WAAY,IACZid,UAAW,SAJf,UAOE,cAAC3b,GAAA,EAAD,CAAgB5C,SAAS,QACxB2C,YAAUub,EAAMY,kBAAmB,CAAEF,UAAW,OAEjD,QAjGW,K,sBC1CN,SAASG,IAAkC,MACxDb,IAcE,IAAD,EACD,MACE7d,OAAO,OAAEC,IACPjK,qBAAWkK,MACT,YAAEye,GAAgB3oB,qBAAW4oB,OAE3BrmB,KAAMsmB,GAAqBd,aACjC,CACElC,OAAQ,sCACRC,KAAM,CACJ,KACA,YACA,SACA,cACA,aACA,aAEFE,eAAgB,OAChBD,QAAS,aACTG,MAAY,OAAL2B,QAAK,IAALA,KAAOG,GACV,CACExU,IAAK,gCACL9T,MAAOmoB,EAAMG,SAEfzmB,GAEN,IAGF,OAAKsmB,EAGH,gCACE,sBACErd,MAAO,CACLsB,QAAS,OACTY,eAAgB,iBAHpB,UAME,qBAAKlC,MAAOyd,aAAiBhe,GAA7B,SACE,2DAEG6e,aAAgB,CACfH,YAAaA,EACbI,YAAY,EACZC,QAAQ,SAKd,sBAAKxe,MAAO,CAAE0d,UAAW,SAAzB,UACE,sBAAK1d,MAAOyd,aAAiBhe,GAA7B,UACG4d,EAAMvB,WACL,+BAAO6B,aAAuC,IAAlBN,EAAMvB,aACjC,IACH,cAAC8B,GAAA,EAAD,CAAe1oB,MAAOmoB,EAAMQ,OAAQ3Y,KAAK,UAE3C,qBAAKlF,MAAOyd,aAAiBhe,GAA7B,SACE,qDACY,cAAC0B,GAAA,EAAD,CAAkBzK,QAAS2mB,EAAMpB,oBAMnD,sBAAKjc,MAAO,CAAE8c,UAAW,GAAzB,iBACGuB,QADH,IACGA,OADH,EACGA,EAAkB/f,KAAIyK,GACrB,sBAEE/I,MAAO,CACLsB,QAAS,OACTY,eAAgB,gBAChBX,WAAY,YALhB,UAQE,sBAAKvB,MAAO,CAAES,WAAY,IAAKR,SAAU,UAAzC,UACE,cAACkB,GAAA,EAAD,CAAkBzK,QAASqS,EAAE/L,cAD/B,OAIA,qBACEgD,MACEqe,EAAiBlnB,OAAS,EACtB,CAAE+I,MAAOT,EAAOU,KAAKC,UAAWH,SAAU,UAC1C,CAAEQ,WAAY,KAJtB,SAOGqB,YAAUiH,EAAE0V,WAAY,CAAEV,UAAW,QAlBnChV,EAAEyU,OAuBV,UAAAH,EAAMqB,6BAAN,eAA6BxjB,GAAG,KAC/B,sBACE8E,MAAO,CACLsB,QAAS,OACTY,eAAgB,gBAChBX,WAAY,YAJhB,UAOE,sBAAKvB,MAAO,CAAES,WAAY,KAA1B,UACE,cAACU,GAAA,EAAD,CAAkBzK,QAAS2mB,EAAMrgB,cADnC,OAGA,qBAAKgD,MAAO,CAAEE,MAAOT,EAAOU,KAAKC,WAAjC,SACG0B,YAAUub,EAAMqB,sBAAuB,CACtCX,UAAW,YAOJ,OAAhBM,QAAgB,IAAhBA,KAAkBlnB,SAA0B,OAAhBknB,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBlnB,QAAS,EACtD,qBACE6I,MAAO,CACLE,MAAOT,EAAOU,KAAK2J,QACnBrJ,WAAY,IACZid,UAAW,SAJf,SAOG5b,YAAUub,EAAMoB,WAAY,CAAEV,UAAW,MAE1C,QA5FW,KCnBN,SAASY,KACtB,MAAOC,EAAsBC,GAA2BzpB,sBACjD0pB,EAAaC,GAAkB3pB,mBAAsB,QAE1DoK,OAAO,OAAEC,IACPjK,qBAAWkK,MAET,UAAEjE,GAAcjG,qBAAW+V,KAI3BmQ,EAAuC1U,mBAAQ,KACnD,MAAMgY,EAAwC,CAC5C,CACEhW,IAAK,KACL9T,MAAO,KAET,CACE8T,IAAK,kBACL9T,MAAO,MAET,CACE8T,IAAK,oBACL9T,MAAO,OAWX,IAAI8T,EAEJ,OATIvN,GACFujB,EAAOpnB,KAAK,CACVoR,IAAK,YACL9T,MAAOuG,IAMHqjB,GACN,IAAK,cACH9V,EAAM,qBACN,MACF,IAAK,MACHA,EAAM,WACN,MACF,IAAK,gBACHA,EAAM,qBACN,MACF,IAAK,SACHA,EAAM,cACN,MACF,IAAK,oBACHA,EAAM,yBACN,MACF,IAAK,mBACHA,EAAM,gCAYV,OARIA,GACFgW,EAAOpnB,KAAK,CACVoR,MACAiW,SAAU,MACV/pB,MAAO,OAIJ8pB,IACN,CAACvjB,EAAWqjB,KAGb/mB,KAAMmnB,EADF,cAEJC,EAFI,YAGJC,EAHI,UAIJC,EAJI,mBAKJC,GACEC,aAAyB,CAC3BC,SAlEe,GAmEfnE,OAAQ,eACRC,KAAM,CACJ,KACA,CACED,OAAQ,WACRC,KAAM,CAAC,SAAU,YAAa,cAAe,OAAQ,KAAM,WAE7D,CACED,OAAQ,qBACRC,KAAM,CAAC,SAAU,SAAU,YAAa,OAE1C,CACED,OAAQ,WACRC,KAAM,CACJ,KACA,YACA,SACA,SACA,cACA,4BACA,sBAGJ,CACED,OAAQ,cACRC,KAAM,CACJ,KACA,SACA,cACA,SACA,YACA,iBAGJ,CACED,OAAQ,qBACRC,KAAM,CAAC,KAAM,SAAU,YAAa,WAEtC,CACED,OAAQ,yBACRC,KAAM,CACJ,KACA,YACA,SACA,SACA,cACA,gCACA,oBACA,SAGJ,CACED,OAAQ,gCACRC,KAAM,CACJ,KACA,YACA,SACA,SACA,cACA,wBACA,gBAINE,eAAgB,OAChBD,QAAS,YACTG,UAGI+D,EAAOzY,mBACX,WACEkY,QADF,IACEA,OADF,EACEA,EAAeQ,MAAMphB,KAAI+X,GACvBA,EAAM/X,KAAKyK,IACT,IAAI4W,EA+CJ,OA7CI5W,EAAE6W,WACJD,EAAO,cAACE,GAAA,EAAD,CAAcxC,MAAOtU,EAAE6W,YAE5B7W,EAAE+W,cACJH,EAAO,cAACI,GAAA,EAAD,CAAiB1C,MAAOtU,EAAE+W,eAE/B/W,EAAEiX,qBACJL,EACE,cAACM,GAAA,EAAD,CACE5C,MAAOtU,EAAEiX,sBAIXjX,EAAEmX,qBACJP,EACE,cAACQ,GAAA,EAAD,CACE9C,MAAOtU,EAAEmX,sBAIXnX,EAAEqX,yBACJT,EACE,cAACvC,GAAD,CACEC,MAAOtU,EAAEqX,0BAIXrX,EAAEsX,gCACJV,EACE,cAACzB,GAAD,CACEb,MACEtU,EAAEsX,iCAKNtX,EAAEuX,kBASDX,EAGH,qBAEE3f,MAAO,CACLmC,aAAc,GACdoe,cAAe,GACfC,aAAc,aAAe/gB,EAAOkQ,OAAOE,UAL/C,SAQG8P,GAPI5W,EAAEyU,IAJO,WAgBxB,CAAC/d,EAAQyf,IAGLuB,EAAazZ,mBAAQ,KAAO,IAAD,IAC/B,MAAM0Z,EAAK,iBACTxB,QADS,IACTA,GADS,UACTA,EAAeQ,aADN,aACT,EAAsB3lB,QAAO,CAAC4mB,EAAMC,IAAQD,EAAOC,EAAIzpB,QAAQ,UADtD,QAC4D,EAEvE,OAAIkoB,GAAaC,EAEb,8BACE,cAACuB,GAAA,EAAD,MAKQ,IAAVH,GAAgBrB,EAchBD,EAEA,qBACEpf,MAAO,CACL0d,UAAW,SACXxd,MAAOT,EAAOU,KAAKC,UACnBoP,OAAQ,WAEVQ,QAAS,IAAMmP,IANjB,SAQE,sCAMJ,qBACEnf,MAAO,CACL0d,UAAW,SACXjO,QAAS,GACTvP,MAAOT,EAAOU,KAAKC,WAJvB,SAOE,oDAAQsgB,OAnCR,qBACE1gB,MAAO,CACLE,MAAOT,EAAOU,KAAKC,UACnBkQ,WAAY,GACZwQ,UAAW,aAAerhB,EAAOkQ,OAAOE,UAJ5C,SAOE,8CA+BL,CACDqP,EACAG,EACAC,EACAF,EACAD,EACA1f,IAGF,OACE,gCACE,sBACEO,MAAO,CACLsB,QAAS,OACTC,WAAY,WACZW,eAAgB,gBAChBC,aAAc,IALlB,UAQE,cAAC4e,GAAA,EAAD,CAAe5gB,KAAM,mBAAaH,MAAO,CAAEghB,OAAQ,KAEnD,eAAC,IAAD,CAAO1d,UAAU,aAAa4M,MAAM,SAAS3M,KAAK,QAAlD,UACE,cAAC,IAAD,CACE2B,KAAK,OACLqL,KAAM,cAAC0Q,GAAA,EAAD,IACNjR,QAAS,IAAM6O,GAAwB,KAGzC,eAAC,KAAD,CACE/d,UAAU,QACVd,MAAO,CACLpC,MAAO,KAET1I,MAAO4pB,EACPlb,SAAUhO,GAAOmpB,EAAenpB,GANlC,UAQE,cAAC,KAAOsrB,OAAR,CAAehsB,MAAM,MAArB,SACE,uCAEF,cAAC,KAAOgsB,OAAR,CAAehsB,MAAM,MAArB,SACE,iCAEF,cAAC,KAAOgsB,OAAR,CAAehsB,MAAM,SAArB,SACE,qCAEF,cAAC,KAAOgsB,OAAR,CAAehsB,MAAM,oBAArB,SACE,8CAEF,cAAC,KAAOgsB,OAAR,CAAehsB,MAAM,mBAArB,SACE,+CAMF,cAAC,KAAOgsB,OAAR,CAAehsB,MAAM,cAArB,SACE,2CAEF,cAAC,KAAOgsB,OAAR,CAAehsB,MAAM,gBAArB,SACE,qDAMPuqB,EAEAgB,EAED,cAACxD,GAAD,CACE7X,QAASwZ,EACTtZ,SAAU,IAAMuZ,GAAwB,Q,2EC/WjC,SAASsC,IAAiB,OACvCjlB,EADuC,SAEvCiD,EAFuC,UAGvC4e,EAAY,IAMZ,YAAehnB,IAAXmF,EAA6B,KAErB,OAARiD,QAAQ,IAARA,KAAU7G,GAAG8oB,MAAb,OAA6BjiB,QAA7B,IAA6BA,KAAU7G,GAAG+oB,KACrC,cAACC,GAAA,EAAD,CAAWplB,OAAQA,EAAQ6hB,UAAWA,EAAWwD,QAAM,IAGhE,OAAIpiB,QAAJ,IAAIA,KAAU7G,GAAGkpB,KACR,cAACC,GAAA,EAAD,CAAWvlB,OAAQA,EAAQ6hB,UAAWA,EAAWwD,QAAM,IAGzD,KCfM,SAASG,IAAe,MAAE1hB,IACvC,MAAM,MAAER,GAAUhK,qBAAWkK,MACvB,OAAED,GAAWD,GACb,WACJmiB,EADI,mCAEJC,EAFI,0BAGJvO,EACAhe,SAAS,0CAAEwsB,IACTrsB,qBAAW+V,KAEf,OACE,cAACuW,GAAA,EAAD,CACEzsB,QAASwsB,EACTE,UAAW,sCACXC,aACE,2EAEFC,UACE,sBACEjiB,MAAO,IACFkiB,IACHhiB,MAAOT,EAAOU,KAAKgiB,MAAMrY,QACzB/I,WAAY,IAJhB,WAO4B,OAAzBsS,QAAyB,IAAzBA,OAAA,EAAAA,EAA2B/a,GAAGkpB,OAC7B,uBAAMxhB,MAAOoiB,YAAc5iB,GAA3B,UACE,cAAC8hB,GAAA,EAAD,CAAWplB,OAAQylB,EAAY5D,UAAW,EAAGwD,QAAQ,IAAS,OAGlE,cAACJ,GAAD,CACEjlB,OAAM,OAAE0lB,QAAF,IAAEA,IAAsCxoB,IAAUC,KAAK,GAC7D8F,SAAQ,OAAEkU,QAAF,IAAEA,IAA6Bja,IAAUC,KAAK+nB,UAI5DphB,MAAOA,I,aCnCE,SAASqiB,IAAiB,MAAEriB,IACzC,MAAM,MAAER,GAAUhK,qBAAWkK,MACvB,OAAED,GAAWD,GACb,kBACJpH,EADI,sBAEJkqB,EAFI,0BAGJjP,EACAhe,SAAS,yBAAE+f,IACT5f,qBAAW+V,KAETgX,EAAqBH,YAAc5iB,GAEzC,OACE,cAACsiB,GAAA,EAAD,CACE9hB,MAAOA,EACP3K,QAAS+f,EACT2M,UAAW,sCACXC,aACE,qTAOFC,UACmB,OAAjB7pB,QAAiB,IAAjBA,KAAmB8C,GAAG,GACpB,sBACE8E,MAAO,IACFuiB,EACHriB,MAAOT,EAAOU,KAAK2J,SAHvB,UAME,cAACqX,GAAD,CACEjlB,OAAQomB,EACRnjB,SAAUkU,IACT,IACH,yCACI,IACDjb,EAAkBE,GAAGC,KACpB,mCAEA,cAAC4oB,GAAD,CACEjlB,OAAQ9D,EACR+G,SAAUkU,UAMlB,qBACErT,MAAO,IACFuiB,EACH7E,UAAW,SAHf,SAME,cAAC1c,GAAA,EAAD,CACEE,IACE,+MAOFD,MAAO,8C,cClEN,SAASuhB,IAAa,MAAExiB,IACrC,MAAM,oBAAEX,GAAwB7J,qBAAW+V,MACnCxT,KAAM0qB,EAAR,UAAmCpD,GACvCqD,aAAmBrjB,GAErB,OACE,cAACyiB,GAAA,EAAD,CACEzsB,QAASgqB,EACT0C,UAAW,oCACXC,aACE,qCACE,4BACE,uEACG,IACL,cAACpE,GAAA,EAAD,CAAe1oB,MAAOmK,EAAqB6F,KAAK,eAGpD+c,UACE,sBAAMjiB,MAAOkiB,IAAb,SACE,cAACZ,GAAA,EAAD,CAAWplB,OAAQumB,EAA2B1E,UAAW,EAAGwD,QAAM,MAGtEvhB,MAAOA,ICrBE,SAAS2iB,KACtB,MAAM,mCACJf,EADI,kBAEJxpB,EAFI,UAGJqD,EAHI,YAIJmnB,EAJI,cAKJtX,EALI,gBAMJ4J,EACA7f,SAAS,yBAAE+f,IACT5f,qBAAW+V,MAGb/L,OAAO,OAAEC,IACPjK,qBAAWkK,MAEP3H,KAAM8qB,EAAUxtB,QAASytB,GAC/B3U,aAA2B,CACzBxS,SAAUuZ,EACVzZ,cAGEsnB,GACFzX,GAAiBwX,GAAoB1N,EAEzC,OACE,eAAC,IAAD,CAAO9R,UAAU,WAAWtD,MAAO,CAAEsB,QAAS,QAA9C,UACE,cAAC0hB,GAAA,EAAD,CAAgBJ,YAAaA,EAAa1iB,MAAOT,EAAOU,KAAK2J,UAC7D,cAAC4X,GAAD,IACA,cAACW,GAAD,IACA,cAAC,KAAD,CACEhtB,QAAS0tB,EACTriB,OAAO,EACPuiB,UAAW,CAAE/H,KAAM,EAAGtd,MAAO,CAAC,SAC9BslB,QAAM,EAJR,UAMIH,GAA6B3qB,EAC7B,cAAC+qB,GAAA,EAAD,CACEC,aAAchrB,EACdirB,wBAAyBzB,EACzB0B,+BAAgCT,IAEhC,OAEN,cAACL,GAAD,O,gEClDS,SAASe,GACtBxS,EACAtV,GAEA,OAAO+P,YAA6B,CAClC7W,SAAUkH,IAAeyS,aACzB1Z,aAAc,YACdC,KACEkc,GAAetV,EACX,CAACsV,EAAa3X,IAAUC,KAAKoC,GAAW/B,eACxC,KACNzE,eAAgBuuB,OCRb,MAAMC,GAAwB,EACnChoB,YACAsI,SACA/D,QACA+d,gBAOA,MACEve,OAAO,OAAEC,IACPjK,qBAAWkK,MACP3H,KAAM2rB,GAAiBrV,aAAgB,CAAE5S,cAC3C0iB,EAAcwF,aAAiBD,IAC/B,YAAE3S,GAAgBvb,qBAAWwb,MAC3BjZ,KAAM6rB,GAAYL,GAAkBxS,EAAatV,GAEzD,OACE,sBAAKuE,MAAO,CAAEsB,QAAS,OAAQY,eAAgB,mBAAoBlC,GAAnE,UACE,oCACmBjJ,IAAhBonB,EACC,qCACGrc,YAAU8hB,EAAS,CAAE7F,UAAS,OAAEA,QAAF,IAAEA,IAAa,IAAM,IACnDO,aAAgB,CAAEH,cAAaK,QAAQ,OAG1C,OAIHza,GACC,cAAC8f,GAAA,EAAD,CACE7jB,MAAO,CAAEE,MAAOT,EAAOU,KAAK0P,UAC5BpU,UAAWA,EACXsI,OAAQA,Q,uDC5BlB,MAAM+f,GAA0B,EAC9B5e,OACA8K,cAKA,MAAM+T,EAAyB,YAAT7e,EAAqB,UAAY,SACvD,OACE,cAAC,IAAD,CACElF,MAAO,CAAEoQ,YAAa,GAAIxS,MAAO,KACjCsH,KAAK,OACLqL,KAAM,cAACyT,GAAA,EAAD,IACNhU,QAASA,EAJX,SAMG+T,KAKDE,GAAa,EACjB/uB,QACA0O,eAIK,IAAD,UACJ,MAAOsgB,EAAOC,GAAY/uB,mBAAQ,iBAASF,QAAT,IAASA,OAAT,EAASA,EAAOgvB,aAAhB,QAAyB,KACpDhf,EAAMkf,GAAWhvB,mBAAQ,iBAAiBF,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAOgQ,YAAxB,QAAgC,SAE1Dmf,EAAiBC,IAIb,OAAR1gB,QAAQ,IAARA,KAAW,CACTsgB,QACAhf,UACGhQ,KACAovB,KASDC,EAAgBC,IACpBJ,EAAQI,GACRH,EAAc,CAAEnf,KAAMsf,EAASN,MAAO,MAGxC,OACE,sBAAKlkB,MAAO,CAAEsB,QAAS,cAAe1D,MAAO,QAA7C,UACE,cAACkmB,GAAD,CACE5e,KAAI,iBAAEhQ,QAAF,IAAEA,OAAF,EAAEA,EAAOgQ,YAAT,QAAiBA,EACrB8K,QAAS,KACP,MAAMyU,EAAcvf,GACT,UAATA,EAAmB,UAAY,QACjC,OAAIhQ,QAAJ,IAAIA,KAAOgQ,KACTqf,EAAaE,EAAWvvB,EAAMgQ,OAE9Bqf,EAAaE,EAAWvf,OAI9B,cAAC,IAAD,CACEA,KAAK,OACL2E,YAC4B,WAA1B,iBAAC3U,QAAD,IAACA,OAAD,EAACA,EAAOgQ,YAAR,QAAgBA,GACZvL,KACA,aAENzE,MAAK,iBAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAOgvB,aAAT,QAAkBA,EACvBtgB,SAjCiBmF,IACrBob,EAASD,GACTG,EAAc,CACZH,MAAOnb,EAAElI,OAAO3L,eAoCP,SAASwvB,IAAY,KAClC5hB,IAIA,OACE,cAAC,IAAD,CAAMA,KAAMA,EAAZ,SACE,cAAC,IAAK6hB,KAAN,CAAW3rB,KAAK,YAAhB,SACG,CAAC4rB,GAAUC,MAAKC,YACf,qCACGF,EAAOtmB,KAAI,EAAG0K,MAAKhQ,UAClB,eAAC,IAAD,WACE,cAAC,IAAD,CAAKmR,KAAK,OAAV,SACE,cAAC,IAAKnF,KAAN,CACEhM,KAAM,CAACA,EAAM,cACb0K,MAAO,CACL,CACE0F,UAAW,CAAC2b,EAAG7vB,IACT,OAACA,QAAD,IAACA,KAAOgvB,MAAM/sB,OAGXkS,QAAQC,UAFND,QAAQM,OAAO,aAI1Bqb,gBAAiB,WACjBC,QAAS,oBACTthB,UAAU,IAZhB,SAgBE,cAACsgB,GAAD,QAGJ,cAAC,IAAD,CAAK9Z,KAAK,OAAV,SACE,cAAC,KAAD,CAASzJ,MAAO,wBAAhB,SACE,cAAC,IAAD,CACEwE,KAAK,OACLlF,MAAO,CAAEe,WAAY,IACrBwP,KAAM,cAAC2U,GAAA,EAAD,IACNzJ,OAAK,EACLzL,QAAS,IAAM8U,EAAO9rB,WA5BpBgQ,KAkCZ,cAAC,IAAKhE,KAAN,UACE,cAAC,IAAD,CACEE,KAAK,SACL8K,QAAS,IAAM6U,IACfpJ,OAAK,EACLlL,KAAM,cAAC4U,GAAA,EAAD,IAJR,SAME,+BACE,iDCjIX,SAASC,IAAgB,MAC9BnU,EAD8B,gBAE9BoU,EAF8B,YAG9BC,EAH8B,mBAI9BC,EAJ8B,QAK9BngB,EAL8B,SAM9BE,EAN8B,WAO9BkgB,IASE,IAAD,EACD,MAAOC,EAAkBC,GAAuBtwB,sBACzCC,EAASC,GAAcF,sBACvB0N,GAAQgE,qBAkDf,OAhDAb,qBAAU,KAAO,IAAD,EACd,MAAM0f,GAAgB,iBACpBN,QADoB,IACpBA,OADoB,EACpBA,EAAiBO,cADG,QACO,CAAC,CAAE1gB,KAAM,QAAShQ,MAAO,MACpDoJ,KAAIunB,IAAC,IAAUA,MACjB/iB,EAAKgB,eAAe,CAClBgiB,UAAWH,EAAcrnB,KAAIynB,IAAC,CAC5BC,WAAY,CAAE9B,MAAO6B,EAAE7wB,MAAOgQ,KAAM6gB,EAAE7gB,cAGzC,CAACpC,EAAMuiB,EAAiBI,IAwCzB,cAAC,KAAD,CACErgB,QAASA,EACTE,SAAUA,EACV2gB,OACE,sBACEjmB,MAAO,CACLsB,QAAS,OACTY,eAAgB,gBAChB4a,UAAW,IAJf,UAOGyI,EACC,cAAC,IAAD,CACErgB,KAAK,OACL3B,KAAK,QACLgN,KAAM,cAAC2V,GAAA,EAAD,IACNlW,QAAS,IAAM0V,GAAoB,GAJrC,SAME,+BACE,kDAIJ,wBAEF,cAAC,IAAD,CAAQ1V,QAAS1K,EAAjB,SACE,oCA1BR,SA+BE,gCACE,6BACE,mCAEF,4BACE,2EAGF,eAAC,IAAD,CAAOhC,UAAU,WAAWtD,MAAO,CAAEpC,MAAO,OAAQkf,UAAW,IAA/D,UACE,cAAC2G,GAAD,CAAuBhoB,UAAW0qB,IAAeC,eADnD,OAGIf,QAHJ,IAGIA,GAHJ,UAGIA,EAAuCO,cAH3C,aAGG,EAAgDtnB,KAAIynB,GACxC,UAAXA,EAAE7gB,KACA,cAACmhB,GAAA,EAAD,CAEEC,OAAQrV,EACRyS,aAAcqC,EAAE7wB,OAFX6wB,EAAE7wB,OAKT,cAACuuB,GAAD,CACEhoB,UAAWrC,IAAUC,KAAK0sB,EAAE7wB,OAAO4D,kBAM3C,eAAC,KAAD,CACE4H,MAAO,8BACP0E,QAASqgB,EACTngB,SAAU,IAAMogB,GAAoB,GACpCzL,WAAY,iBACZrc,MAAO,IACPgf,eAAgBvnB,EAChBgQ,KAtGRnP,iBACE,IAAKovB,EAAa,aAEZxiB,EAAKoF,iBAEX5S,GAAW,GAEX,MAAMixB,EAA+BzjB,EAClC0jB,iBACAV,UAAUxnB,KAAIynB,GAAKA,EAAEC,aACrB1nB,KAAIvI,IAAC,CAAOb,MAAOa,EAAEmuB,MAAOhf,KAAMnP,EAAEmP,SAEjCuhB,QAAyBC,aAC7B,IACKrB,EACHO,OAAQW,EAAiB/uB,QAAOuuB,GAAKA,EAAE7gB,QAEzCogB,GAGGmB,EAAiBE,SAKtBnB,EACE,CAAE7T,IAAK8U,EAAiBE,UACxB,CACE9U,OAAQ,KACNvc,GAAW,GACXowB,GAAoB,GACpB5iB,EAAK2F,iBAVTnT,GAAW,IAkFPiQ,OAAQ,8BARV,UAUE,mBAAGvF,MAAO,CAAEmC,aAAc,IAA1B,SACE,4GAKF,cAACuiB,GAAD,CAAa5hB,KAAMA,Y,8HC7Hd,SAAS8jB,IAAoB,aAC1CnuB,EAD0C,qBAE1Cqa,EAF0C,kBAG1C1a,EAH0C,0BAI1Cib,IAOA,MACE7T,OAAO,OAAEC,IACPjK,qBAAWkK,MAET,YAAEye,GAAgB3oB,qBAAW+V,KAEnC,IAAK9S,EAAc,OAAO,KAE1B,MAAM0T,EAAoBC,aAAmB,CAC3CC,YAAa5T,EAAaC,SAASI,WACnCmV,WAAW,IAEP4Y,EAAqB9mB,aAAWtH,EAAaya,MAAMxR,IAAI,MACvDolB,EAAmB/mB,aACvBtH,EAAaya,MAAM2R,IAAIpsB,EAAaC,UAAUgJ,IAAI,MAE9CqlB,EAAiBrsB,aAA2BjC,EAAakC,QACzDM,EACJT,YAAkC/B,GAE9BuuB,EAAoB1I,aAAgB,CACxCH,cACAI,YAAY,EACZC,QAAQ,IAGJyI,EAAqB,KAAO,IAAD,EAC/B,MAAMlsB,EAAewY,YACnBC,YAAkB,UAChBC,YAAc,OACZhb,QADY,IACZA,OADY,EACZA,EAAcib,OADF,OAEZZ,QAFY,IAEZA,OAFY,EAEZA,EAAsB/X,aAAajC,WACnC6a,qBAAW,KACX,mBALc,QAMX,KAIT,OACE,+BACE,gFAEGC,YAAkB,OAACd,QAAD,IAACA,OAAD,EAACA,EAAsB/X,cAF5C,aACGA,EADH,kBACkBisB,QAOlBE,EAAmB,KAAO,IAAD,EAC7B,MAAMC,EAAY5T,YAChBC,YAAkB,UAChBC,YAAc,OACZhb,QADY,IACZA,OADY,EACZA,EAAcib,OADF,OAEZZ,QAFY,IAEZA,OAFY,EAEZA,EAAsB/X,aAAajC,WACnC6a,qBAAW,KACX,gBALc,QAMX,KAIT,OACE,+BACE,8EACGwT,EADH,kBACeH,QAMfI,EAAkB5a,eAExB,OACE,gCACE,eAAC,KAAD,CACE6a,WAAY,CAAE5mB,WAAY,KAC1B8C,KAAK,QACL+jB,OAAQ,CAAEC,GAAI,EAAGzT,GAAI,EAAG/D,GAAI,EAAGyX,GAAI,EAAGC,GAAI,EAAGC,IAAK,GAClDC,aAAc,CAAEvX,YAAa,UAJ/B,UAME,cAAC,KAAapL,KAAd,CAAmB/D,MAAO,6CAA1B,SACE,sBAAMjB,MAAO,CAAE4nB,WAAY,UAA3B,SACE,cAACrZ,GAAA,EAAD,CACEnW,kBAAmBA,EACnBwO,aAAc5E,YAAc,OAC1BqR,QAD0B,IAC1BA,OAD0B,EAC1BA,EAA2Bva,kBAQnC,cAAC,KAAakM,KAAd,CAAmB/D,MAAO,mCAA1B,SACGxI,EAAaC,SAASwC,GAAG,GACxBiR,EAEA,cAAC0b,GAAA,EAAD,CACE3b,aAAa,EACbK,aAAc6a,EAAgB1uB,SAFhC,SAIE,sCAKLD,EAAaC,SAASwC,GAAG,IACxB,cAAC,KAAa8J,KAAd,CAAmB/D,MAAO,gCAA1B,SACG4lB,IAIJpuB,EAAaC,SAASwC,GAAG,IACxB,cAAC,KAAa8J,KAAd,CAAmB/D,MAAO,8BAA1B,SACG6lB,IAIL,eAAC,KAAa9hB,KAAd,CACE/D,MACE,cAACD,GAAA,EAAD,CACEC,MAAO,wCACPC,IAAKkM,OAJX,UAQGC,YAAmB5U,EAAa0U,cARnC,OAWA,cAAC,KAAanI,KAAd,CACEmL,KAAM,EACNlP,MACE,cAACD,GAAA,EAAD,CACEC,MAAO,0CACPC,IAAKsM,OALX,SASuB,OAApBsF,QAAoB,IAApBA,KAAsBvF,eACrB,iCACGE,YAAoB,OAACqF,QAAD,IAACA,OAAD,EAACA,EAAsBvF,gBAD9C,OAGE,OAGN,cAAC,KAAavI,KAAd,CACE/D,MACE,cAACD,GAAA,EAAD,CACEC,MAAO,oCACPC,IACE,kNACE,gCAQRiP,KAAM,EACNwX,aAAc,CAAEG,SAAU,QAf5B,SAiBE,iDACGvU,YAAaC,YAAkB,OAAC/a,QAAD,IAACA,OAAD,EAACA,EAAcib,OAAO7L,kBAK1D,cAAC,KAAa7C,KAAd,CACE/D,MACE,cAACD,GAAA,EAAD,CACEC,MAAO,2CACPC,IACE,4JACgB8lB,GADhB,cAEE,gCAMR7W,KAAM,EACNwX,aAAc,CAAEG,SAAU,QAd5B,SAgBE,cAACZ,EAAD,MAGF,cAAC,KAAaliB,KAAd,CACEmL,KAAM,EACNlP,MACE,cAACD,GAAA,EAAD,CACEC,MAAO,+EAAiB+lB,KACxB9lB,IACE,gQAEE,gCARV,SAiBE,cAAC2mB,GAAA,EAAD,CACE3b,YAAajR,EAA6B2R,qBAC1CL,aAAc6a,EAAgBxa,qBAFhC,SAIE,cAACqa,EAAD,QAIJ,cAAC,KAAajiB,KAAd,CACEmL,KAAM,EACNlP,MAAO,cAACD,GAAA,EAAD,CAAcC,MAAO,qCAF9B,SAIuB,OAApB6R,QAAoB,IAApBA,KAAsBnF,SACrB,iCAEA,oCAGJ,cAAC,KAAa3I,KAAd,CACEmL,KAAM,EACNlP,MACE,cAACD,GAAA,EAAD,CACEC,MAAO,8CACPC,IACE,uGANR,SAcE,cAAC2mB,GAAA,EAAD,CACE3b,YAAW,OAAE4G,QAAF,IAAEA,OAAF,EAAEA,EAAsB9X,aACnCuR,aAAcC,eAA6BxR,aAF7C,SAIuB,OAApB8X,QAAoB,IAApBA,KAAsB9X,aACrB,kCAEA,0CAMR,gCACE,uBAAMgF,MAAO,CAAES,WAAY,IAAKP,MAAOT,EAAOU,KAAKC,WAAnD,UACE,cAACY,GAAA,EAAD,CACEC,MAAO,mDACPC,IACE,yFAJN,OAUQ,IACR,cAAC2mB,GAAA,EAAD,CACE3b,YAAajR,EAA6BN,OAC1C4R,aAAc6a,EAAgBzsB,OAFhC,SAIGosB,EAAe/tB,OAElB,qBAAKgH,MAAO,CAAEE,MAAOT,EAAOU,KAAKC,WAAjC,SACE,sBAAKJ,MAAO,CAAEC,SAAU,UAAxB,UACE,oDAEE,cAAC2d,GAAA,EAAD,CAAe1oB,MAAO6xB,EAAerwB,QAASwO,KAAK,eAErD,uBACC6hB,EAAe1M,uB,8CC9Sb,SAAS0N,IAAuB,QAC7C3iB,EAD6C,SAE7CE,EAF6C,YAG7CgR,IAKE,IAAD,MACD,MAAOjhB,EAASC,GAAcF,sBACvB4yB,EAAoBC,GAAyB7yB,sBAC9C,mCACJwsB,EADI,kBAEJxpB,EAFI,sBAGJkqB,EAHI,0BAIJjP,EAJI,aAKJT,EALI,oBAMJvT,GACE7J,qBAAW+V,MAEb/L,OAAO,OAAEC,IACPjK,qBAAWkK,MACR4U,EAAoBC,GAAyBnf,qBAE9C8yB,EC3BD,WACL,MAAM,WAAExW,EAAF,UAAcnc,GAAcC,qBAAWC,MACvC,UAAEgG,GAAcjG,qBAAW+V,KAEjC,MAAO,EAAGrP,SAAQiD,WAAUgpB,OAAO,IAAMvW,KAOpC,IAAD,EANF,OACGF,GACAjW,GACD,OAAClG,QAAD,IAACA,KAAW4Q,sBACXjK,GACAiD,EAMIuS,EACLnc,EAAU4Q,qBACV,sBACA,CAAC1K,EAAWS,EAAQiD,EAAU5D,IArBV,EAqBgD4sB,GACpEvW,IARM,OAANA,QAAM,IAANA,GAAA,UAAAA,EAAQC,cAAR,cAAAD,GACOvI,QAAQC,SAAQ,KDcC8e,GACtB1gB,EAAwB5B,eACxBuiB,EAAYC,eAoDlB,GAlDAriB,qBAAU,KAAO,IAAD,EACd,IAAK7N,EAAmB,OAExB,MAAMmwB,EAAW,iBAAGnwB,QAAH,IAAGA,OAAH,EAAGA,EAAmBowB,IAAnB,OAAuBlG,QAAvB,IAAuBA,IAAyB,UAAnD,QAAyD,EACpEmG,EAAkD,OAAlC7G,QAAkC,IAAlCA,KAAoC1mB,GAAGqtB,GACzDA,EACA3G,EAEJqG,EAAsBntB,YAAQ2tB,MAC7B,CACD7G,EACAxpB,EACAkqB,KAsCG5a,EAAuB,OAAO,KAEnC,MAAMghB,EAA2B1mB,YAAc,OAC7CqR,QAD6C,IAC7CA,OAD6C,EAC7CA,EAA2Bva,YAGvByvB,EAAW,iBACfnwB,QADe,IACfA,OADe,EACfA,EAAmBowB,IAAnB,OAAuBlG,QAAvB,IAAuBA,IAAyB,UADjC,QACuClpB,IAAUC,KAAK,GAEjEovB,EAAkD,OAAlC7G,QAAkC,IAAlCA,KAAoC1mB,GAAGqtB,GACzDA,EACA3G,EAEEja,EAAgBC,YAAUF,GAC1BihB,EAAuB7mB,YAAU2mB,EAAe,CAAE1K,UAAW,IAC7D6K,EAAY9mB,YAAS,UACzB+mB,YAAaJ,EAAe/gB,UADH,QAC6B,EACtD,CACEqW,UAAW,IAGT+K,EAAkB,UACtBlgB,YAAa6f,EAAe/gB,UADN,QACgCtO,IAAUC,KAAK,GAEjE0vB,EAA8BjnB,YAAUgnB,EAAoB,CAChE/K,UAAW,IAEPiL,EAAwBlnB,YAC5BkmB,EACIpf,YAAavQ,YAAS2vB,GAAqBtgB,GAC3CtO,IAAUC,KAAK,IAGrB,OACE,cAAC+c,EAAA,EAAD,CACE1V,MAAO,2CACP0E,QAASA,EACTC,KAxEJnP,iBAA6C,IAAD,EAC1C,IAAKmd,IAA8B2U,EAAoB,OAOvD,KALe,UACb3U,EAA0B/a,GAAGkpB,KACzB6G,EAAUY,SAASjB,GACnB3vB,YAAS2vB,UAHA,aAAG,EAIfQ,IAAI,OACS,OAEhBlzB,GAAW,SAEgB4yB,EACzB,CACEhsB,OAAQ7D,YAAS2vB,GACjB7oB,SAAUkU,EAA0Bva,YAEtC,CACE+Y,OAAQ,KACN0C,GAAsB,IAExB+B,YAAa,KACXhhB,GAAW,GACXif,GAAsB,GACX,OAAX+B,QAAW,IAAXA,YAMJhhB,GAAW,GACXif,GAAsB,KA0CtBjP,SAAU,KACR2iB,OAAsBlxB,GACd,OAARuO,QAAQ,IAARA,QAEFwU,cAAe,CACblK,UAAWoY,GAA6C,MAAvBA,GAEnCpL,eAAgBvnB,EAChBif,mBAAoBA,EACpB/O,OAAQ,2BACR2jB,kBAAmB,uCACnBtrB,MAAO,IAfT,SAiBE,eAAC,IAAD,CAAO0F,UAAU,WAAWC,KAAK,QAAQvD,MAAO,CAAEpC,MAAO,QAAzD,UACE,gCACE,sBAAKoC,MAAO,CAAEsB,QAAS,OAAQY,eAAgB,iBAA/C,UACE,uCAA4B,IAC5B,gCACE,cAACH,GAAA,EAAD,CAAgB5C,SAAUupB,IACzBC,QAIL,sBAAK3oB,MAAO,CAAEsB,QAAS,OAAQY,eAAgB,iBAA/C,UACE,8BACE,0EAAiByF,OAEnB,qCACI,cAAC5F,GAAA,EAAD,CAAgB5C,SAAUupB,IAC3BE,QAIL,sBACE5oB,MAAO,CACLsB,QAAS,OACTY,eAAgB,gBAChBzB,WAAY,IACZqgB,UAAY,aAAYrhB,EAAOkQ,OAAOE,YAL1C,UAQE,8BACE,iDAEF,gCACE,cAAC9N,GAAA,EAAD,CAAgB5C,SAAUupB,IACzBK,WAIP,cAAC,IAAD,CAAM1lB,OAAO,WAAb,SACE,cAAC,IAAK2B,KAAN,CACE/D,MAAO,+CACPjB,MAAO,CAAEmC,aAAc,GACvBkC,MACE,qBAAKrE,MAAO,CAAEE,MAAOT,EAAOU,KAAK2J,QAAS3H,aAAc,IAAxD,SACE,wHAGK6mB,EAHL,cAKSrhB,GALT,cACE,sBAAM3H,MAAO,CAAES,WAAY,OAD7B,EAEI,cAACsB,GAAA,EAAD,CAAgB5C,SAAUupB,SAPpC,SAeE,cAAC3L,GAAA,EAAD,CACElT,YAAY,IACZ3U,MAAO8yB,EACPpkB,SAAU1O,GAAS+yB,EAAsB/yB,GACzC+U,UACE,sBACEjK,MAAO,CACLsB,QAAS,OACTC,WAAY,UAHhB,UAME,sBACEvB,MAAO,CACLoQ,YAAa,EACblQ,MAAOT,EAAOU,KAAK2J,SAHvB,SAMG9H,YAAc,OACbqR,QADa,IACbA,OADa,EACbA,EAA2Bva,cAG/B,cAACkkB,GAAA,EAAD,CACE9S,QAAS,8BACT8F,QAAS,IACPiY,EAAsBntB,YAAQ2tB,eAQ5C,gCACE,6BACE,8CAGwB,KAAb,OAAZ7V,QAAY,IAAZA,OAAA,EAAAA,EAAczb,QACb,4BACE,qIAKA,KAEJ,cAACoL,GAAA,EAAD,CACEnD,WAAY0pB,EACZ3pB,SAAUkU,EACV/W,OAAM,OAAEsW,QAAF,IAAEA,IAAgB,GACxBvT,oBAAqBA,EACrBmD,iBAAe,OAGnB,oBAAGxC,MAAO,CAAEC,SAAU,UAAtB,UACE,cAACuS,EAAA,EAAD,IAA8B,IAC9B,0E,eE3PH,MAAM2W,GAAe,CAC1BnsB,iBAAajG,EACbkF,QAAS,EACTgB,mBAAelG,EACfmG,iBAAanG,EACb0E,eAAW1E,EACXoG,eAAWpG,G,+CCRN,MAAMqyB,GAAsB,EACjCjrB,aAMA,MAAM,WAAEuT,EAAF,UAAcnc,GAAcC,qBAAWC,MACvC,UAAEgG,GAAcjG,qBAAW+V,KACjC,MAAO,EAAGqK,iBAAiBhE,KACzB,MAAMyX,EAAkB,CACtBhT,MAAOT,EAAcS,MACrB/Z,OAAQsZ,EAActZ,OAAOgC,IAAIU,OAEqC,IAAD,EAAvE,OAAK0S,GAAejW,GAAa,OAAClG,QAAD,IAACA,KAAW8I,eAAkBF,EAKxDuT,EACLnc,EAAU8I,cACV,MACA,CAAC5C,EAAW0C,EAAQ,CAACkrB,IACrBzX,IARM,OAANA,QAAM,IAANA,GAAA,UAAAA,EAAQC,cAAR,cAAAD,GACOvI,QAAQC,SAAQ,MCOvBggB,GAAiB,EAAGhtB,aAAmC,IAAD,EAC1D,MAAM,YAAEyU,GAAgBvb,qBAAWwb,MAC7B,kBAAE5Y,EAAF,0BAAqBib,GACzB7d,qBAAW+V,KACPge,EAA4B,IAAMltB,aAAyBC,GAC3DktB,EAAaxiB,mBACjB,SACKmiB,GACHnsB,YAAa+T,EACb9U,QAASG,YAAiBmtB,GAA2BzwB,cAEvD,CAACywB,EAA2BxY,IAExBnK,EAAY,UAChB5E,YAAc,OACZqR,QADY,IACZA,OADY,EACZA,EAA2Bva,mBAFb,QAGX,MACDiO,EAA2B,OAAG3O,QAAH,IAAGA,OAAH,EAAGA,EAAmBE,GACrDC,KAEF,OACE,cAACuW,GAAA,EAAD,CACEjS,MAAO2sB,EACPltB,OAAQA,EACRlE,kBACE2O,OACIhQ,EACA+K,YAAU1J,EAAmB,CAAEqxB,mBAAoB,KAEzD7iB,aAAcA,EACdmI,UAAQ,EACRpP,gBAAc,KAKd+pB,GAAiB7sB,IACrB,MAAMuW,GAAM,IAAID,MAAO9K,UAAY,KAC7B,aAAEuK,GAAiBpd,qBAAW+V,KAI9Boe,OAEJ5yB,KADY,OAAZ6b,QAAY,IAAZA,OAAA,EAAAA,EAAcgX,MAAKC,GAAkBrrB,mBAAQqrB,EAAgBhtB,MAE/D,OACEA,EAAMK,aAAeL,EAAMK,YAAckW,GAAOuW,GAc9CG,GAA0B,IAC9B,4BACE,2FAKEC,GAA0B,KAC9B,MACEvqB,OAAO,OAAEC,IACPjK,qBAAWkK,KACf,OACE,4BACE,eAAC,IAAD,CAAO6D,KAAK,QAAZ,UACE,cAACiP,EAAA,EAAD,CACExS,MAAO,CACLE,MAAOT,EAAOU,KAAK4R,QAGvB,iFAMFiY,GAA0B,EAC9BhqB,YAIA,MAAM,aACJvH,EADI,kBAEJL,EAFI,0BAGJib,EACAhe,SAAS,yBAAE+f,EAAF,oBAA4B6U,IACnCz0B,qBAAW+V,KAET2e,EAAUC,cACVhrB,EAAW6C,YAAc,OAC7BqR,QAD6B,IAC7BA,OAD6B,EAC7BA,EAA2Bva,YAEvBiO,EAA2B,OAAG3O,QAAH,IAAGA,OAAH,EAAGA,EAAmBE,GACrDC,KAEI6xB,EAAiBhV,GAA4B6U,EASnD,OACE,sBAAKjqB,MAAO,CAAEsB,QAAS,OAAQY,eAAgB,mBAAoBlC,GAAnE,UACE,cAAC,KAAD,CACE3K,QAAS+0B,EACTnH,UAAW,CAAE/H,KAAM,EAAGtd,MAAO,CAAC,QAC9B8C,OAAO,EACPwiB,QAAM,EAJR,SAME,8BACE,sDAAezqB,QAAf,IAAeA,OAAf,EAAeA,EAAcua,OAAOnL,cAAsB,IACzDd,EACC,8BAEA,mCACE,8DAEGjF,YAAU1J,IAFb,cACsB,cAAC2J,GAAA,EAAD,CAAgB5C,SAAUA,cAOxD,cAAC,IAAD,CACEoE,KAAK,QACLgN,KAAM,cAAC2V,GAAA,EAAD,IACNlW,QAhC0B,KAC9Bka,EAAQtyB,KAAK,CACXyyB,OAAQ,mDAEVH,EAAQI,GAAG,IAyBT,SAKE,+BACE,gEAOGC,GAAmB,EAC9BnlB,UACAC,OACAC,eAKK,IAAD,IACJ,MACE9F,OAAO,OAAEC,IACPjK,qBAAWkK,MAGbkT,aAAc4X,EADV,aAEJ/xB,EAFI,0BAGJ4a,EAHI,kBAIJjb,GACE5C,qBAAW+V,KACTkf,EAAmBrB,GAAoB,CAC3CjrB,OAAM,OAAE1F,QAAF,IAAEA,GAAF,UAAEA,EAAciD,qBAAhB,aAAE,EAA6BmM,cAEhC6iB,EAAcC,GAAmBv1B,oBAAkB,GAEpDwR,EAAY,UAChB5E,YAAc,OACZqR,QADY,IACZA,OADY,EACZA,EAA2Bva,mBAFb,QAGX,OAKA8xB,EAAeC,GAAoBz1B,mBAAkB,IAG5D6Q,qBAAU,KACR4kB,EAAgB,OAACL,QAAD,IAACA,IAAuB,MACvC,CAACA,EAAqBplB,IAEzB,MAAM0lB,EAAe9jB,mBACnB,IAAsB4jB,EAzIIpzB,QAAOqF,GAAS6sB,GAAc7sB,MA0IxD,CAAC+tB,IAGGG,EAAiB/jB,mBACrB,IAAwB4jB,EAzIIpzB,QAAOqF,IAAU6sB,GAAc7sB,MA0I3D,CAAC+tB,KAGII,EAAsBC,GAC3B71B,oBAAkB,GAEd81B,EAAwBlkB,mBAC5B,IAAM3K,aAAyBuuB,IAC/B,CAACA,IAEGO,EAA+BD,EAAwB,IAEvDE,EAD4B,IAAMF,EAEV,IAA5B,OAAiC9yB,QAAjC,IAAiCA,OAAjC,EAAiCA,EAAmB8C,GAAG,IAEnDmwB,EAAoB11B,uBACxBO,UACE,GAAIi1B,EAA8B,OAClCR,GAAgB,SACCF,EACf,CACE7U,cAAe,CACbS,MAAOxB,IACPvY,WAGJ,CACEga,YAAa,KACXqU,GAAgB,GAChBtlB,KAEFimB,QAAS,IAAMX,GAAgB,MAIjCA,GAAgB,KAGpB,CAACtlB,EAAMolB,EAAkBU,IAGrBzkB,EAAkB/Q,uBAAa4S,IACnCsiB,EAAiBtiB,KAChB,IAEGgjB,EAAkB51B,uBACtB,CAACkH,EAAc2uB,EAAezc,KAAwB,IAAD,EACnD,MAAMhI,EAA2B,OAAG3O,QAAH,IAAGA,OAAH,EAAGA,EAAmBE,GACrDC,KAEF,OACE,cAACuW,GAAA,EAAD,CAEEE,cAAc,aACdnS,MAAOA,EACPP,OAAQsuB,EACRxyB,kBACE2O,OACIhQ,EACA+K,YAAU1J,EAAmB,CAAEqxB,mBAAoB,KAEzD7iB,aAAcA,EACdmI,SAAUA,EACVrI,gBAAiBA,EACjBuI,cAAewc,IACb,MAAMC,EAAYl0B,kBAChBuzB,GACAlzB,GAAKA,EAAEmF,cAAgByuB,EAAazuB,cAEtC0J,EAAgBglB,EAAUC,OAAOb,MAlBrC,UACOjuB,EAAMG,mBADb,QAC4BwuB,KAsBhC,CACEpzB,EACAwyB,EACAhkB,EACAF,EACAqkB,EACAD,IAIJ,OACE,qCACE,eAAC,KAAD,CACE1lB,QAASA,EACTwX,eAAgB8N,EAChBhqB,MAAM,eACN6E,OAAO,eACP0U,WAAYyQ,EAAe,QAAU,SACrCrlB,KAAM,IAAMgmB,EAAkBT,GAC9BtlB,SAAUA,EACV1H,MAAO,IART,UAUE,gCACE,cAACksB,GAAD,IACA,cAACC,GAAD,OAEF,cAACC,GAAD,CAAyBhqB,MAAO,CAAE8c,UAAW,GAAI3a,aAAc,MAC/D,eAAC,IAAD,CACEmB,UAAU,WACVtD,MAAO,CAAEpC,MAAO,OAAQguB,UAAW,GACnCroB,KAAK,QAHP,UAKE,cAAC,IAAD,CAAOvD,MAAO,CAAEpC,MAAO,QAAU0F,UAAU,WAAWC,KAAK,QAA3D,SACGwnB,EAAezsB,KAAI,CAACzB,EAAO2uB,IAC1BD,EAAgB1uB,EAAO2uB,OAG1BV,EACC,cAAC,IAAD,CAAO9qB,MAAO,CAAEpC,MAAO,QAAU0F,UAAU,WAAWC,KAAK,QAA3D,SACGunB,EAAaxsB,KAAI,CAACzB,EAAO2uB,IACxBD,EAAgB1uB,EAAO2uB,GAAO,OAGhC,KACHJ,EACC,cAAC9B,GAAD,CAAgBhtB,OAAQsuB,IACtB,KACHO,GACC,sBAAMnrB,MAAO,CAAEE,MAAOT,EAAOU,KAAK0rB,SAAlC,SACE,mEAGJ,qBACE7rB,MAAO,CACLsB,QAAS,OACTY,eAAgB,gBAChBhC,MAAOT,EAAOU,KAAKC,WAJvB,SAOE,qBACEJ,MAAO,CACLE,MACEgrB,EAAwB,IACpBzrB,EAAOU,KAAK4R,KACZtS,EAAOU,KAAKC,WALtB,SAQE,8CAAe8qB,EAAsBztB,QAAQ,UAGjD,cAAC,IAAD,CACEyH,KAAK,SACL8K,QAAS,KACPib,GAAwB,IAE1BxP,OAAK,EALP,SAOE,6CAIN,cAACnV,GAAA,EAAD,CACElB,QAAS4lB,EACTtkB,gBAAiBA,EACjBH,KAAM,MACNjK,OAAQsuB,EACRhkB,aAAcA,EACdlB,QAAS,IAAMulB,GAAwB,SCtWhC,SAASa,IAAiB,qBACvCC,EADuC,aAEvCnZ,EAFuC,0BAGvCS,EAHuC,kBAIvCjb,EAJuC,qBAKvC4V,IAQA,MAAM,sBACJsU,EADI,oBAEJjjB,EAFI,mCAGJuiB,EAHI,cAIJtW,EAJI,QAKJjW,GACEG,qBAAW+V,KACT7D,EAAwB5B,gBAEvBkmB,EAA+BC,GACpC72B,sBACK82B,EAAwBC,GAC7B/2B,oBAAkB,GACdg3B,EACJ/2B,EAAQg3B,mBACRh3B,EAAQ+f,0BACR/f,EAAQwsB,2CACRxsB,EAAQi3B,6BAEJngB,EAAoBC,aAAmB,CAC3CC,YAAW,OAAE2B,QAAF,IAAEA,OAAF,EAAEA,EAAsBlV,WACnCmV,WAAW,IAEP3B,EAAW,OAAG0B,QAAH,IAAGA,OAAH,EAAGA,EAAsB9S,GAAG,GACvCqxB,EAAiB1b,EAAiBD,EAAqB4b,YAE7D,OACE,eAACC,GAAA,EAAD,WACE,eAAC,IAAD,CAAOnpB,UAAU,WAAWC,KAAK,QAAQvD,MAAO,CAAEpC,MAAO,QAAzD,UACGmuB,EAAuB,KACtB,sBACE/rB,MAAO,CACLsB,QAAS,OACTY,eAAgB,gBAChBuU,IAAK,GACLiW,SAAU,QALd,UAQE,cAAC,KAAD,CACEr3B,QAAS+2B,EACTlJ,QAAM,EACNxiB,OAAO,EACPuiB,UAAW,CAAE/H,KAAM,EAAGtd,MAAO,CAAC,MAAO,QAJvC,SAME,cAAC+uB,GAAA,EAAD,CACEC,iBAAgB,OAAEx0B,QAAF,IAAEA,OAAF,EAAEA,EAAmB8C,GAAG,GACxCiE,SAAU6C,YAAc,OACtBqR,QADsB,IACtBA,OADsB,EACtBA,EAA2Bva,YAE7B+zB,yBAA0BjL,EAC1BwB,aAAY,OAAEhrB,QAAF,IAAEA,IAAqBgB,IAAUC,KAAK,GAClD4kB,kBAAiB,OAAEqE,QAAF,IAAEA,IAAyBlpB,IAAUC,KAAK,GAC3DsO,cACED,EACIE,YAAUF,QACV3Q,EAEN+1B,aAAcztB,MAIlB,cAAC,IAAD,CACE6F,KAAK,QACL3B,KAAK,QACLyM,QAAS,IAAMic,GAAiC,GAChDrc,SAAUtE,EAJZ,SAME,gDAKN,gCACE,sBACEtL,MAAO,CACLsB,QAAS,OACTY,eAAgB,gBAChBuU,IAAK,GACLiW,SAAU,QALd,UAQE,cAAC1rB,GAAA,EAAD,CACEC,MACE,oBAAIjB,MAAO,CAAEsB,QAAS,gBAAtB,SACE,iDAGJJ,IACE,wGAGGoL,EAAe,UAASH,IAAsB,UAIpDogB,GACC,cAAC,IAAD,CACEhpB,KAAK,QACLyM,QAAS,IAAMmc,GAA0B,GACzC5b,KAAM,cAAC2V,GAAA,EAAD,IACNlmB,MAAO,CAAEmC,aAAc,QAJzB,SAME,+BACE,8CAKPyQ,EACC,cAACrQ,GAAA,EAAD,CACEjG,OAAQsW,EACRzT,SAAUkU,EACVjU,WAAYhH,EACZiH,oBAAqBA,EACrBmD,kBAAiB,OAACpK,QAAD,IAACA,KAAmBE,GAAGC,MACxCgH,iBAAkB,CAAEwe,UAAW,KAE/B,WAIR,cAACgK,GAAD,CACE3iB,QAAS4mB,EACT1mB,SAAU,IAAM2mB,GAAiC,GACjD3V,YAAa,IAAMvY,OAAOwY,SAASC,WAErC,cAAC+T,GAAD,CACEnlB,QAAS8mB,EACT5mB,SAAU,IAAM6mB,GAA0B,GAC1C9mB,KAAM,IAAM8mB,GAA0B,QCpK/B,SAASY,IAAyB,UAC/CtxB,EAD+C,aAE/CV,IAKA,OAAOyQ,YAA6B,CAClC7W,SAAUkH,IAAeE,aACzBnH,aAAc,yBACdC,KAAM4G,GAAaV,EAAe,CAACU,EAAWV,GAAgB,OCJnD,SAASiyB,IAA8B,QACpD5nB,EADoD,SAEpDE,EAFoD,YAGpDgR,IAMA,MAAM,YACJ6H,EADI,qBAEJ8O,EAFI,oBAGJ5tB,EAHI,qBAIJyT,EAJI,UAKJrX,GACEjG,qBAAW+V,MAERlW,EAASC,GAAcF,sBACvBkf,EAAoBC,GAAyBnf,qBAE9C83B,ECrBD,WACL,MAAM,WAAExb,EAAF,UAAcnc,GAAcC,qBAAWC,MACvC,UAAEgG,GAAcjG,qBAAW+V,KAEjC,MAAO,EAAG4c,OAAO,IAAMvW,KACuC,IAAD,EAA3D,OAAKF,GAAejW,GAAa,OAAClG,QAAD,IAACA,KAAWwG,cAK7CzF,QAAQ62B,IAAI53B,EAAUwG,aAAa,cAC5B2V,EACLnc,EAAUwG,aACV,6BACA,CAACN,EAAW0sB,GACZvW,KATM,OAANA,QAAM,IAANA,GAAA,UAAAA,EAAQC,cAAR,cAAAD,GACOvI,QAAQC,SAAQ,KDcQ8jB,IAC3Br1B,KAAMs1B,GAAmBN,GAAyB,CACxDtxB,YACAV,aAAY,OAAE+X,QAAF,IAAEA,OAAF,EAAEA,EAAsB/X,eA0BtC,MAAMuyB,EAA0BxrB,YAAUurB,EAAgB,CAAEtP,UAAW,IACjEwP,EAAkBjP,aAAgB,CACtCH,YAAaA,EACbI,YAAY,EACZC,QAAQ,IAGJgP,EAAoBlP,aAAgB,CACxCH,YAAaA,EACbI,YAAY,EACZC,QAAQ,IAGV,OACE,cAACpI,EAAA,EAAD,CACE1V,MAAO,sFAA4B6sB,KACnCnoB,QAASA,EACTC,KAAM,IAxCVnP,iBACEZ,GAAW,SAEgB43B,EACzB,GACA,CACErb,OAAQ,KACN0C,GAAsB,IAExB+B,YAAa,KACXhhB,GAAW,GACXif,GAAsB,GACX,OAAX+B,QAAW,IAAXA,YAMJhhB,GAAW,GACXif,GAAsB,IAqBVkZ,GACZloB,OAAQ,uDAAegoB,IACvBrE,kBAAmB,uCACnBtM,eAAgBvnB,EAChBif,mBAAoBA,EACpBhP,SAAUA,EACVwU,cAAe,CAAElK,WAAU,OAACyd,QAAD,IAACA,KAAgBnyB,GAAG,KAC/C0C,MAAO,IACPif,UAAU,EAXZ,SAaE,eAAC,IAAD,CAAOvZ,UAAU,WAAWtD,MAAO,CAAEpC,MAAO,QAAU2F,KAAK,QAA3D,UACE,qBAAKvD,MAAO,CAAEsB,QAAS,OAAQY,eAAgB,iBAA/C,SACE,+HAG+BqrB,EAH/B,wBAGKD,GAHL,cAEE,8BAKJ,gCACE,6BACE,iFAAQE,OAGwB,KAAb,OAApBP,QAAoB,IAApBA,OAAA,EAAAA,EAAsB91B,QACrB,4BACE,wJAKA,KAEJ,cAACoL,GAAA,EAAD,CACEjG,OAAM,OAAE2wB,QAAF,IAAEA,IAAwB,GAChC5tB,oBAAqBA,EACrBD,WAAYiuB,EACZ/tB,YAAaiuB,EACb/qB,iBAAe,EACfjD,iBAAkB,CAAEwe,UAAW,a,cEtGpC,MAAM2P,GAA2B,EACtCtoB,UACAC,OACAC,eAKK,IAAD,IACJ,MAAM,qBAAE2nB,EAAF,qBAAwBna,EAAxB,aAA8Cra,GAClDjD,qBAAW+V,KACPxQ,EAAY,OAAG+X,QAAH,IAAGA,OAAH,EAAGA,EAAsB/X,aAErC0vB,EAAmBrB,GAAoB,CAC3CjrB,OAAM,OAAE1F,QAAF,IAAEA,GAAF,UAAEA,EAAciD,qBAAhB,aAAE,EAA6BmM,cAGhC8lB,EAA6BC,GAClCx4B,mBAAkB,KACbs1B,EAAcC,GAAmBv1B,oBAAkB,GAE1D6Q,qBAAU,KACHgnB,GACLW,EAA+BX,KAC9B,CAACA,IAEJ,MAOMY,EAPkB7mB,mBACtB,mCACE2mB,QADF,IACEA,OADF,EACEA,EACIrvB,KAAIzG,GAAK2E,YAA0B3E,EAAEoE,WACtClC,QAAO,CAAChE,EAAGC,IAAMD,EAAIC,GAAG,UAH7B,QAGmC,IACnC,CAAC23B,IAE+C,IAE5CG,EAAwBn4B,uBAAYO,UACxC,GAAI23B,EAAyB,OAC7BlD,GAAgB,SACCF,EACf,CACE7U,cAAe,CACbS,MAAOrB,IACP1Y,OAAM,OAAEqxB,QAAF,IAAEA,IAA+B,KAG3C,CACErX,YAAa,KACXqU,GAAgB,GAChBtlB,KAEFimB,QAAS,IAAMX,GAAgB,OAIjChP,aAAsB,gCACtBgP,GAAgB,MAEjB,CACDgD,EACAtoB,EACAolB,EACAoD,IAGF,OACE,eAAC,KAAD,CACEzoB,QAASA,EACTwX,eAAgB8N,EAChBhqB,MAAO,yCACP6E,OAAQ,gCACR0U,WAAYyQ,EAAe,gBAAW,iBACtC9sB,MAAO,IACPyH,KAAM,IAAMyoB,IACZxoB,SAAUA,EACVwU,cAAe,CAAElK,SAAUie,GAT7B,UAWE,cAACE,GAAA,EAAD,CAAS/tB,MAAO,CAAEmC,aAAc,QAAhC,SACE,oGAKF,cAAC,IAAD,CAAMkB,OAAO,WAAb,SACE,cAAC,KAAU2qB,kBAAX,CACEC,KAAMN,EAA4BrvB,IAAIO,MACtCqvB,cAAeD,GACbL,EAA+BK,EAAK3vB,IAAIG,OAE1CgF,cAAe,CACbxC,MAAO,oDACPoD,MACE,gIAMJtJ,aAAY,iBAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAcjC,kBAAhB,QAA8B,UCtFrC,SAASq1B,IAAyB,qBAC/CpC,EAD+C,qBAE/CkB,EAF+C,aAG/ClyB,IAMA,MAAM,YACJojB,EADI,aAEJuF,EAFI,oBAGJrkB,EAHI,UAIJ5D,EAJI,cAKJ6P,GACE9V,qBAAW+V,MAEb/L,OAAO,OAAEC,IACPjK,qBAAWkK,MAGb0uB,EACAC,GACEj5B,sBACGk5B,EAAiCC,GACtCn5B,oBAAkB,IACZ2C,KAAMs1B,EAAgBh4B,QAASm5B,GACrCzB,GAAyB,CACvBtxB,YACAV,aAAcA,IAEZ0zB,EAAgB5d,EAAiBD,EAAqB4b,YAEtD/O,EAAkC,CACtCxd,SAAU,QACVQ,WAAY,IACZ+O,OAAQ,UACRtP,MAAOT,EAAOU,KAAKC,WAGfsuB,EAAapQ,aAAgB,CACjCH,cACAI,YAAY,EACZC,QAAQ,IAGJmQ,EAAqBrQ,aAAgB,CACzCH,cACAI,YAAY,EACZC,QAAQ,IAGV,OACE,eAACiO,GAAA,EAAD,WACE,eAAC,IAAD,CAAOnpB,UAAU,WAAWC,KAAK,QAAQvD,MAAO,CAAEpC,MAAO,QAAzD,UACGmuB,EAAuB,KACtB,sBACE/rB,MAAO,CACLsB,QAAS,OACTY,eAAgB,gBAChBwqB,SAAU,OACVjW,IAAK,QALT,UAQE,sBAAKzW,MAAO,CAAEoQ,YAAa,QAA3B,UACE,cAAC,KAAD,CACE8S,QAAM,EACN7tB,SAAUiW,GAAiBkjB,EAC3BvL,UAAW,CAAE/H,KAAM,EAAGtd,MAAO,IAC7B8C,OAAO,EACPV,MAAO,CAAEsB,QAAS,UALpB,SAOE,sBACEtB,MAAO,CACLC,SAAU,OACVQ,WAAY,KAHhB,SAMGqB,YAAUurB,EAAgB,CAAEtP,UAAW,QAEhC,IACZ,cAAC/c,GAAA,EAAD,CACEhB,MAAO,IACFyd,EACHmK,WAAY,UAEd3mB,MACE,sBAAMjB,MAAO,CAAE4uB,cAAe,aAA9B,SACE,iEAAQF,OAGZxtB,IACE,6IAMHwiB,GAAgBA,IAAiB/pB,KAChC,sBAAKqG,MAAOyd,EAAZ,UACGkR,EADH,qBACyC,IACvC,cAACxtB,GAAA,EAAD,CAAkBzK,QAASgtB,OAE3B,QAEN,cAAC,IAAD,CACExe,KAAK,QACL3B,KAAK,QACLyM,QAAS,IAAMqe,GAAwC,GACvDze,SAAUtE,EAJZ,SAME,mEAAmBojB,UAKzB,gCACE,sBACE1uB,MAAO,CACLsB,QAAS,OACTY,eAAgB,gBAChBuU,IAAK,GACLiW,SAAU,QALd,UAQE,cAAC1rB,GAAA,EAAD,CACEC,MACE,qBAAIjB,MAAO,CAAEsB,QAAS,gBAAtB,UACE,iEAAiBotB,KADnB,KAEG9a,YAAmB7Y,GAFtB,QAKFmG,IACE,kMAOHutB,GAAa,OAAI1zB,QAAJ,IAAIA,KAAcG,GAAG,GACjC,cAAC,IAAD,CACEqI,KAAK,QACLyM,QAAS,IAAMue,GAAmC,GAClDhe,KAAM,cAAC2V,GAAA,EAAD,IACNlmB,MAAO,CAAEmC,aAAc,QAJzB,SAME,+BACE,8CAGF,QAEL8qB,EACC,cAAC1qB,GAAA,EAAD,CACEjG,OAAQ2wB,EACR5tB,oBAAqBA,EACrBD,gBAAYrI,EACZgE,aAAcF,WAAW+Y,YAAmB7Y,MAE5C,WAIR,cAACiyB,GAAD,CACE5nB,QAASgpB,EACT9oB,SAAU,IAAM+oB,GAAwC,GACxD/X,YAAa,IAAMvY,OAAOwY,SAASC,WAErC,cAACkX,GAAD,CACEtoB,QAASkpB,EACTjpB,KAAM,IAAMkpB,GAAmC,GAC/CjpB,SAAU,IAAMipB,GAAmC,QC1L5C,SAASM,IAAoB,WAC1CC,IAIA,MAAM,aACJr2B,EADI,aAEJma,EAFI,0BAGJS,EAHI,kBAIJjb,EAJI,qBAKJ60B,EALI,qBAMJna,GACEtd,qBAAW+V,KAEf,IAAK9S,EAAc,OAAO,cAACs2B,GAAA,EAAD,IAE1B,MAAMh0B,EAAY,OAAG+X,QAAH,IAAGA,OAAH,EAAGA,EAAsB/X,aAE3C,OACE,gCACE,cAAC0xB,GAAA,EAAD,UACE,cAACuC,GAAA,EAAD,CACEre,mBAAoBlY,EAAaua,OACjCic,oBACE,cAACrI,GAAD,CACEnuB,aAAcA,EACdqa,qBAAsBA,EACtB1a,kBAAmBA,EACnBib,0BAA2BA,IAG/B6b,4BAA6Bz2B,EAAaC,SAC1Cy2B,sBAAuB12B,EAAaya,MACpCkc,yBAAyB,EACzBC,sBAAuBl0B,YAAwB1C,GAC/C62B,OAAQR,MAIZ,cAAChD,GAAD,CACElZ,aAAcA,EACdS,0BAA2BA,EAC3Bjb,kBAAmBA,EACnB4V,qBAAsBvV,EAAaC,WAErC,cAACy1B,GAAD,CACElB,qBAAsBA,EACtBlyB,aAAcA,O,4GCzCf,SAASw0B,IAAkC,QAChDnqB,EADgD,SAEhDrC,IAKA,MAAOysB,GAAe1oB,sBAEf2oB,EAAoBC,GAAyBt6B,sBAC9C,gBAAEiwB,GAAoB7vB,qBAAW+V,MAEjC,OAAE9L,GAAWjK,qBAAWkK,KAAcF,MAEtCmwB,EAAyBle,IAmC/B,MAAMme,EAAmBj6B,uBAAY,KAAO,IAAD,gBACzC65B,EAAY1rB,eAAe,CACzB9K,KAAI,iBAAEqsB,QAAF,IAAEA,OAAF,EAAEA,EAAiBrsB,YAAnB,QAA2B,GAC/B62B,QAAO,iBAAExK,QAAF,IAAEA,OAAF,EAAEA,EAAiBwK,eAAnB,QAA8B,GACrCnrB,QAAO,iBAAE2gB,QAAF,IAAEA,OAAF,EAAEA,EAAiB3gB,eAAnB,QAA8B,GACrC2V,YAAW,iBAAEgL,QAAF,IAAEA,OAAF,EAAEA,EAAiBhL,mBAAnB,QAAkC,GAC7CyV,QAAO,iBAAEzK,QAAF,IAAEA,OAAF,EAAEA,EAAiByK,eAAnB,QAA8B,GACrCC,QAAO,iBAAE1K,QAAF,IAAEA,OAAF,EAAEA,EAAiB0K,eAAnB,QAA8B,GACrCC,UAAS,iBAAE3K,QAAF,IAAEA,OAAF,EAAEA,EAAiB2K,iBAAnB,QAAgC,GACzCC,cAAa,iBAAE5K,QAAF,IAAEA,OAAF,EAAEA,EAAiB4K,qBAAnB,QAAoC,OAElD,QACD5K,QADC,IACDA,OADC,EACDA,EAAiBrsB,KADhB,OAEDqsB,QAFC,IAEDA,OAFC,EAEDA,EAAiBwK,QAFhB,OAGDxK,QAHC,IAGDA,OAHC,EAGDA,EAAiB3gB,QAHhB,OAID2gB,QAJC,IAIDA,OAJC,EAIDA,EAAiBhL,YAJhB,OAKDgL,QALC,IAKDA,OALC,EAKDA,EAAiByK,QALhB,OAMDzK,QANC,IAMDA,OANC,EAMDA,EAAiB0K,QANhB,OAOD1K,QAPC,IAODA,OAPC,EAODA,EAAiB4K,cAPhB,OAQD5K,QARC,IAQDA,OARC,EAQDA,EAAiB2K,UACjBR,IAQF,OAJAvpB,qBAAU,KACR2pB,MACC,CAACA,IAGF,eAAC,KAAD,CAAQxqB,QAASA,KAAa1H,KAAagI,QAAS3C,EAApD,UACE,6BACE,wDAEF,mBAAG/C,MAAO,CAAEE,MAAOT,EAAOU,KAAK2J,SAA/B,SACE,iGAIF,uBACA,cAACjH,GAAA,EAAD,CACEC,KAAM0sB,EACNzsB,SA1EN7M,iBACEw5B,GAAsB,GAEtB,MAAM9K,EAAS4K,EAAYhJ,gBAAe,GAEpCC,QAAyBC,aAAsB,CACnD1tB,KAAM4rB,EAAO5rB,KACbqhB,YAAauK,EAAOvK,YACpB3V,QAASkgB,EAAOlgB,QAChBmrB,QAASjL,EAAOiL,QAChBC,QAASlL,EAAOkL,QAChBC,QAASnL,EAAOmL,QAChBC,UAAWpL,EAAOoL,UAAUE,UAAU,EAAGC,MACzCF,cAAerL,EAAOqL,gBAGnBxJ,EAAiBE,SAKtBgJ,EACE,CAAEhe,IAAK8U,EAAiBE,UACxB,CACE9U,OAAQ,IAAM6d,GAAsB,GACpCpZ,YAAa,KACPvT,GAAUA,IACdysB,EAAY/mB,iBAVhBinB,GAAsB,IA0DpB1sB,mBAAiB,EACjB3N,QAASo6B,OCpGF,SAASW,KACtB,MAAM,aAAE33B,GAAiBjD,qBAAW+V,KACpC,IAAK9S,EAAc,OAAO,KAE1B,MAAM43B,EAAkB53B,EAAaua,OAAOla,WAEtCiuB,EAAiBrsB,aAA2BjC,EAAakC,QACzD21B,EAAuBvJ,EAAejZ,gBAEtCpV,EAAWD,EAAaC,SAASI,WAEjCy3B,EAAqBC,aAAa/3B,EAAaya,MAAM2R,IAAInsB,IAI/D,OAAKA,GAAyB,IAAbA,OAQmB3B,IAAzBu5B,EAEP,sGAKOA,EAAuBC,EAE9B,+KAEWxJ,EAAe/tB,KAF1B,EAKKoT,aAAmB,CAClBC,YAAajT,IAAUC,KAAKi3B,GAC5BriB,WAAW,KAPjB,cAEE,2BAFF,EAIE,8BAWF,uKAE0BoiB,EAAkB,EAF5C,gBAGmBA,GAHnB,cAEE,8BA/BF,kH,cCtBC,MAAMI,GAA6B,EACxCC,qBACAC,WAKA,MAAM,2BACJC,EADI,mCAEJC,EAFI,4BAGJC,EAHI,wBAIJC,EAJI,6BAKJC,GACEN,EACEO,ECJD,WAOL,MAAM,WAAEvf,EAAF,UAAcnc,GAAcC,qBAAWC,MACvC,UAAEgG,GAAcjG,qBAAW+V,KAEjC,MAAO,EAEHwH,mBACAD,uBACAla,wBACAgd,gBAAgB,GAChBC,qBAnBiC,KAqBnCjE,KAE4D,IAAD,EAA3D,OAAKF,GAAejW,GAAa,OAAClG,QAAD,IAACA,KAAWwG,aAKtC2V,EACLnc,EAAUwG,aACV,6BACA,CACEN,EACAsX,EACAD,EACA+C,EACAD,EACAhd,EApCa,IAuCfgZ,IAhBM,OAANA,QAAM,IAANA,GAAA,UAAAA,EAAQC,cAAR,cAAAD,GACOvI,QAAQC,SAAQ,KDlBS4nB,IAC7BC,EAAsBC,GAC3Bh8B,oBAAkB,GAmDpB,MAAO,CAAEi8B,mBAAoBF,EAAsBG,wBAjDnB37B,uBAAYO,UAE1C,GADAk7B,GAAwB,KAGpBL,GACAD,GACAE,GAIF,MADAI,GAAwB,GAClB,IAAIxV,MAAM,kCAGSqV,EACzB,CACEle,iBAAkBge,EAClBje,qBAAsBge,EACtBl4B,sBAAuBo4B,EACvBpb,cAAe,CACbgb,EACAC,IAGJ,CACEhf,SACEvb,QAAQC,KACN,+DAGJ+f,cACE8a,GAAwB,GACxBT,QAMJS,GAAwB,KAEzB,CACDJ,EACAD,EACAD,EACAF,EACAC,EACAF,EACAM,M,cE7CJ,SAASM,IAAkB,MACzB7wB,EADyB,sBAEzB8wB,EAFyB,QAGzBxhB,IAMA,MAAM,OAAEvQ,EAAF,MAAUyP,GAAU1Z,qBAAWkK,KAAcF,MAEnD,OACE,sBACEQ,MAAO,CACLsB,QAAS,OACTY,eAAgB,gBAChBsN,OAAQ,UACRC,QAAS,GACThP,WAAY,IACZqP,aAAcZ,EAAM4E,GACpBpE,OACE,cACC8hB,EACG/xB,EAAOkQ,OAAO8hB,OAAO3nB,QACrBrK,EAAOkQ,OAAO8hB,OAAOrxB,YAE7B4P,QAASA,EAdX,UAgBE,8BAAMtP,IACN,8BACE,cAACgxB,GAAA,EAAD,SAQJ,IAOW,SAASC,IAA0B,QAChDvsB,EACAC,KAAMsrB,EAF0C,SAGhDrrB,EAHgD,mBAIhDssB,IAQA,MAAMrb,EAAWsb,cACXC,EAAS,IAAIC,gBAAgBxb,EAAS8T,QACtC2H,EAA8B75B,QAAQ25B,EAAOG,IAAI,uBAEjD,mBAAEC,GC1C4B9sB,KAAsB,IAAD,IACzD,MAAO8sB,EAAoBC,GAAyB/8B,sBAU9C,UAAEG,GAAcC,qBAAWC,KAC3B28B,EAAWC,gBAEX,UACJ52B,EADI,gBAEJyZ,EAFI,aAGJzc,EAHI,aAIJma,EAJI,qBAKJqa,EALI,kBAMJ70B,EANI,0BAOJib,GACE7d,qBAAW+V,MAEPxT,KAAMu6B,GAA+B9gB,EAA6B,CACxE/V,eAGK82B,GAAD,OAAuBD,QAAvB,IAAuBA,IAA8B,IACnDv6B,KAAMy6B,GAAuBv0B,YAAiB,CACpDxC,YACAyC,WAAY2W,IACZ1W,OAAM,OAAEo0B,QAAF,IAAEA,GAAF,UAAEA,EAAoB72B,qBAAtB,aAAE,EAAmCmM,cAGrC9P,KAAM06B,GAA+Bx0B,YAAiB,CAC5DxC,YACAyC,WAAY8W,IACZ7W,OAAM,OAAEo0B,QAAF,IAAEA,GAAF,UAAEA,EAAoB72B,qBAAtB,aAAE,EAAmCmM,cAGrC9P,KAAM26B,GAAgCl3B,YAA4B,CACxEC,YACAC,cAAa,OAAE62B,QAAF,IAAEA,OAAF,EAAEA,EAAoB72B,cAAcmM,WACjDlM,SAAUuZ,KAGLyd,EAAyBC,GAA1B,OACJF,QADI,IACJA,IAA+B,GAE3BG,EAA0C,OAAlBN,QAAkB,IAAlBA,KAAoBvf,OAAO9X,GAAG,GACxDq3B,EACA95B,EAEEq6B,EAA0C,OAAlBP,QAAkB,IAAlBA,KAAoBvf,OAAO9X,GAAG,GACxDs3B,EACA5f,EAEEmgB,EAAkD,OAAlBR,QAAkB,IAAlBA,KAAoBvf,OAAO9X,GAAG,GAChEu3B,EACAxF,EAEJ,IAAI+F,EAA6B56B,EACR,OAArBy6B,QAAqB,IAArBA,KAAuBn6B,SAASwC,GAAG,IAAMy3B,IAC3CK,EAA6BL,GAG/B,IAAIM,EAAqC5f,EAmGzC,OAjGuB,OAArBwf,QAAqB,IAArBA,KAAuBn6B,SAASwC,GAAG,IACnC03B,IAEAK,EAAqCL,GAIvC3sB,qBAAU,KACR,IAAKb,IAAYytB,EAAuB,OAGxC,IAAI36B,EAEJ,GAAI86B,EAA4B,CAAC,IAAD,MAC9B,MAAM3f,EAAyB,oBAC7B4f,SAD6B,aAC7B,EAAoCn6B,kBADP,QACqBuoB,IAEpDnpB,EAAuB,CACrByD,SAAQ,iBAAEpG,QAAF,IAAEA,OAAF,EAAEA,EAAW4Q,qBAAqBzP,eAAlC,QAA6C,GACrD8e,MAAOja,IACPnD,kBAAmB0C,YAAQk4B,GAC3B3f,0BACEA,IAA8B+N,IAC1BC,IAAgBxZ,WAChBwL,EAA0BxL,WAChC4N,kBAAmB,IACnBC,0BAA2B,KAG/B,MAAMsb,EAA+B94B,EACjC,CAACA,GACD,GACJk6B,EACEc,KAAwBC,yBACtBj7B,EAAuB,CAACA,GAAwB,KAKpD,MAAM64B,EAA0BqC,aAC9BP,GAEFT,EACEc,KAAwBG,oBACtBD,aAA4BP,KAKhC,MAAM/B,EAA8B+B,EAAsB74B,SACtDs5B,aACEz5B,YAA6Bg5B,EAAsB74B,WAErDu5B,KACJ,OAAIV,QAAJ,IAAIA,KAAuB74B,UACzBo4B,EACEc,KAAwBM,wBACtBF,aACEz5B,YAA6Bg5B,EAAsB74B,aAO3Do4B,EACEc,KAAwBO,gBAAxB,OAAwCX,QAAxC,IAAwCA,IAAyB,KAInEV,EACEc,KAAwBQ,wBAAxB,OACEX,QADF,IACEA,IAAiC,KAIrCZ,EAAsB,CACpBv5B,sBAAuBo4B,EACvBje,iBAAkBge,EAClBje,qBAAsBge,EACtB6C,oBAAqB,CACnBA,oBAAmB,OAAEb,QAAF,IAAEA,IAAyB,GAC9Cc,4BAA2B,OAAEb,QAAF,IAAEA,IAAiC,QAGjE,CACDx9B,EACAs9B,EACAC,EACAC,EACAC,EACAC,EACAx6B,EACA2M,EACAgtB,IAGK,CAAEF,uBD5HsB2B,CAAsBzuB,GAC/CsrB,EE9D6B,MAEnC,MACEiD,oBAAqB/C,EACrBgD,4BAA6B/C,GAC3BiD,cAAeC,GAASA,EAAMC,mBAMlC,MAAO,CACLpD,6BACAC,qCACAC,4BARkCmD,eASlClD,wBAR8BmD,eAS9BlD,6BAPAmD,iBFqDyBC,IACrB,uBACJC,EADI,6BAEJC,EAFI,2BAGJC,EAHI,2BAIJC,GGhFqC,GACvC9D,qBACAwB,yBAKA,MAAM,2BACJtB,EADI,mCAEJC,EAFI,4BAGJC,EAHI,wBAIJC,EAJI,6BAKJC,GACEN,EAgJJ,MAAO,CACL2D,uBA/I6BrtB,mBAAQ,KACrC,IAAKkrB,EAEH,OAAO,EAET,MAAMuC,EAAoC,CACxC77B,sBAAuBo4B,EAA6B1yB,IAClDo2B,MAEF5hB,qBAAsBwgB,aACpBxC,GAEF/d,iBAAkBqgB,aAA4BrC,GAC9C4C,oBAAqB,CACnBA,oBAAqB/C,EAA2Bt0B,OAChDs3B,4BAA6B/C,EAAmCv0B,SAGpE,OAAQkC,mBAAQ0zB,EAAoBuC,KACnC,CACDzD,EACAD,EACAD,EACAF,EACAC,EACAqB,IAuHAoC,6BApHmCttB,mBAAQ,KAAO,IAAD,QACjD,MAAM+L,EAAmBqgB,aACvBrC,GAEIn4B,EAAwBo4B,EAA6B75B,OACvDu9B,aAA6B,OAAC1D,QAAD,IAACA,OAAD,EAACA,EAA+B,SAC7Dj6B,EACE48B,EAAsB/C,EAA2Bt0B,OAEvD,IAAK1D,IAA0Bs5B,EAC7B,OAAO,EAET,MAAMyC,EACJ5hB,EAAiBra,WAAaw5B,EAAmBnf,iBAAiBra,SAC9Dk8B,EACJh8B,EAAsBR,qBAAtB,UACA85B,EAAmBt5B,6BADnB,aACA,EAA2C,GAAGR,mBAC1Cy8B,EACJj8B,EAAsBya,6BAAtB,UACA6e,EAAmBt5B,6BADnB,aACA,EAA2C,GAAGya,2BAC1CyhB,GAA8Bt2B,mBAClCm1B,EADyC,oBAEzCzB,EAAmByB,2BAFsB,aAEzC,EAAwCA,2BAFC,QAEsB,IAEjE,OACEgB,GACAC,GACAC,GACAC,IAED,CACD9D,EACAD,EACAH,EAA2Bt0B,OAC3B41B,IAmFAqC,2BAhFiCvtB,mBAAQ,KAAO,IAAD,EAC/C,MAAM+L,EAAmBqgB,aACvBrC,GAEIje,EAAuBwgB,aAC3BxC,GAEIl4B,EAAwBo4B,EAA6B75B,OACvDu9B,aAA6B,OAAC1D,QAAD,IAACA,OAAD,EAACA,EAA+B,SAC7Dj6B,EACE68B,EACJ/C,EAAmCv0B,OAErC,IAAK1D,IAA0Bs5B,EAC7B,OAAO,EAGT,MAAM6C,EACJjiB,EAAqB/X,eACrBm3B,EAAmBpf,qBAAqB/X,aACpCi6B,GAAsCx2B,mBAC1Co1B,EADiD,UAEjD1B,EAAmByB,oBAAoBC,mCAFU,QAEqB,IAElEqB,EACJliB,EAAiB5F,eACjB+kB,EAAmBnf,iBAAiB5F,aAChC+nB,EACJpiB,EAAqBvF,iBACrB2kB,EAAmBpf,qBAAqBvF,eAE1C,OACEwnB,GACAC,GACAC,GACAC,IAED,CACDlE,EACAD,EACAD,EACAD,EAAmCv0B,OACnC41B,IAuCAsC,2BApCiCxtB,mBAAQ,KACzC,MAAM+L,EAAmBqgB,aACvBrC,GAEIje,EAAuBwgB,aAC3BxC,GAMF,KAJ8BE,EAA6B75B,OACvDu9B,aAA6B,OAAC1D,QAAD,IAACA,OAAD,EAACA,EAA+B,SAC7Dj6B,KAE2Bm7B,EAC7B,OAAO,EAGT,MAAMiD,EACJriB,EAAqBnF,WACrBukB,EAAmBpf,qBAAqBnF,SACpCynB,EACJtiB,EAAqB9X,eACrBk3B,EAAmBpf,qBAAqB9X,aACpCq6B,EACJtiB,EAAiBpY,SAAWu3B,EAAmBnf,iBAAiBpY,OAElE,OAAOw6B,GAAwBC,GAAuBC,IACrD,CACDrE,EACAD,EACAD,EACAoB,MHzEEoD,CAA0B,CAC5B5E,qBACAwB,wBAEI,mBAAEb,EAAF,wBAAsBC,GAC1Bb,GAA2B,CAAEC,qBAAoBC,UAE5C4E,EAA4BC,GACjCpgC,oBAAkB,IACbqgC,EAA6BC,GAClCtgC,oBAAkB,IACbugC,EAAsBC,GAA2BxgC,mBACtD48B,IAEK6D,EAAoBC,GAAyB1gC,oBAAkB,IAC/D2gC,EAAoBC,GAAyB5gC,oBAAkB,GAEhE6gC,EAAyB,KAC7BL,GAAwB,GACxBE,GAAsB,GACtBE,GAAsB,KAGjBE,EAA6BprB,GAClC1V,oBAAkB,GAGd+gC,EAA2B,IAAMrrB,GAA8B,GAO/DsrB,EAAyBzgC,uBAAY,KACzC,IAAK0+B,EACH,OAAO/uB,IAV2BwF,GAA8B,KAajE,CAACupB,EAAwB/uB,IAE5B,OACE,eAAC,KAAD,CACE5E,MAAO,gDACP0E,QAASA,EACTC,KAAMisB,EACNhsB,SAAU8wB,EACV7wB,OAAQ,6CACRuU,cAAe,CACblK,UAAWykB,EACXr0B,MAAO,CAAEmC,aAAc,SAEzBya,eAAgByU,EAChBzzB,MAAO,IACPoC,MAAO,CAAEugB,cAAe,GAAIjQ,WAAY,IACxCuM,UAAQ,EACRrX,gBAAc,EAdhB,UAgBE,eAAC,IAAD,CACElC,UAAU,WACVC,KAAK,SACLvD,MAAO,CAAEpC,MAAO,OAAQuE,aAAc,IAHxC,WAKIyvB,GACA,qCACE,oBAAI5xB,MAAO,CAAEmC,aAAc,GAA3B,SACE,iDAEF,4BACE,yFAMJyvB,GACA,cAACL,GAAD,CACEC,uBAAuB,EACvB9wB,MAAO,yBACPsP,QAAS,IAAMwlB,GAA8B,MAG/C5D,GACA,cAACL,GAAD,CACEC,uBAAuB,EACvB9wB,MAAO,wBACPsP,QAAS,IAAM0lB,GAA+B,KAIlD,cAAC,KAAD,IAEA,oBAAI11B,MAAO,CAAEmC,aAAc,GAA3B,SACE,gEAEF,4BACE,cAACiuB,GAAD,MAEF,cAACmB,GAAD,CACE7wB,MAAO,mDACP8wB,sBAAuB8C,EACvBtkB,QAAS,IAAM4lB,GAAwB,KAEzC,cAACrE,GAAD,CACE7wB,MAAO,gBACP8wB,sBAAuB+C,EACvBvkB,QAAS,IAAM8lB,GAAsB,KAEvC,cAACvE,GAAD,CACE7wB,MAAO,gBACP8wB,sBAAuBgD,EACvBxkB,QAAS,IAAMgmB,GAAsB,QAGzC,cAACrjB,EAAD,CACEC,aAAc8d,EAAmBE,2BAA2Bt0B,OAC5DuW,cACE6d,EAAmBG,mCAAmCv0B,OAExDwW,qBAAsB4d,EAAmBI,4BACzC/d,iBAAkB2d,EAAmBK,wBACrCn4B,sBAAuB83B,EAAmBM,+BAE3CY,EAAqB,KACpB,cAACrC,GAAD,CACEnqB,QAASqwB,EACT1yB,SAAU,IAAM2yB,GAA+B,KAGlD9D,EAAqB,KACpB,cAAC1a,GAAD,CACE9R,QAASmwB,EACTxyB,SAAU,IAAMyyB,GAA8B,KAGlD,cAACa,GAAA,EAAD,CACEjxB,QAASuwB,EACTjwB,QAASuwB,IAEX,cAACK,GAAA,EAAD,CACElxB,QAASywB,EACTnwB,QAASuwB,IAEX,cAACM,GAAA,EAAD,CACEnxB,QAAS2wB,EACTrwB,QAASuwB,IAEX,cAAC9wB,GAAA,EAAD,CACEC,QAAS8wB,EACT7wB,KAxHkC,KACtC8wB,IACA7wB,KAuHIA,SAAU6wB,OItNH,SAASK,IAAiC,mBACvD5E,EADuD,cAEvD6E,IAIE,IAAD,MAED,MAAMlgB,EAAWsb,cACXC,EAAS,IAAIC,gBAAgBxb,EAAS8T,QACtCqM,EAAiCv+B,QACrC25B,EAAOG,IAAI,sBAGP/H,EAAUC,cAEViI,EAAWuE,gBACX,UAAEl7B,EAAF,aAAahD,EAAb,gBAA2Byc,GAC/B1f,qBAAW+V,MAENqrB,EAAyBC,GAC9BzhC,oBAAkB,GAEd0hC,EAAgBC,mBAQtB,SAASC,IACPF,EAAcrsB,QAAUwsB,eACxBJ,GAA2B,GARzBH,QAA4D3/B,IAA1B+/B,EAAcrsB,UAElDyf,EAAQgN,QAAQt2B,YAAe,CAAEnF,eACjCu7B,KAcF,MAAQj/B,KAAMu6B,GAA+B9gB,EAA6B,CACxE/V,eAGK82B,GAAD,OAAuBD,QAAvB,IAAuBA,IAA8B,GAE3D,IAAIO,EAGFA,EADE,OAACp6B,QAAD,IAACA,MAAcC,UAAf,OAA2BD,QAA3B,IAA2BA,KAAcC,SAASJ,GAAG,GAC/BG,EAEA85B,EAG1B,MAAQx6B,KAAM26B,GAAgCl3B,YAA4B,CACxEC,YACAC,cAAa,UAAEm3B,SAAF,aAAE,EAAuBn3B,cAAcmM,WACpDlM,SAAUuZ,KAELyd,EAAyBC,GAA1B,OACJF,QADI,IACJA,IAA+B,IAEzB36B,KAAMy6B,GAAuBv0B,YAAiB,CACpDxC,YACAyC,WAAY2W,IACZ1W,OAAM,UAAE00B,SAAF,iBAAE,EAAuBn3B,qBAAzB,aAAE,EAAsCmM,aAoChD,OAhCA5B,qBAAU,KAAO,IAAD,EAauB,GAZjCysB,IACFN,EACEc,KAAwBvsB,qBACtB7L,YAAQ63B,KAGZP,EACEc,KAAwBiE,6BACtBvE,EAAgC95B,WAAW+O,cAIjD,UAAIgrB,SAAJ,OAAI,EAAuBn6B,WACzB05B,EACEc,KAAwBkE,YAAxB,UACEvE,SADF,aACE,EAAuBn6B,SAASI,WAAW+O,aAI7C2qB,GACFJ,EAASc,KAAwBO,gBAAgBjB,MAElD,CACDE,EACAN,EACAS,EACAF,EACAC,EACAJ,IAIA,sBAAKxyB,MAAO,CAAE0d,UAAW,SAAzB,UACG+Y,EACCA,EAAcO,GAEd,cAAC,KAAD,CACEt2B,MAAO,kDACP/C,UAAU,SAFZ,SAIE,cAAC,IAAD,CACEqS,QAASgnB,EACTzmB,KAAM,cAAC2V,GAAA,EAAD,IACNhhB,KAAK,WAIV4xB,EAAcrsB,SACb,cAAC,KAAD,CAAU4sB,MAAOP,EAAcrsB,QAA/B,SACE,cAACknB,GAAD,CACEvsB,QAASwxB,EACTvxB,KAvFV,WACEwxB,GAA2B,GAC3B94B,OAAOwY,SAASC,UAsFRlR,SAAU,IAAMuxB,GAA2B,GAC3CjF,mBAAoBA,SCrGzB,IAAK0F,I,SAAAA,O,mBAAAA,I,uBAAAA,I,oBAAAA,Q,KC3BZ,MAAMC,GAA0B,KAK9B,MAAM,UAAE97B,EAAF,aAAahD,GAAiBjD,qBAAW+V,MAEvCxT,KAAMy/B,GCvBT,UAAgD,UACrD/7B,IAIA,OAAO/G,YAEL,CACAC,SAAUkH,IAAeE,aACzBnH,aAAc,iCACdC,KAAM4G,EAAY,CAACA,GAAa,ODchCg8B,CAAuC,CACrCh8B,eAGFi8B,EACAC,EACAC,GAHI,OAIFJ,QAJE,IAIFA,IAAwC,GAEtCK,EACJH,GACAj/B,GACAA,EAAaua,OAAO1a,GAAGo/B,EAA6B1kB,SAE9Cjb,KAAMu6B,GAA+B9gB,EAA6B,CACxE/V,UAAWo8B,EAA8Bp8B,OAAY1E,KAEhDw7B,EAAoBuF,GAArB,OACJxF,QADI,IACJA,IAA8B,GAE1ByF,EACJH,IAA4CN,GAAYU,OAE1D,OACGH,GAA+BE,IAChCxF,EAEO,CAACA,EAAoBuF,GAGvB,CACLJ,EACAC,EACAC,IAIW,SAASK,IAAqB,WAC3CnJ,IAGE,IAAD,IACD,MAAM,UAAErzB,EAAF,gBAAayZ,GAAoB1f,qBAAW+V,MAE3C2sB,EAAsBC,EAA8BC,GACzDb,MAEMx/B,KAAMy6B,GAAuBv0B,YAAiB,CACpDxC,YACAyC,WAAY2W,IACZ1W,OAAM,OAAE+5B,QAAF,IAAEA,GAAF,UAAEA,EAAsBx8B,qBAAxB,aAAE,EAAqCmM,cAGvC9P,KAAM06B,GAA+Bx0B,YAAiB,CAC5DxC,YACAyC,WAAY8W,IACZ7W,OAAM,OAAE+5B,QAAF,IAAEA,GAAF,UAAEA,EAAsBx8B,qBAAxB,aAAE,EAAqCmM,cAGvC9P,KAAM26B,GAAgCl3B,YAA4B,CACxEC,YACAC,cAAa,OAAEw8B,QAAF,IAAEA,OAAF,EAAEA,EAAsBx8B,cAAcmM,WACnDlM,SAAUuZ,KAELyd,EAAyBC,GAA1B,OACJF,QADI,IACJA,IAA+B,GAEjC,IAAKwF,EAAsB,OAAO,cAACnJ,GAAA,EAAD,IAElC,MAAMsJ,EAAkB,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAA8Bp9B,aAEzD,OACE,gCACE,cAAC0xB,GAAA,EAAD,UACE,cAACuC,GAAA,EAAD,CACEre,mBAAoBunB,EAAqBllB,OACzCic,oBACE,cAACrI,GAAD,CACEnuB,aAAcy/B,EACdplB,qBAAsBqlB,EACtB//B,kBAAmBu6B,EACnBtf,0BAA2Buf,IAG/B1D,4BAA6BgJ,EAAqBx/B,SAClDy2B,sBAAuB+I,EAAqBhlB,MAC5Ckc,yBAAuB,EACvBC,sBAAuBl0B,YAAwB+8B,GAC/C5I,OAAQR,EACRsJ,YAAaA,EACbE,sBAAuBJ,EAAqBv9B,WAIhD,cAACmxB,GAAD,CACElZ,aAAc4f,EACdnf,0BAA2Buf,EAC3Bx6B,kBAAmBu6B,EACnB3kB,qBAAsBkqB,EAAqBx/B,SAC3CqzB,sBAAoB,IAEtB,cAACoC,GAAD,CACElB,qBAAsBwF,EACtB13B,aAAcs9B,EACdtM,sBAAoB,O,+CEvB5B,SAASwM,IAAuB,aAC9B9/B,EAD8B,iBAE9B+/B,EAF8B,MAG9BhN,EAH8B,QAI9Bxb,IAME,IAAD,EACD,MAAM,UAAEvU,EAAF,gBAAayZ,GAAoB1f,qBAAW+V,MAGhD/L,OAAO,OAAEC,IACPjK,qBAAWkK,MAEP3H,KAAMod,GAA0B3Z,YAA4B,CAClEC,YACAC,cAAa,OAAEjD,QAAF,IAAEA,GAAF,UAAEA,EAAciD,qBAAhB,aAAE,EAA6BmM,WAC5ClM,SAAUuZ,KAGJnd,KAAMuqB,GAA0B5R,aAAyB,CAC/DjV,YACAE,SAAUuZ,EACVvE,mBAAkB,OAAElY,QAAF,IAAEA,OAAF,EAAEA,EAAcua,UAG7B5a,EAAmBib,GAApB,OACJ8B,QADI,IACJA,IAAyB,GAErBpO,EAA2B,OAAG3O,QAAH,IAAGA,OAAH,EAAGA,EAAmBE,GACrDC,KAEIkW,GAA2BrW,IAAD,OAAsBA,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAmBE,GAAG,IAEtEmgC,EAAqBjN,EAAQgN,EAAmB,EAEtD,OACE,sBAEEE,KAAK,SACL1oB,QAASA,EACThQ,MAAO,CACLsB,QAAS,OACTC,WAAY,WACZW,eAAgB,gBAChBsN,OAAQ,aACJipB,EACA,CACElY,cAAe,GACfC,aAAc,aAAe/gB,EAAOkQ,OAAOE,UAE7C,IAdR,UAiBE,eAAC,IAAD,CAAOK,MAAM,WAAb,UACE,mCAAMzX,EAAaua,OAAOnL,cAE1B,sBAAK7H,MAAO,CAAEC,SAAU,QAASc,WAAY,IAA7C,UACE,cAACgB,GAAA,EAAD,CACE5C,SAAU6C,YAAc,OACtBqR,QADsB,IACtBA,OADsB,EACtBA,EAA2Bva,cAG5BiO,GAA+B0H,EAQhC,mCACE,gDACG3M,YAAUwgB,EAAuB,CAAEvE,UAAW,SATnD,mCACE,oDACGjc,YAAUwgB,EAAuB,CAAEvE,UAAW,IADjD,EAEGjc,YAAU1J,EAAmB,CAAE2lB,UAAW,eAarD,eAAC,IAAD,CAAO7N,MAAM,WAAWlQ,MAAO,CAAEC,SAAU,SAA3C,UACG0d,aACCllB,EAAaya,MAAM2R,IAAIpsB,EAAaC,UAAUgJ,IAAI,KAAM5I,YAE1D,cAAC6/B,GAAA,EAAD,SA9CGlgC,EAAaua,OAAOnL,YAoDhB,SAAS+wB,KAAuB,IAAD,EAC5C,MAAM,UACJn9B,EACAhD,aAAcogC,EAFV,gBAGJ3jB,GACE1f,qBAAW+V,MACT,UAAEhW,GAAcC,qBAAWC,MAE1BqjC,EAAeC,GAAoB3jC,sBACnC4jC,EAAmBC,GAAwB7jC,mBAChD,IAGI8jC,OACcniC,IAAlB+hC,EAA8BE,EAAkBF,QAAiB/hC,GAE3DgB,KAAMod,GAA0B3Z,YAA4B,CAClEC,YACAC,cAAa,OAAEw9B,QAAF,IAAEA,GAAF,UAAEA,EAAsBx9B,qBAAxB,aAAE,EAAqCmM,WACpDlM,SAAUuZ,KAGL9c,EAAmBib,GAApB,OACJ8B,QADI,IACJA,IAAyB,GAoD3B,GAlDAlP,qBAAU,KACsB/P,WAC5B,IAAMuF,IAAao9B,EAAsB,MAAO,GAQhD,IAAIM,EAA+C,OALjD,OAAM5jC,QAAN,IAAMA,OAAN,EAAMA,EAAW6jC,oBAAoBnH,IACnCx2B,EACAo9B,EAAoBn9B,iBAOpB29B,EAA0BR,EAAoB5lB,QAGlD,MAAQomB,EAAwB/gC,GAAGc,IAAUC,KAAK,KAAK,CACrD,MAAMigC,QACH,OAAM/jC,QAAN,IAAMA,OAAN,EAAMA,EAAW6jC,oBAAoBnH,IACpCx2B,EACA49B,IAGAC,IAEFH,EAA6B,CAC3BG,GACA3N,OAAOwN,GACTE,EACEC,EAAyCrmB,SAI/C,MAAMsmB,EA5OwC,GAClDJ,6BACAN,0BAKA,MAAMU,EAAqC,GA0E3C,OAxEAJ,EAA2B/hC,SACzB,CAACoiC,EAAkCC,KACjCF,EAAiB3hC,KAAK4hC,GAEtB,MAAME,EAA8BF,EAAiCtmB,MAC/DymB,EACJF,EAAqBN,EAA2BhiC,OAAS,EACrDgiC,EAA2BM,EAAqB,GAAGvmB,MACnD2lB,EAAoB3lB,MACpB0mB,EAAkBJ,EAAiC9gC,SACnDmhC,EAAsBL,EAAiCrsB,aAE7D,IAAI2sB,EAGFA,EADEF,IAAoBA,EAAgBthC,GAAG,GACfqhC,EACvBnR,IAAIkR,GACJ/3B,IAAIi4B,GACJ9gC,WAEuB,EAG5B,MAAMihC,EACJN,IAAuBN,EAA2BhiC,OAAS,EAE7D,IAAI6iC,EAAe,EAGfC,EAA2BT,EAAiC9lB,OAC5DwmB,EAA0BV,EAAiCtmB,MAC3DinB,EAA2BX,EAAiCxmB,OAEhE,MAAMonB,EACJZ,EAEF,KAAOQ,EAAeF,IAIjBC,GACDC,IAAiBF,EAA0B,IALA,CAS7C,MAAMO,EAAoBJ,EAAczR,IACtCyR,EAAcv4B,IAAI2L,YAAmBwsB,IAAsBl4B,IAAI,MAE3D24B,EAAmBJ,EAAarV,IAAI+U,GACpCW,EAAoBJ,EAActV,IAAI,GAEtC2V,EAAmB,CACvB9hC,SAAU0hC,EAAoB1hC,SAC9Bgb,OAAQ2mB,EACRltB,aAAcitB,EAAoBjtB,aAClCxS,OAAQy/B,EAAoBz/B,OAC5BqY,OAAQunB,EACR7+B,cAAe0+B,EAAoB1+B,cACnCwX,MAAOonB,EACPtgC,SAAUogC,EAAoBpgC,UAGhCigC,EAAgBI,EAChBH,EAAeI,EACfH,EAAgBI,EAChBP,IAEAT,EAAiB3hC,KAAK4iC,OAKrBjB,GA2JsBkB,CAA4C,CACnEtB,6BACAN,wBAMF,OAF6BU,EAAiBn/B,MAAM,GAAI,GAE5Bme,WAG9BmiB,GAAwB1f,MAAKge,IAC3BC,EAAqBD,QAEtB,CAACzjC,EAAWkG,EAAWo9B,KAErBp9B,IAAco9B,GAAuB,OAACA,QAAD,IAACA,MAAqB7lB,OAC9D,OAAO,KAET,MAAM2nB,EACJ3B,EAAkB7hC,QAAU0hC,EAAoB7lB,OAAOla,WAAa,EAEhE8hC,EAAgB,IACpB,cAAC,IAAD,CACEt3B,UAAU,WACVC,KAAK,QACLvD,MAAO,CAAEpC,MAAO,OAAQi9B,UAAW,OAAQhY,SAAU,UAHvD,SAKGmW,EAAkB7hC,OACjB6hC,EAAkB16B,KAAI,CAAC7F,EAA8ByB,IACnD,cAACq+B,GAAD,CAEE9/B,aAAcA,EACd+/B,iBAAkBQ,EAAkB7hC,OACpCq0B,MAAOtxB,EACP8V,QAAS,IAAM+oB,EAAiB7+B,IAJ3BzB,EAAaiD,cAAcmM,cAQpC,8BACE,qDAMR,OACE,gCACE,cAAC+yB,EAAD,IAECD,EAAkB,KAAO,cAAC9Z,GAAA,EAAD,IAEzBqY,GACC,cAAC,KAAD,CACE9zB,QAASjN,QAAQ+gC,GACjBt7B,MAAO,IACP8C,MAAQ,UAASw4B,EAAqBlmB,OAAOnL,aAC7CvC,SAAU,IAAMyzB,OAAiBhiC,GACjCsO,KAAM,IAAM0zB,OAAiBhiC,GAC7BijB,kBAAmB,CAAED,QAAQ,GAC7BxU,OAAQ,eAPV,SASE,cAACqhB,GAAD,CACEnuB,aAAcygC,EACdpmB,qBAAsBjZ,YACpBq/B,EAAqBl/B,UAEvB5B,kBAAmBA,EACnBib,0BAA2BA,SCzUxB,SAASynB,KACtB,OACE,eAAC,IAAD,CAAOx3B,UAAU,WAAWtD,MAAO,CAAEpC,MAAO,QAA5C,UACE,cAACmjB,GAAA,EAAD,CACE5gB,KAAM,wCACNe,IACE,yLAMFlB,MAAO,CACLmC,aAAc,MAGlB,cAACsqB,GAAA,EAAD,UACE,wDCWO,SAASsO,IAAsB,WAC5CjM,IAIA,MACEtvB,OAAO,OAAEC,IACPjK,qBAAWkK,MACT,aACJjH,EADI,cAEJ6S,EACAjW,SAAS,oBAAE40B,GAHP,UAIJxuB,GACEjG,qBAAW+V,KAETyvB,EAAiBnqB,EAAiBD,EAAqBqqB,cAG3DljC,KAAMu6B,EACNj9B,QAAS6lC,GACP1pB,EAA6B,CAC/B/V,eAGK82B,GAAsBD,GAA8B,GAE3D,GACErI,GACCiR,IAA8B5vB,IAC9B7S,IACC85B,IAAuBjnB,EAEzB,OAAO,cAACuV,GAAA,EAAD,IAGT,GAAIpoB,EAAaua,OAAO1a,GAAG,IAAvB,OAA6Bi6B,QAA7B,IAA6BA,KAAoBvf,OAAO1a,GAAG,GAC7D,OAAO,cAACwiC,GAAD,IAGT,MAAMK,EAAU,EAAGh7B,UACA1H,GAAgB0C,YAAwB1C,GAMvD,cAAC,KAAD,CACEiI,MACE,yIAFJ,SAQE,iCACGP,EACD,cAACqS,EAAA,EAAD,CACExS,MAAO,CACLE,MAAOT,EAAOU,KAAK4R,KACnBhR,WAAY,UAjBbZ,EAyBL4S,EAAmBqgB,aAA4B36B,GAE/C2iC,EAAO,CACX3iC,EAAaua,OAAO9X,GAAG,IAAM,CAC3B8N,IAAK,UACL/H,MAAOk6B,EAAQ,CAAEh7B,KAAM,oBACvB+J,QAAS,cAAC2kB,GAAD,CAAqBC,WAAYA,MAE3CxjB,IACE9S,YAAmBua,IAAqBta,EAAaua,OAAO1a,GAAG,KAAO,CACrE0Q,IAAK,WACL/H,MAAOk6B,EAAQ,CAAEh7B,KAAM,qBACvB+J,QAAS,cAAC+tB,GAAD,CAAsBnJ,WAAYA,KAE/C,CACE9lB,IAAK,UACL/H,MAAOk6B,EAAQ,CAAEh7B,KAAM,oBACvB+J,QACE,cAACuiB,GAAA,EAAD,UACE,cAACmM,GAAD,QAINphC,OAAOW,SAET,OACE,cAACkjC,GAAA,EAAD,CACED,KAAMA,EACNE,kBACEN,EACE,cAACxE,GAAD,CACE5E,oBAAkB,EAClB6E,cAAgBzmB,GACd,cAAC,IAAD,CAAQzM,KAAK,QAAQyM,QAASA,EAASO,KAAM,cAAC2V,GAAA,EAAD,IAA7C,SACE,+BACG1tB,YAAmBua,GAClB,+CAEA,4CAMR,O,uCCpIG,SAASwoB,KACtB,MAAM,YAAExqB,GAAgBvb,qBAAWwb,MAC7B,UAAEvV,GAAcjG,qBAAW+V,KAEjC,OAAOC,YAA6B,CAClC7W,SAAUkH,IAAeyS,aACzB1Z,aAAc,qBACdC,KACEkc,GAAetV,EACX,CAACsV,EAAa3X,IAAUC,KAAKoC,GAAW/B,eACxC,KACNzE,eAAgBuuB,O,kCCIb,SAASgY,IAAyB,YACvCC,IAIA,MAAM,UACJhgC,EADI,aAEJhD,EAFI,qBAGJqa,EAHI,+BAIJ4oB,EAJI,iBAKJC,EALI,YAMJvD,GACE5iC,qBAAW+V,MAEPxT,KAAM6jC,GAAgC7O,GAAyB,CACrEtxB,YACAV,aAAY,OAAE+X,QAAF,IAAEA,OAAF,EAAEA,EAAsB/X,eAGtC,IAAKtC,EAAc,OAEnB,MAAMojC,EAAuBD,EAA2B,OACpDD,QADoD,IACpDA,OADoD,EACpDA,EAAkB9W,IAAI+W,GACtBD,EAEJ,IAAK7oB,GAAwB,OAAC+oB,QAAD,IAACA,MAAsB3gC,GAAG,KAAOugC,EAC5D,OAAOriC,IAAUC,KAAK,GAExB,MAAMkU,EACJ6qB,IAAgB0D,KAAcC,OAC1BjpB,EAAqBkpB,qBACrBlpB,EAAqBvF,eAErB0uB,EAAiB5jC,YAASojC,GAG1BS,EACJL,GAAwBH,EACpBA,EACGh6B,IAAIu6B,GACJt6B,IAAIk6B,GACPziC,IAAUC,KAAK,GAGf8iC,EAAY5uB,EAAesX,IAC/BoX,EACGv6B,IAAItI,IAAUC,KAAK+iC,KAAqB5T,IAAIjb,IAC5C5L,IAAIk6B,IAIT,OAAOK,EAAKx6B,IAAIy6B,GAAWx6B,IAAIy6B,KCxDjC,MAAMC,GAA4B,CAChC/6B,QAAS,OACTY,eAAgB,gBAChBX,WAAY,YAIC,SAAS+6B,IAAc,QACpCl3B,EADoC,SAEpCE,EAFoC,YAGpCgR,IAMA,MACE9W,OAAO,OAAEC,IACPjK,qBAAWkK,MACT,YAAEqR,GAAgBvb,qBAAWwb,MAC7B,YACJmN,EADI,aAEJ1lB,EAFI,+BAGJijC,EAHI,UAIJjgC,EAJI,iBAKJkgC,EALI,0BAMJtoB,EANI,qBAOJP,GACEtd,qBAAW+V,MAERgxB,EAAcC,GAAmBpnC,sBACjCC,EAASC,GAAcF,sBACvBkf,EAAoBC,GAAyBnf,sBAE7C0N,GAAQgE,sBAIP/O,KAAM0kC,GAAiBlZ,GAAkBxS,EAAatV,GACxDihC,EAAelB,GAAyB,CAC5CC,YAAa3gC,YAAQ2hC,KAEjBE,EAAenB,GAAyB,CAAEC,YAAac,IACvDK,ECrDD,WAIL,MAAM,WAAElrB,EAAF,UAAcnc,GAAcC,qBAAWC,MACvC,YAAEsb,GAAgBvb,qBAAWwb,MAC7B,UAAEvV,GAAcjG,qBAAW+V,KAEjC,MAAO,EAAGgxB,eAAcM,qBAAqBjrB,KAMxC,IAAD,EALF,OACGF,GACAX,GACAtV,GACD,OAAClG,QAAD,IAACA,KAAW4Q,qBAQPuL,EAAU,OACfnc,QADe,IACfA,OADe,EACfA,EAAW4Q,qBACX,iBACA,CACE4K,EACAtV,EACA8gC,EACA5iC,KACAkjC,EACA9rB,EAXS,GArBQ,GAoCnBa,IAnBM,OAANA,QAAM,IAANA,GAAA,UAAAA,EAAQC,cAAR,cAAAD,GACOvI,QAAQC,SAAQ,KDqCJwzB,GAEvB,IAAKrkC,IAAiBqa,EAAsB,OAAO,KAEnD,MAAMiqB,EAAQC,YAAcP,EAAcd,GAGpCkB,EAA6C,OAAzBxpB,QAAyB,IAAzBA,KAA2B/a,GAAGkpB,KAA9B,OACtBmb,QADsB,IACtBA,OADsB,EACtBA,EAAcj7B,IAAI,KAAMC,IAAI,MAE5Bg7B,EAEEM,EAAiB3e,aAAgB,CACrCH,YAAaA,EACbI,YAAY,EACZC,QAAQ,EACR0e,kBAAkB,IAEdC,EAAkB7e,aAAgB,CACtCH,YAAaA,EACbI,YAAY,EACZC,QAAQ,IAGV,IAAI4e,EAGFA,EADF,OAAI1B,QAAJ,IAAIA,KAAgCxgC,GAAG,GACxB,yDAAW+hC,IAEX,+CAASA,IAGxB,MAAMI,EACJv7B,YAAU+6B,EAAmB,CAAE9e,UAAW,KAAQ,KAwCpD,OACE,cAAC3H,EAAA,EAAD,CACE9B,mBAAoBA,EACpB5T,MAAO08B,EACPh4B,QAASA,EACTwX,eAAgBvnB,EAChBgQ,KAAM,KAjCwBnP,iBAC1B4M,EAAKoF,iBACN20B,IAELvnC,GAAW,GAEXsnC,EACE,CACEL,aAAclkC,YAASkkC,GACvBM,qBAEF,CAEEhrB,OAAQ,KACN0C,GAAsB,GACtBioB,OAAgBzlC,IAGlBuf,YAAa,KACX/B,GAAsB,GACtBjf,GAAW,GACA,OAAXghB,QAAW,IAAXA,YAaFgnB,IAEFh4B,SAAU,KACRk3B,OAAgBzlC,GAER,OAARuO,QAAQ,IAARA,QAEFC,OAAQ63B,EACRtjB,cAAe,CACblK,UAAW2sB,GAA2C,IAA3B3yB,SAAS2yB,IAEtC3+B,MAAO,IACPif,UAAQ,EAlBV,SAoBE,eAAC,IAAD,CAAOvZ,UAAU,WAAWtD,MAAO,CAAEpC,MAAO,QAA5C,UACE,gCACE,mBAAGoC,MAAOq8B,GAAV,SACE,+DAGK5uB,YAAqBqF,EAAqBvF,iBAH/C,cAEE,8BAKJ,mBAAGvN,MAAOq8B,GAAV,SACE,8GACG/d,aAAgB,CAAEH,YAAaA,EAAaI,YAAY,IAD3D,EAWOzc,YAAS,OAAC26B,QAAD,IAACA,IAAgB,EAAG,CAAE1e,UAAW,IAXjD,gBAYOof,EAZP,MAsBQJ,GAtBR,cAGE,qBACE/8B,MAAO,CACLsB,QAAS,OACTi8B,cAAe,SACfh8B,WAAY,cAPlB,EAUI,wBAVJ,EAcI,qBACEvB,MAAO,CACLwP,OAAQ,UACRvP,SAAU,SACVQ,WAAY,IACZP,MAAOT,EAAOU,KAAK0P,iBAQ7B,mBAAG7P,MAAOq8B,GAAV,SACE,kEAIKv6B,YAAU46B,EAAc,CAAE3e,UAAW,KAJ1C,cAEE,yBAFF,EAGI,cAAChc,GAAA,EAAD,CAAgB5C,SAAS,gBAMjC,4BACiC,OAA9Bu8B,QAA8B,IAA9BA,KAAgCxgC,GAAG,GAClC,2NAIE,sBAAM8E,MAAO,CAAES,WAAY,IAAKP,MAAOT,EAAOU,KAAK4R,WAKrD,sBAAM/R,MAAO,CAAES,WAAY,IAAKP,MAAOT,EAAOU,KAAK4R,MAAnD,SACE,+HACE,kCAMR,gCACE,cAAC,IAAD,CAAMjP,KAAMA,EAAZ,SACE,cAACia,GAAA,EAAD,CACEjf,IAAK,EACLuM,KAAM,KACNR,YAAY,IACZ3U,MAAOqnC,EACPtyB,UACE,cAAC+S,GAAA,EAAD,CACE9S,QAAS,cACT8F,QAAS,IAAMwsB,EAAgB1hC,YAAQ2hC,MAG3Ch5B,cAAe,CACbC,MAAO,CAAC,CAAE0F,UA5IK,KAC3B,MAAMo0B,EAAWnlC,YAAQ,OAACkkC,QAAD,IAACA,IAAgB,GAE1C,OAAIiB,EAASllC,GAAG,GACP+Q,QAAQM,OAAO,oBACb6zB,EAAStiC,GAAT,OAAYuhC,QAAZ,IAAYA,IAAgB,GAC9BpzB,QAAQM,OAAO,4BAEjBN,QAAQC,cAsILsG,SAAQ,OAAE6sB,QAAF,IAAEA,OAAF,EAAEA,EAAcnkC,GAAG,GAC3BsL,SAAUhO,GAAO4mC,EAAgB5mC,OAGN,OAA9B8lC,QAA8B,IAA9BA,KAAgCxgC,GAAG,GAClC,qBAAK8E,MAAO,CAAES,WAAY,IAAKqc,UAAW,IAA1C,SAC4B,OAAzBzJ,QAAyB,IAAzBA,KAA2B/a,GAAGkpB,KAC7B,qHAC4B6b,KAG5B,6GAAyBA,OAG3B,a,YE9PCI,GADO,CAAE,KAAQ,CAAE,IAAO,MAAO,MAAS,CAAE,QAAW,gBAAiB,UAAa,SAAW,SAAY,CAAC,CAAE,IAAO,OAAQ,MAAS,CAAE,EAAK,6SAAiT,KAAQ,UAAW,MAAS,Y,SCMteA,GAAkB,SAAyBC,EAAOC,GACpD,OAAoBC,gBAAoBC,KAAUC,aAAcA,aAAc,GAAIJ,GAAQ,GAAI,CAC5FC,IAAKA,EACLptB,KAAMwtB,OAIVN,GAAgBO,YAAc,kBACFJ,oBAAiBH,ICC9B,SAASQ,IAAmB,QACzC74B,EADyC,SAEzCE,EAFyC,YAGzCgR,IAMA,MAAOjhB,EAASC,GAAcF,sBACvBkf,EAAoBC,GAAyBnf,sBAC7C8oC,EAAaC,GAAkB/oC,sBAEpCoK,OAAO,OAAEC,IACPjK,qBAAWkK,MACT,YAAEye,EAAF,aAAeuF,GAAiBluB,qBAAW+V,KAC3C6yB,ECxBD,WAGL,MAAM,WAAE1sB,EAAF,UAAcnc,GAAcC,qBAAWC,MACvC,YAAEsb,GAAgBvb,qBAAWwb,MAC7B,UAAEvV,GAAcjG,qBAAW+V,KAEjC,MAAO,EAAG2yB,eAAetsB,KACqD,IAAD,EAA3E,OAAKF,GAAeX,GAAgBtV,GAAa,OAAClG,QAAD,IAACA,KAAW+Y,aAKtDoD,EAAU,OACfnc,QADe,IACfA,OADe,EACfA,EAAW+Y,aACX,WACA,CAACyC,EAAatV,EAAWyiC,EAAYxkC,eACrCkY,IARM,OAANA,QAAM,IAANA,GAAA,UAAAA,EAAQC,cAAR,cAAAD,GACOvI,QAAQC,SAAQ,KDcL+0B,IAEdtmC,KAAMumC,GAAqB/C,KAEnCgD,2BAAgB,KACdJ,EAAerjC,YAAQwjC,MACtB,CAACA,IA0BJ,MAAME,IAAgB9a,GAClBA,IAAiB/pB,KAGf8kC,EAAgBngB,aAAgB,CACpCH,cACAK,QAAQ,EACR0e,kBAAkB,IAGdwB,EAAiBpgB,aAAgB,CACrCH,cACAK,QAAQ,IAGV,OACE,cAACpI,EAAA,EAAD,CACE1V,MAAO,iEAAUg+B,IACjBxV,kBAAmB,kCACnB9jB,QAASA,EACTC,KA5CJ,WAEK64B,IACD7lC,YAAS6lC,GAAa5lC,GAAG,KAI3BhD,GAAW,GAEX8oC,EACE,CAAEF,YAAa7lC,YAAS6lC,IACxB,CACErsB,OAAQ,KACN0C,GAAsB,GACtBjf,GAAW,IAEbghB,YAAa,KACX/B,GAAsB,GACX,OAAX+B,QAAW,IAAXA,YA2BJ/Q,OAAQ,gDAAUm5B,IAClB9hB,eAAgBvnB,EAChBif,mBAAoBA,EACpBwF,cAAe,CAAElK,SAAUvX,YAAS6lC,GAAa5lC,GAAG,IACpDgN,SAAUA,EACV1H,MAAO,IACPif,UAAQ,EAXV,SAaE,eAAC,IAAD,CAAOvZ,UAAU,WAAWC,KAAK,QAAjC,WACIi7B,GACA,sBAAKx+B,MAAO,CAAEyP,QAAS,GAAI4C,WAAY5S,EAAO4S,WAAWssB,IAAzD,UACE,cAAC,GAAD,IAAoB,IACpB,mKAQJ,gCACE,4BACE,iKACYF,EADZ,eAC8CC,OAIhD,mBAAG1+B,MAAO,CAAES,WAAY,KAAxB,SACE,uFAIF,4BACE,ySAEyCg+B,UAO7C,eAAC,KAAD,CAAcl7B,KAAK,QAAQF,OAAO,aAAaikB,OAAQ,EAAvD,UACE,cAAC,KAAatiB,KAAd,CACE/D,MAAO,6EAAuBw9B,KADhC,SAGG38B,YAAUw8B,EAAkB,CAAEvgB,UAAW,MAG3CygB,GAAiBrgB,GAChB,cAAC,KAAanZ,KAAd,CACE/D,MAAO,yEAAQkd,KADjB,SAGE,cAAChd,GAAA,EAAD,CAAkBzK,QAASgtB,SAKjC,cAAC,IAAD,CAAMrgB,OAAO,WAAb,SACE,cAAC,IAAK2B,KAAN,CAAW/D,MAAO,2CAAlB,SACE,cAAC8b,GAAA,EAAD,CACEjf,IAAK,EACL8gC,IAAK/jC,WAAWC,YAAQwjC,IACxB1uB,UAAW4uB,EACX30B,YAAY,IACZ3U,MAAOgpC,EACPj0B,UACE,cAAC+S,GAAA,EAAD,CACE9S,QAAS,cACT8F,QAAS,IAAMmuB,EAAerjC,YAAQwjC,MAG1C16B,SAAUhO,GAAOuoC,EAAevoC,c,uBE9I/B,SAASipC,IAAY,QAClCz5B,EADkC,SAElCE,EAFkC,YAGlCgR,IAMA,MAAM,YAAE6H,EAAF,aAAeuF,GAAiBluB,qBAAW+V,KAC3CuzB,EClBD,WAML,MAAM,WAAEptB,EAAF,UAAcnc,GAAcC,qBAAWC,MACvC,UAAEgG,GAAcjG,qBAAW+V,KAMjC,MAAO,EAAGrW,QAAO8H,cAAaC,gBAAekrB,QAAQvW,KACL,IAAD,EAA7C,IAAKF,IAAenc,IAAckG,EAEhC,OADM,OAANmW,QAAM,IAANA,GAAA,UAAAA,EAAQC,cAAR,cAAAD,GACOvI,QAAQC,SAAQ,GAGzB,MAAM3U,EAAWY,EAAUwG,aAErBlH,EAAO,CACX4G,EACAvG,EAAMwE,cACNsD,EAHW,OAIXmrB,QAJW,IAIXA,IAAQ,GACRlrB,GAfiB,GAmBnB,OAAOyU,EAAW/c,EAVG,eAUqBE,EAAM+c,IDZ7BmtB,IACdj8B,GAAQgE,sBAMR5R,EAAOC,GAAYC,mBAAiB,MACpCC,EAASC,GAAcF,sBACvBkf,EAAoBC,GAAyBnf,qBAgCpD,MAAM4pC,EACJ7gB,GAAeuF,GAAgBA,IAAiB/pB,KAE5CslC,EAAmB3gB,aAAgB,CACvCH,YAAaA,EACbI,YAAY,EACZC,QAAQ,IAGJ0gB,EAAmB5gB,aAAgB,CACvCH,YAAaA,EACbI,YAAY,EACZC,QAAQ,IAGV,OACE,eAACpI,EAAA,EAAD,CACEhR,QAASA,EACT1E,MAAO,mDAASu+B,IAChB55B,KAjDJnP,iBACE,MAAM8G,EAAc8F,EAAKoB,cAAc,cAClCi7B,qBAAUniC,KAEf1H,GAAW,SAELwN,EAAKoF,iBAEX42B,EACE,CACE5pC,MAAOmD,YAASnD,GAChB8H,cACAC,cAAe6F,EAAKoB,cAAc,iBAClCikB,KAAMrlB,EAAKoB,cAAc,SAE3B,CACE2N,OAAQ,KACNvc,GAAW,GACXif,GAAsB,IAExB+B,YAAa,KACXxT,EAAK2F,cACLtT,EAAS,KACTof,GAAsB,GACX,OAAX+B,QAAW,IAAXA,YA0BJsG,eAAgBvnB,EAChBif,mBAAoBA,EACpBhP,SAAUA,EACVC,OAAQ,mDAAS05B,IAPnB,UASE,qBAAKj/B,MAAO,CAAEmC,aAAc,IAA5B,SACE,yKAOF,eAAC,IAAD,CAAMkB,OAAO,WAAWP,KAAMA,EAA9B,UACE,cAAC,IAAKkC,KAAN,CACE/D,MAAO,0BACPjI,KAAK,aACL0K,MAAO,CACL,CACEC,UAAU,EACVyF,UAAW,CAACg2B,EAAMlqC,IACXA,GAAUiqC,qBAAUjqC,GAEbmU,QAAQC,UADXD,QAAQM,OAAO,6BARhC,SAcE,cAAC,IAAD,CAAOE,YAAalQ,SAEtB,cAACojB,GAAA,EAAD,CACEtZ,cAAe,CACbxC,MAAO,qDAAIi+B,IACX76B,MAAO,wDACPX,MAAO,CAAC,CAAEC,UAAU,KAEtBzO,MAAOA,EACP0O,SAAUhO,GAAOT,EAAQ,OAACS,QAAD,IAACA,IAAO,OAEnC,uBACA,cAAC,IAAKoP,KAAN,CAAW/D,MAAM,OAAOjI,KAAK,OAA7B,SACE,cAAC,IAAD,CAAO6Q,YAAY,wCAErB,cAAC,IAAK7E,KAAN,CACEhM,KAAK,gBACLiI,MAAO,yBACPo+B,cAAc,UACdh7B,MACE26B,EACI,2LAA+E7gB,IAC/E,kGAENla,cAAc,EAThB,SAWE,cAAC,KAAD,CAAQ2L,UAAWovB,YE9Gd,SAASM,KACtB,MAAOC,EAA0BC,GAC/BpqC,oBAAkB,IAGlBoK,OAAO,OAAEC,IACPjK,qBAAWkK,MACT,aACJgkB,EADI,YAEJvF,EAFI,cAGJ7S,EAHI,iBAIJqwB,EAJI,qBAKJ7oB,EALI,UAMJrX,EANI,+BAOJigC,EAPI,gBAQJrW,EARI,GASJoa,GACEjqC,qBAAW+V,MAET,YAAEwF,GAAgBvb,qBAAWwb,MAE3BjZ,KAAM2nC,GC5CD,SACbhc,EACAic,GAEA,OAAOn0B,YAA6B,CAClC7W,SAAUirC,aAAiBlc,GAC3B9uB,aAAc,YACdC,KAAM8qC,EAAgB,CAACA,GAAiB,KACxC1qC,eAAgBuuB,ODoCeqc,CAAkBnc,EAAc3S,IACzDhZ,KAAMumC,GAAqB/C,MAE5BuE,EAA0BC,GAC/B3qC,oBAAkB,GAEdiyB,EAA4B,CAChCzpB,MAAO,KAGHoiC,EAAiBtc,IAAiB/pB,KAElCsmC,EAA4BpvB,EAAiBD,EAAqBsvB,OAElEC,EAAY7hB,aAAgB,CAChCH,YAAaA,EACbI,YAAY,EACZC,QAAQ,KAGFzmB,KAAM0kC,GAAiBlZ,GAAkBxS,EAAatV,GAGxD2kC,EACJpD,YAAcP,EAAcd,IAAqB,IAE7C0E,GACHL,GAAkBC,IAA8B30B,EAE7Cg1B,EAA0Bx+B,YAAS,OAAC49B,QAAD,IAACA,IAAkB,EAAG,CAC7D3hB,UAAW,IAEPwiB,EAA4Bz+B,YAAS,OAACw8B,QAAD,IAACA,IAAoB,EAAG,CACjEvgB,UAAW,IAGPyiB,EAAsC,CAC1Cl/B,QAAS,OACTorB,SAAU,OACVjW,IAAK,EACLvU,eAAgB,gBAChBtE,MAAO,QAEH6iC,EAActoC,QAAO,OAACujC,QAAD,IAACA,OAAD,EAACA,EAAgCxgC,GAAG,IAEzDwlC,EAAwBvoC,QAC5B0Y,EAAiBD,EAAqB+vB,OAElCC,EAAoBzoC,QAAO,OAAC2a,QAAD,IAACA,OAAD,EAACA,EAAsB9X,cAExD,OACE,qCACE,cAAC,IAAD,CAAOsI,UAAU,WAAWC,KAAK,QAAjC,SACE,cAAC,KAAD,CACE7C,MACE,sBACEV,MAAO,CACLsB,QAAS,OACTY,eAAgB,iBAHpB,UAME,cAAC6e,GAAA,EAAD,CACE5gB,KAAM,iCACNe,IACE,0OACGod,aAAgB,CACfH,YAAaA,EACbI,YAAY,EACZC,QAAQ,EACR0e,kBAAkB,SASzBmD,GACC,qBAAKrgC,MAAO,CAAEmC,aAAc,IAA5B,SACE,cAAC0+B,GAAA,EAAD,CACE7pB,iBAAkBA,GAClB8pB,YAAa,IAAM/iC,OAAOwY,SAASC,gBAM7CxK,YAAa,IACX,eAAC,KAAD,CAAc3I,OAAO,aAAaikB,OAAQ,EAAG/jB,KAAK,QAAlD,UACGy8B,GAAkB7hB,GACjB,cAAC,KAAanZ,KAAd,CACE/D,MAAO,wBACPomB,WAAYA,EAFd,SAIE,qBAAKrnB,MAAOwgC,EAAZ,SACE,gCACGriB,EADH,KAEE,cAAChd,GAAA,EAAD,CAAkBzK,QAASgtB,IAF7B,WAON,cAAC,KAAa1e,KAAd,CACE/D,MAAO,uBACPomB,WAAYA,EAFd,SAIE,sBACErnB,MAAO,CACLsB,QAAS,OACTY,eAAgB,gBAChBX,WAAY,WACZ3D,MAAO,OACP6Y,IAAK,EACLiW,SAAU,QAPd,UAUG5qB,YAAU65B,EAAkB,CAAE5d,UAAW,IAV5C,IAUmDoiB,EACjD,cAAC,IAAD,CACE58B,KAAK,QACLyM,QAAS,IAAM+vB,GAA4B,GAC3CnwB,SAAUtE,EAHZ,SAKE,yCAILyF,EACC,cAAC,KAAa/L,KAAd,CACE/D,MAAO,uBACPomB,WAAYA,EACZrnB,MAAO,CAAEugB,cAAe,UAH1B,SAKE,sBAAKvgB,MAAOwgC,EAAZ,UACE,gCACGR,GACC,gCACGM,EADH,IAC6BH,KAG/B,8BACGH,EACC,4GACGO,EADH,UAC+BJ,KAG/B,qCACGI,EADH,IAC+BJ,OAInC,qBACEngC,MAAO,CACLwP,OAAQ,UACRvP,SAAU,SACVQ,WAAY,IACZP,MAAOT,EAAOU,KAAK0P,UALvB,SAQE,mGACGuwB,UAKP,cAAC,IAAD,CACE78B,KAAK,QACLyM,QAAS,IAAMwvB,GAA4B,GAC3C5vB,SAAUtE,EAHZ,SAKE,6DAAe60B,YAInB,YAMZ,cAACY,GAAA,EAAD,CACE37B,QAASm6B,EACTj6B,SAAU,IAAMk6B,GAA4B,GAC5CoB,kBAAmBA,EACnBF,sBAAuBA,EACvBD,YAAaA,EACbtiB,YAAaA,EACbuF,aAAcA,EACdsd,YAAa1E,GACb2E,iBAAkBhD,GAClBiD,UAAWrC,KAEb,cAACsC,GAAA,EAAD,CACE1lC,UAAWA,EACX6pB,YAAW,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAiBrsB,KAC9BmlB,YAAaA,EACbuF,aAAcA,EACd+b,GAAIA,EACJ9D,iBAAkBA,EAClBv2B,QAAS06B,EACTx6B,SAAU,IAAMy6B,GAA4B,Q,+EEpNrC,SAASqB,IAAkB,QACxCh8B,EADwC,UAExCi8B,EAFwC,UAGxC58B,EAHwC,SAIxCa,IAME,IAAD,EACD,MAAM,YAAEyL,EAAF,eAAeuwB,GAAmB9rC,qBAAWwb,MAC7C,aACJvY,EADI,qBAEJqa,EAFI,gBAGJuS,EAHI,UAIJ5pB,EAJI,aAKJioB,EALI,YAMJvF,GACE3oB,qBAAW+V,KACT8c,EAAYC,eACZiZ,EC1CD,WACL,MAAM,WAAE7vB,EAAF,UAAcnc,GAAcC,qBAAWC,MACvC,UAAEgG,GAAcjG,qBAAW+V,KAGjC,MAAO,EAAG4c,OAAMqZ,sBAAqBxkC,cAAa9H,SAAS0c,KAMtD,IAAD,EALF,OACGF,GACAjW,GACD,OAAClG,QAAD,IAACA,KAAW4Q,sBACXnJ,EAMI0U,EAAU,OACfnc,QADe,IACfA,OADe,EACfA,EAAW4Q,qBACX,MACA,CACE1K,EACAvG,EACAqG,IACAyB,EApBoB,EAsBpBwkC,EACArZ,GAAQ,GAnCkB,GAsC5B,IACKvW,EACH1c,MAAOA,KAnBH,OAAN0c,QAAM,IAANA,GAAA,UAAAA,EAAQC,cAAR,cAAAD,GACOvI,QAAQC,SAAQ,KD6BNm4B,IAEdpsC,EAASC,GAAcF,sBACvB6H,EAAeykC,GAAoBtsC,oBAAkB,IACrDusC,EAA0BC,GAC/BxsC,oBAAkB,IACb+yB,EAAM0Z,GAAWzsC,mBAAiB,KAClCkf,EAAoBC,GAAyBnf,sBAE7C0N,GAAQgE,qBAETg7B,EAAYzZ,EAAU0Z,SAASV,GAErC,IAAK5oC,IAAiBgD,IAAc4pB,EAAiB,OAAO,KAE5D,MAAMtqB,EAAY,OAAG+X,QAAH,IAAGA,GAAH,UAAGA,EAAsB/X,oBAAzB,aAAG,EAAoCjC,WAEnDkpC,EAAkBvuB,YAAc,OACpChb,QADoC,IACpCA,OADoC,EACpCA,EAAcib,OACd3Y,EACAsmC,EACA,SAEIY,EAAexuB,YAAc,OACjChb,QADiC,IACjCA,OADiC,EACjCA,EAAcib,OACd3Y,EACAsmC,EACA,YAGIa,EAAYzpC,EACd0C,YAAwB1C,QACxB1B,EAEEorC,EAAkBze,GAAgBA,IAAiB/pB,KAmDzD,OACE,cAACyc,EAAA,EAAD,CACE9B,mBAAoBA,EACpB5T,MAAO,oBAAQ2kB,EAAgBrsB,OAC/BoM,QAASA,EACTC,KAtDJnP,iBACE,IAAKmrC,EAAW,aACVv+B,EAAKoF,iBAEX,MAAMlL,EAAc8F,EAAKoB,cAAc,eACjCk+B,EAAgBplC,GAA4B+T,GAG7CA,GAAeuwB,GAClBA,IAEFhsC,GAAW,SAEaisC,EACtB,CACEpZ,OACAqZ,oBAAqBvkC,EACrBD,YAAaolC,EACbltC,MAAOmsC,GAET,CACE/qB,cACEhhB,GAAW,GACXif,GAAsB,GAEb,OAAT9P,QAAS,IAATA,QAEFoN,SACE0C,GAAsB,QAM1Bjf,GAAW,GACXif,GAAsB,KAoBtBhP,OAAQ,cACR2jB,kBAAmB,gCACnB5jB,SAAUA,EACVsX,eAAgBvnB,EAChBuI,MAAO,IACPif,UAAU,EAVZ,SAYE,eAAC,IAAD,CAAOvZ,UAAU,WAAWC,KAAK,QAAQvD,MAAO,CAAEpC,MAAO,QAAzD,UACE,4BACE,+LACkBynB,EAAgBrsB,KADlC,EAIWqsB,EAAgBrsB,MAJ3B,cACS,2BADT,EAIE,gCAIHqsB,EAAgB4K,eACf,gCACE,6BACE,mDAAoB5K,EAAgBrsB,UAEtC,cAACqpC,GAAA,EAAD,CAAWhoB,YAAagL,EAAgB4K,mBAI3CiS,GAAazpC,EACZ,cAAC6pC,GAAA,EAAD,CACEC,iBAAkB/nC,YAAkC/B,KAEpD,KAEJ,eAAC,KAAD,CAAc6uB,OAAQ,EAAGkb,UAAQ,EAAjC,UACE,eAAC,KAAax9B,KAAd,CAAmB/D,MAAO,qBAAeH,UAAU,gBAAnD,UACGyS,YAAauuB,GADhB,IAC6B9/B,YAAewf,KAD5C,KAEG1f,YAAUu/B,GAFb,IAE0Br/B,YAAeqf,KAFzC,OAIA,eAAC,KAAarc,KAAd,CACE/D,MAAO,wBAAIqd,aAAgB,CACzBC,YAAY,EACZC,QAAQ,MAEV1d,UAAU,gBALZ,UAOE,8BAAMgB,YAAUkgC,EAAiB,CAAEjkB,UAAW,MAC9C,8BACGhN,EACC,+CACM,cAAC5P,GAAA,EAAD,CAAkBzK,QAASqa,OAE/B,UAGR,cAAC,KAAa/L,KAAd,CACE/D,MAAO,yBAAIqd,aAAgB,CACzBH,YAAaA,EACbI,YAAY,EACZC,QAAQ,MAEV1d,UAAU,gBANZ,SAQGgB,YAAUmgC,EAAc,CAAElkB,UAAW,SAG1C,eAAC,IAAD,CAAMjb,KAAMA,EAAMO,OAAO,WAAzB,UACE,cAACo/B,GAAA,EAAD,CAAcvtC,MAAOizB,EAAMvkB,SAAUi+B,IACrC,cAAC,IAAK78B,KAAN,UACE,cAAC09B,GAAA,EAAD,CACEviC,KAAM,oBACNsE,UAAWk+B,IACJA,GACLd,EAAQ1Z,EAAKhxB,OAASgxB,EAAO,IAAMwa,EAAMA,QAI/C,cAAC,IAAK39B,KAAN,CACE/D,MACE,qCACE,mDACA,cAAC,KAAD,CACE2hC,QAASjB,EACT/9B,SAAUg+B,EACV5hC,MAAO,CAAEe,WAAY,SAI3BsD,MAAO,2DACPrE,MAAO,CAAEmC,aAAc,UAGxBw/B,GACC,cAAC,KAAUz4B,WAAX,CACEC,kBAAcpS,EACdiC,KAAM,cACNyQ,gBAAiBzM,IACf8F,EAAKgB,eAAe,CAAE9G,iBAExByG,cAAe,CACbC,MAAO,CACL,CACE0F,UApHgB,KAChC,MAAMpM,EAAc8F,EAAKoB,cAAc,eACvC,OAAKlH,EAEOmiC,qBAAUniC,GAGfqM,QAAQC,UAFND,QAAQM,OAAO,2BAFfN,QAAQM,OAAO,kCAwHjBw4B,GACC,cAAC,IAAKn9B,KAAN,CAAW/D,MAAO,yBAAlB,SACE,eAAC,IAAD,CAAOiP,MAAM,QAAb,UACE,cAAC,KAAD,CACElQ,MAAO,CAAEyP,QAAS,IAClBmzB,QAAS3lC,EACT2G,SAAUmF,GAAK24B,EAAiB34B,EAAElI,OAAO+hC,WAE3C,uBAAOC,QAAQ,gBAAf,SACE,wPE7PH,SAASC,IAAY,UAClCC,EADkC,cAElCC,EAFkC,QAGlC1X,EAHkC,SAIlC1b,EAJkC,aAKlCqzB,IACkB,IAAD,EACjB,MAAM,gBAAE5d,EAAF,qBAAmBvS,EAAnB,WAAyCowB,GAC7C1tC,qBAAW+V,MAEN43B,EAAiBC,GAAsBhuC,oBAAkB,IACzDiuC,EAAwBC,GAC7BluC,oBAAkB,GAEdmuC,EAAYC,aAAkC,CAClDrkC,SAAU6jC,EACV9mC,OAAQ6mC,IAGV,IAAKjwB,EAAsB,OAAO,KAElC,MAAM2wB,EAA+B,OAAfpe,QAAe,IAAfA,GAAA,UAAAA,EAAiB2K,iBAAjB,SAA4B74B,OAC9CkuB,EAAgB2K,UAChB,cAEJ,IAAI0T,EACAR,EACFQ,EAAkB,sDACT5wB,EAAqBnF,WAC9B+1B,EAAkB,8DAGpB,MAAMC,EAAgBxrC,QAAQurC,IAAoB9zB,EAElD,OACE,sBAAK5P,MAAO,CAAE0d,UAAW,YAAaulB,GAAtC,UACE,cAAC,KAAD,CACE79B,UAASu+B,QAAgB5sC,EACzB2J,MAAOgjC,EACP5iC,UAAU,QAHZ,SAKE,cAAC,IAAD,CACEd,MAAO,CAAEpC,MAAO,QAChBsH,KAAK,UACL8K,QAAS,KACP,UAAIuzB,QAAJ,IAAIA,KAAWjrC,GAAG,GAChB,cAAOgzB,QAAP,IAAOA,OAAP,EAAOA,IAETgY,GAA0B,IAE5B1zB,SAAU+zB,EATZ,SAWGF,MAGJT,IAAkBxhB,KACjB,sBAAKxhB,MAAO,CAAEC,SAAU,SAAxB,UACE,mDACU,cAAC8B,GAAA,EAAD,CAAgB5C,SAAS,WAElC2C,YAAUyhC,IAAc,OAI7B,cAACK,GAAA,EAAD,CACEx+B,QAASi+B,EACTh+B,KAAM,KACJi+B,GAA0B,GAC1BF,GAAmB,IAErB99B,SAAU,IAAMg+B,GAA0B,KAE5C,cAAClC,GAAD,CACEh8B,QAAS+9B,EACT1+B,UAAW,IAAM1G,OAAOwY,SAASC,SACjClR,SAAU,IAAM89B,GAAmB,GACnC/B,UAAWkC,O,yBChFZ,SAASM,KAGd,MAAM,WAAEnyB,EAAF,UAAcnc,GAAcC,qBAAWC,MACvC,UAAEgG,GAAcjG,qBAAW+V,KAIjC,MAAO,EAAGrW,SAAS0c,KACmD,IAAD,EAAnE,OAAKF,GAAejW,GAAa,OAAClG,QAAD,IAACA,KAAW4Q,qBAKtCuL,EAAU,OACfnc,QADe,IACfA,OADe,EACfA,EAAW4Q,qBACX,iBACA,CAAC1K,EAAWvG,EAAOqG,IAXF,GARE,GAoBnB,IACKqW,EACH1c,WAVI,OAAN0c,QAAM,IAANA,GAAA,UAAAA,EAAQC,cAAR,cAAAD,GACOvI,QAAQC,SAAQ,KCftB,SAASw6B,KAGd,MAAM,WAAEpyB,EAAF,UAAcnc,GAAcC,qBAAWC,MACvC,UAAEgG,EAAF,oBAAa4D,GAAwB7J,qBAAW+V,KAEtD,MAAO,EAAGw4B,mBAAmBnyB,KAC+B,IAAD,EAAzD,OAAKF,GAAejW,GAAa,OAAClG,QAAD,IAACA,KAAWkW,WAItCiG,EACLnc,EAAUkW,WACV,4CACA,CAACpM,EAAqB0kC,EAAiBtoC,GACvCmW,IAPM,OAANA,QAAM,IAANA,GAAA,UAAAA,EAAQC,cAAR,cAAAD,GACOvI,QAAQC,SAAQ,KCPtB,SAAS06B,KAId,MAAM,WAAEtyB,EAAF,UAAcnc,GAAcC,qBAAWC,MACvC,YAAEsb,GAAgBvb,qBAAWwb,MAC7B,UAAEvV,GAAcjG,qBAAW+V,KAEjC,MAAO,EAAGrP,SAAQyE,MAAMiR,KACsC,IAAD,EAA3D,OAAKF,GAAejW,GAAa,OAAClG,QAAD,IAACA,KAAW+Y,aAKtCoD,EACLnc,EAAU+Y,aACV,eACA,CAACyC,EAAatV,EAAWkF,EAAIzE,EAAOxC,eACpCkY,IARM,OAANA,QAAM,IAANA,GAAA,UAAAA,EAAQC,cAAR,cAAAD,GACOvI,QAAQC,SAAQ,K,cCId,SAAS26B,KACtB,MAAM,UAAExoC,EAAF,YAAa0iB,EAAb,oBAA0B9e,GAC9B7J,qBAAW+V,MAGX/L,OAAO,OAAEC,IACPjK,qBAAWkK,MAERwkC,EAAmBC,GAAwB/uC,oBAAkB,GAI9DgvC,EAFiBvzB,EAAiBD,EAAqBqqB,cAIrDljC,KAAMssC,GAA0B9I,KAExC,OACE,sBACEv7B,MAAO,CACLsB,QAAS,OACTC,WAAY,UAHhB,UAME,uBACEvB,MAAO,CACLE,MAAOT,EAAOU,KAAK0P,SACnBy0B,aAAc,IAHlB,UAMG7oC,GAAa,0DAAYA,KAAoB,IAC9C,cAAC,KAAD,CACEiF,MAAO,sEADT,SAGE,cAAC6jC,GAAA,EAAD,CAAqBC,YAAY,YAGrC,cAACC,GAAA,EAAD,CACEr/B,QAAS8+B,EACTx+B,QAAS,IAAMy+B,GAAqB,GACpCE,sBAAuBA,EACvBlmB,YAAaA,EACb2O,aAAcztB,EACdykC,8BAA+BA,GAC/BE,6BAA8BA,GAC9BH,kBAAmBA,GACnBa,mBAAoB,OACpBjzB,0BAA2BA,EAC3BiF,wBAAyBA,KAE3B,sBAAK1W,MAAO,CAAEsB,QAAS,QAAvB,UACE,cAAC,KAAD,CAASZ,MAAO,gBAAU/C,UAAU,SAApC,SACE,cAAC,IAAD,CACEqS,QAAS,IAAMm0B,GAAqB,GACpC5zB,KAAM,cAACo0B,GAAA,EAAD,IACNz/B,KAAK,WAGRk/B,GAAyB,cAAC5N,GAAD,UC3ClC,MAAMoO,GAAY,GAEZC,GAAcC,gBAAK,IAAM,yDAGzBC,GAAkB,EAAG/0B,cACzB,MAAM,MAAExQ,GAAUhK,qBAAWkK,KACvB6iB,EAAqBH,YAAc5iB,GACzC,OACE,uBACEQ,MAAO,IAAKuiB,EAAoB/S,OAAQ,WACxCQ,QAASA,EAFX,UAIE,qCAJF,IAI4B,cAACg1B,EAAA,EAAD,QAKjB,SAASC,IAAU,mBAChCC,EADgC,uBAEhCC,IAKA,MAAM,UACJC,EADI,UAEJ3pC,EAFI,gBAGJ4pB,EAHI,aAIJ5sB,EAJI,qBAKJqa,EALI,cAMJxH,EANI,YAOJ6S,EAPI,aAQJuF,EARI,GASJ+b,EATI,WAUJyD,EAVI,oBAWJ7jC,EAXI,OAYJ0E,GACEvO,qBAAW+V,KACT85B,EAA8Bx0B,EAClCD,EAAqBqqB,cAGhB5hB,EAAoBC,GAAyBlkB,sBAE5C2C,KAAMu6B,GAA+B9gB,EAA6B,CACxE/V,eAGK82B,GAAsBD,GAA8B,GAErDgT,EAAyB7zB,IAGzB8E,EAAWsb,cACXC,EAAS,IAAIC,gBAAgBxb,EAAS8T,QACtCkb,EAAcptC,QAAQ25B,EAAOG,IAAI,cACjC/H,EAAUC,cACVqb,EAAWjlC,cAEXklC,EAAoB50B,EAAiBD,EAAqBqqB,aAE1D3rB,EAAUo2B,YAAiBrmC,IAE1BsmC,EAAuBC,GAC5BxwC,mBAAkBmwC,IACbM,EAAsBC,GAC3B1wC,oBAAkB,GAEd2wC,EAAYb,EAAqB,GAAK,GACtCc,EAAsB,OAAGvtC,QAAH,IAAGA,OAAH,EAAGA,EAAcua,OAAO9X,GAAG,GACjD+qC,EAAqB,OAAG1T,QAAH,IAAGA,OAAH,EAAGA,EAAoBvf,OAAO9X,GAAG,GAE5D,QAAkBnE,IAAd0E,EAAyB,OAAO,KAmBpC,OACE,eAAC,IAAD,CAAO6H,UAAU,WAAWC,KAAMqhC,GAAW5kC,MAAO,CAAEpC,MAAO,QAA7D,UACIooC,GACDC,IACDZ,EAEI,KADF,cAACtxB,EAAD,IAGF,cAACmyB,EAAA,EAAD,CACElsC,SAAUqrB,EACVlT,QAAU7G,OAA6CvU,EAA7B,cAACktC,GAAD,IAC1Bf,WAAYA,EACZn/B,OAAQA,EACRoiC,iBACE72B,EAAU,IAAMgK,GAAsB,QAAQviB,KAGhDuU,IAC2B,IAA3B06B,IAC0B,IAA1BC,GAAmC,cAACn0B,EAAD,IACrC,eAAC,IAAD,CAAK7B,OAAQ20B,GAAW10B,MAAM,SAA9B,UACE,eAAC,IAAD,CAAKH,GAAIg2B,EAAWxe,GAAI,GAAxB,UACE,cAAC5E,GAAD,IACA,qBAAK3iB,MAAO,CAAE0d,UAAW,SAAzB,SACE,cAACqnB,GAAD,CAAiB/0B,QAAS,IAAM81B,GAAwB,UAG5D,cAAC,IAAD,CAAK/1B,GAAIg2B,EAAWxe,GAAI,GAAIvnB,MAAO,CAAE8c,UAAW8nB,IAAhD,SACE,cAACwB,EAAA,EAAD,CACEC,UAAWvD,GACX/nC,aAAY,OAAE+X,QAAF,IAAEA,OAAF,EAAEA,EAAsB/X,aAAajC,WACjD4a,OAAM,OAAEjb,QAAF,IAAEA,OAAF,EAAEA,EAAcib,OACtB4yB,YAAa7yB,IACb0K,YAAaA,EACbuF,aAAcA,EACd9T,SAAUtE,IA3CU,CAAC6a,IAAeogB,WAEpBvqB,SAASvgB,KAGzBuqC,SA0CN,eAAC,IAAD,CAAK/1B,OAAQ20B,GAAb,UACE,cAAC,IAAD,CAAK70B,GAAIg2B,EAAWxe,GAAI,GAAxB,SACE,eAAC,IAAD,CACEjkB,UAAU,WACVC,KAAMqhC,GACN5kC,MAAO,CAAEpC,MAAO,QAHlB,UAKI0N,EAOE,KANF,cAACu5B,GAAD,CACE7kC,MAAO,CAAEyQ,OAAQ,KACjB20B,UAAWA,EACX3pC,UAAWA,EACXgkC,GAAE,OAAEA,QAAF,IAAEA,IAAM,MAGd,cAACH,GAAD,IACA,cAACvE,GAAD,CAAuBjM,WAAYqW,SAIrC75B,EAQE,KAPF,cAAC,IAAD,CACEyE,GAAIg2B,EACJxe,GAAI,GACJvnB,MAAO,CAAE8c,UAAW0oB,EAAWZ,GAAY,GAH7C,SAKE,cAACjmB,GAAD,SAIN,cAAC3F,GAAD,CACE5T,QAASugC,EACTjgC,QAxFsB,KAE1BwkB,EAAQgN,QAAQt2B,YAAe,CAAEnF,eACjCmqC,GAAyB,MAuFvB,cAACxgB,GAAD,CACEnU,MAAO5R,EACPgmB,gBAAiBA,EACjBC,YAAW,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAiBrsB,KAC9BusB,mBAAoBkgB,EACpBrgC,QAASygC,EACTvgC,SAAU,IAAMwgC,GAAwB,GACxCtgB,WAAY8f,IAEbh2B,IAAYvL,GACX,cAACmT,GAAD,CACE9R,QAASiU,EACTtW,SAAU,IAAMuW,GAAsB,U,iaC7MjC,SAASktB,GAAmB,QACzCphC,EADyC,QAEzCM,EAFyC,qBAGzCiB,EAHyC,aAIzCC,EAJyC,iBAKzCC,IAQA,MAAO/D,GAAQgE,oBAcf,OACE,cAAC,IAAD,CACE1B,QAASA,EACTE,SAAUI,EACVhF,MACE,cAACM,EAAA,EAAD,CACEC,MAAO,kCACPC,IAAK,+FAGTmE,KAtBJ,WACEvC,EAAKoF,iBAELvB,EAAqB7D,EAAKoB,cAAc,sBACxCwB,KASA,SAWE,cAAC,IAAD,CAAM5C,KAAMA,EAAZ,SACE,cAACia,EAAA,EAAD,CACElT,YAAY,IACZjG,SAAUxL,GACR0K,EAAKgB,eAAe,CAClB1L,sBAGJY,KAAK,oBACLyK,cAAe,CACbC,MAAO,CAAC,CAAEC,UAAU,IACpBU,MACE,cAACrD,EAAA,EAAD,CACEC,MAAO,iDACPC,IACE,oNAURpD,IAAK,EACLmM,UACE,cAAC+S,EAAA,EAAD,CACEypB,WAAS,EACTv8B,QAAStD,EACToJ,QA/CW,KAErBnJ,EADqC,QAAjBD,EAAyB,MAAQ,gB,sBC1BlD,SAAS8/B,GAAqC,MACnD1mC,IAIA,OACE,eAAC2mC,EAAA,EAAD,CAAiBC,OAAQ,2CAAiC5mC,MAAOA,EAAjE,UACE,4BACE,8RACM,2BADN,EAEE,2BAFF,EAGgC,2BAHhC,EAKE,cAAC6mC,EAAA,EAAD,CAAc70B,KAAM80B,YAAa,sCAOrC,4BACE,8SACM,2BADN,EAEE,2BAFF,EAKE,cAACD,EAAA,EAAD,CAAc70B,KAAM80B,YAAa,yCCD5B,SAASC,GAA0B,kBAChD3uC,EADgD,qBAEhDuO,EAFgD,aAGhDC,EAHgD,iBAIhDC,EAJgD,eAKhDkkB,EALgD,aAMhDD,EANgD,gBAOhDpkB,EAPgD,cAQhDjD,IAUA,MACEjE,OAAO,OAAEC,IACPjK,qBAAWkK,MACT,YAAEqR,GAAgBvb,qBAAWwb,KAE7BjK,GACH3O,GAAqBC,YAASD,GAAmBE,GAAGC,MAEhDyyB,EAAsBC,GAC3B71B,oBAAkB,IAEbgS,EAAkBC,GAAuBjS,mBAC9C2R,EAA8B,UAAY,WAGrCigC,EAAwBC,GAC7B7xC,oBAAkB,GAEd8xC,EAAYpc,EAAaa,OAAOZ,GAEhCQ,EAAkB51B,uBACtB,CAACkH,EAAc2uB,EAAezc,KAC5B,IAAKlS,EAAO,OACZ,MAAMoK,EACsB,IAA1B8jB,EAAe5zB,QACY,IAA1B4zB,EAAe5zB,QAA0B,IAAVq0B,EAClC,OACE,cAAC1c,EAAA,EAAD,CACEjS,MAAOA,EACPP,OAAQ4qC,EACR9uC,kBAAmBA,EACnBuO,qBAAsBA,EACtBD,gBAAiBA,EACjBG,iBAAkBI,EAAeJ,OAAmB9P,EACpD6P,aAAcA,EACdmI,SAAUA,EACVE,cAAepS,IACb,IAAID,EAAiBsqC,EACrB,IAAKngC,GAAoD,IAArBmgC,EAAU/vC,OAAc,CAC1D,MAAMwF,EAAuBS,YAAwB,CACnDG,yBAA0BnF,EAC1BkF,eAAgB,EAChBD,oBAAqBR,EAAMZ,UAC1B4L,WACHjL,EAAiBH,YAAsB,CACrCH,OAAQyuB,EACRruB,qBAAsBtE,EACtBuE,yBAEFgK,EAAqBhK,GAEE,IAArBuqC,EAAU/vC,QAAcwP,EAAqB,KACjD,MAAMwgC,EAAoB3vC,iBACxBoF,GACA/E,GAAKA,EAAEmF,cAAgBH,EAAMG,cAG/B0J,EAAgBygC,QAKxB,CACEpc,EACAmc,EACA9uC,EACAuO,EACAD,EACAG,EACAD,EACAG,IAQJ,GAJAd,qBAAU,KACRoB,EAAoBN,EAA8B,UAAY,YAC7D,CAACA,KAECmgC,EAAW,OAAO,KAEvB,MACM/b,EADwB9uB,YAAyB6qC,GACM,IACvD3d,EAA4B,IAAMltB,YAAyB6qC,GACjE,IAAI1d,EASJ,SAASF,IACP,OACE,cAACxa,EAAA,EAAD,CACEjS,MAAO2sB,EACPltB,OAAQ4qC,EACR9uC,kBAAmBA,EACnBuO,qBAAsBA,EACtBD,gBAAiBA,EACjBG,iBAAkBA,EAClBD,aAAcA,EACdmI,SAAUhI,EACVpH,gBAAc,IAKpB,OAvBI4pB,IACFC,EAAa,CACXxsB,YAAa+T,EACb9U,QAASG,YAAiBmtB,GAA2BzwB,aAqBvD,eAAC,IAAKkM,KAAN,IACMvB,EACJzD,MAAO,IACL,OAAGyD,QAAH,IAAGA,OAAH,EAAGA,EAAezD,MAClBsB,QAAS,QACTa,aAAc,GALlB,UAQE,eAAC,IAAD,CACEmB,UAAU,WACVtD,MAAO,CAAEpC,MAAO,OAAQguB,UAAW,GACnCroB,KAAK,QAHP,UAKE,eAAC,IAAKyB,KAAN,CAAWhF,MAAO,CAAEmC,aAAc,GAAlC,UACE,mBAAGnC,MAAO,CAAEE,MAAOT,EAAOU,KAAK2J,SAA/B,SACE,iFAEF,cAAC48B,EAAD,CACE1mC,MAAO,CAAEmC,aAAc,UAEzB,cAAC,IAAM8G,MAAP,CACErF,SAAUmF,IACR,MAAMyb,EAAUzb,EAAElI,OAAO3L,MACT,YAAZsvB,GACF7d,EAAqB7L,YAAQvC,MAC7B8O,EAAoBmd,IACC,WAAZA,IACLuG,EAAe5zB,OACjB8vC,GAA0B,IAE1BtgC,EAAqB,KACrBU,EAAoBmd,IAGpB+E,GAC8B,MAA9BA,GAEAwB,EAAenzB,KAAK4xB,KAI1Bt0B,MAAOkS,EArBT,SAuBE,eAAC,IAAD,CAAO9D,UAAU,WAAjB,UACE,eAAC,IAAD,CAAOpO,MAAM,SAAb,UACE,kCACA,mBAAG8K,MAAO,CAAES,WAAY,IAAKR,SAAU,UAAvC,SACE,qLAGE,mCAIN,eAAC,IAAD,CAAO/K,MAAM,UAAb,UACE,sCACA,mBAAG8K,MAAO,CAAES,WAAY,IAAKR,SAAU,UAAvC,SACE,kJAEkC,2CAQ5C,cAAC,IAAD,CAAOD,MAAO,CAAEpC,MAAO,QAAU0F,UAAU,WAAWC,KAAK,QAA3D,SACGwnB,EAAezsB,KAAI,CAACzB,EAAO2uB,IAAUD,EAAgB1uB,EAAO2uB,OAE9DV,EACC,cAAC,IAAD,CAAO9qB,MAAO,CAAEpC,MAAO,QAAU0F,UAAU,WAAWC,KAAK,QAA3D,SACGunB,EAAaxsB,KAAI,CAACzB,EAAO2uB,IACxBD,EAAgB1uB,EAAO2uB,GAAO,OAGhC,KACHL,EACC,sBAAMnrB,MAAO,CAAEE,MAAOT,EAAOU,KAAK0rB,QAASprB,WAAY,KAAvD,SACE,mEAEA8oB,EAA4B,GAA2B,MAAtBnxB,EACnC,cAACkxB,EAAD,IACE,KACJ,cAAC,IAAKtkB,KAAN,CACEX,MACE,eAAC,IAAD,CAAOd,KAAK,QAAZ,UACE,wFAGA,cAAClB,EAAA,EAAD,CACEnB,IACE,8QAIE,cAAC,IAAD,CAAMP,GAAIC,YAAe,CAAEnF,UAAW,cAZlD,SAsBE,cAAC,IAAD,CACEyJ,KAAK,SACL8K,QAAS,KACPib,GAAwB,IAE1BxP,OAAK,EALP,SAOE,yCAGJ,sBAAKzb,MAAO,CAAEsB,QAAS,OAAQY,eAAgB,iBAA/C,UACE,sBAAMlC,MAAO,CAAEE,MAAOT,EAAOU,KAAK2J,SAAlC,SACE,+DAEE,cAACzH,EAAA,EAAD,CACEnB,IAAK,mGACLvD,UAAW,UACX2E,UAAW,CAAE8N,YAAa,UAKhC,+BACE,iCACE,cAAC7B,EAAA,EAAD,CACEnW,kBAAmBC,YAASD,GAC5BwO,aAAcA,EACd4H,aAAW,cAMrB,cAAClI,EAAA,EAAD,CACElB,QAAS4lB,EACTtkB,gBAAiBA,EACjBH,KAAM,MACNjK,OAAQ4qC,EACR9uC,kBAAmBA,EACnBuO,qBAAsBA,EACtBC,aAAcA,EACdC,iBAAkBA,EAClBnB,QAAS,IAAMulB,GAAwB,KAEzC,cAACub,EAAD,CACEphC,QAAS4hC,EACTthC,QAAS,IAAMuhC,GAA0B,GACzCtgC,qBAAsBA,EACtBC,aAAcA,EACdC,iBAAkBA,O,qECrTnB,MAAMugC,GAA+C,CAC1D,OACA,QACA,UACA,WAGWC,GAAoBC,IAC/B,OAAQA,GACN,IAAK,UACH,OAAO,iBACT,IAAK,QACH,OAAO,eACT,IAAK,UACH,OAAO,iBACT,QACE,OAAO,gBCVE,SAASC,IAAuB,oBAC7CC,IAIA,OACE,sBAAKxnC,MAAO,CAAEsB,QAAS,QAAvB,UACE,cAAC,IAAK0D,KAAN,CACEhM,KAAK,WACLiI,MAAO,iDACPjB,MAAO,CAAEpC,MAAO,QAChB+F,UAAQ,EAJV,SAME,cAACoZ,EAAA,EAAD,CACElT,YAAY,KACZ/L,IAAK,EACLkC,MAAO,CAAEskC,aAAc,QAG3B,cAAC,IAAKt/B,KAAN,CAAWhM,KAAK,eAAeiI,MAAO,yBAAtC,SACE,cAAC,IAAD,CACEH,UAAU,SACVd,MAAO,CACL8nB,SAAU,IACVrX,OAAQ,IAEVtH,aAAcq+B,EANhB,SAQGJ,GAAsB9oC,KAAIpJ,GACzB,cAAC,IAAOgsB,OAAR,CAA2BhsB,MAAOA,EAAlC,SACGmyC,GAAiBnyC,IADAA,YCpCzB,SAASuyC,KACd,OACE,cAACd,EAAA,EAAD,CAAiBC,OAAQ,6DAAzB,SACE,gCACE,4BACE,2FAIF,qBAAI5mC,MAAO,CAAEmC,aAAc,GAA3B,UACE,6BACE,8IACE,gCAIJ,6BACE,8IACE,wCC0DC,SAASulC,IAAY,cAClCC,EADkC,SAElC5kC,EAFkC,SAGlC6kC,IAKE,IAAD,EACD,MAAM,MACJpoC,EACAA,OAAO,OAAEC,IACPjK,qBAAWkK,MACT,UAAEnK,GAAcC,qBAAWC,MAC3B,aAAEmd,GAAiBpd,qBAAW+V,KAE9B6mB,EAAWC,eAEVwV,GAAeC,IAAKhhC,WAGrB,sBAAElO,EAAF,iBAAyBma,EAAzB,oBAA2C4gB,GAC/CG,aAAeC,GAASA,EAAMC,mBAC1B97B,EACJS,YACEC,IAGG0D,EAAQyrC,GAAa3yC,mBAAkB,KAIvCw1B,EAAeC,GAAoBz1B,mBAAkB,KAErDgD,EAAmBuO,GAAwBvR,mBAEhD,MAEKie,EAA2B8jB,GAChC/hC,mBAA2BisB,MACtB2mB,EAAiBC,GAAsB7yC,oBAAkB,GAG1D8yC,EAAgBlhC,mBACpB,mBAAO,CACL8G,gBAAiBiF,EAAmBA,EAAiBra,SAAW,IAChEN,kBAAiB,iBAAEF,QAAF,IAAEA,OAAF,EAAEA,EAAsBE,yBAAxB,QAA6C,IAC9Dib,0BAA2BzJ,SAAQ,iBACjC1R,QADiC,IACjCA,OADiC,EACjCA,EAAsBmb,iCADW,QAE/BgO,IAAgBxZ,YAEpB+K,aAAc+gB,EAAoBr3B,UAEpC,CAACyW,EAAkB7a,EAAsBy7B,KAGrC,eACJ5I,EADI,aAEJD,GAIE9jB,mBAAQ,KAAO,IAAD,IAChB,MAAMoM,GAAM,IAAID,MAAO9K,UAAY,IAe7BqhB,EAAiB7sB,GAEnBA,EAAMK,aACNL,EAAMK,YAAckW,IACnBw0B,GAdiC/qC,KACpC,IAAImf,GAAW,EAMf,OALY,OAAZpJ,QAAY,IAAZA,KAAcxb,SAAQyyB,IAChBrrB,IAAQqrB,EAAgBhtB,KAC1Bmf,GAAW,MAGRA,GAQL2N,CAA6B9sB,GAMjC,MAAO,CACLiuB,aAHgB,iBAAGxuB,QAAH,IAAGA,OAAH,EAAGA,EAAQ9E,QAAOqF,GAAS6sB,EAAc7sB,YAAzC,QAAoD,GAIpEkuB,eAHkB,iBAAGzuB,QAAH,IAAGA,OAAH,EAAGA,EAAQ9E,QAAOqF,IAAU6sB,EAAc7sB,YAA1C,QAAqD,MAKxE,CAACP,EAAQsrC,EAAUh1B,IAEtB2rB,2BAAgB,IAAM1T,EAAiBE,IAAiB,CAACA,IAGzD,MAAM6E,GAAmBj6B,uBAAY,KAAO,IAAD,IACzC,MAAMwyC,EAAkB,iBAAGjwC,QAAH,IAAGA,OAAH,EAAGA,EAAsBE,yBAAzB,QAA8C,IAChEgwC,EAA6Bx+B,SAAQ,iBACzC1R,QADyC,IACzCA,OADyC,EACzCA,EAAsBmb,iCADmB,QAEvCgO,IAAgBxZ,YAGdiG,EAAkBiF,EACpBnJ,SAASmJ,EAAiBra,UAC1B,EACJuvC,EAAmBn6B,EAAkB,GAErC,MAAMu6B,EAAeC,YAAmBx6B,GAExC+5B,EAAY/jC,eAAe,CACzBukC,aAAcA,EACd3vC,SAAU6vC,YAAmB,CAC3B7vC,SAAUoV,EACVw5B,KAAMe,IACLxgC,aAGL,MAAM+K,EAAY,OAAG+gB,QAAH,IAAGA,OAAH,EAAGA,EAAqBr3B,OAE1CqK,EAAqBwhC,GACrBhR,EAA6BiR,GAC7BL,EAAS,OAACn1B,QAAD,IAACA,IAAgB,MACzB,CAACi1B,EAAa90B,EAAkB7a,EAAsBy7B,IAEnD6U,GAAoB7yC,uBACxBO,UAAsC,IAAD,IACnC,IAAKX,EAAW,MAAM,IAAIqmB,MAAM,yCAEhC,MAAM1jB,EACJ,CACEyD,SAAUpG,EAAU4Q,qBAAqBzP,QACzC8e,MAAOja,IACPnD,kBAAiB,OACfA,QADe,IACfA,IAAqB0C,YAAQvC,KAC/B8a,0BAAyB,iBACvBA,QADuB,IACvBA,OADuB,EACvBA,EAA2BxL,kBADJ,QACkBwZ,IAC3C5L,kBAAmB,IACnBC,0BAA2B,KAGzBhd,EAAiB,OAANksB,QAAM,IAANA,KAAQlsB,SAAWkR,SAAQ,OAACgb,QAAD,IAACA,OAAD,EAACA,EAAQlsB,UAAY,EAC3D2vC,EAAY,iBAAGzjB,QAAH,IAAGA,OAAH,EAAGA,EAAQyjB,oBAAX,QAA2B,OAEvCI,EAAoBC,YAAmB,CAC3ChwC,SAAUA,EACV4uC,KAAMe,IACLxgC,WAEHuqB,EACEc,IAAwBC,yBACtBj7B,EAAuB,CAACA,GAAwB,KAGpDk6B,EACEc,IAAwBO,gBACtB3I,EAAaa,OAAOf,GAAetsB,IAAIU,OAG3CozB,EAASc,IAAwBkE,YAAxB,OAAoCqR,QAApC,IAAoCA,IAAqB,MAG7DA,GAA2C,MAAtBA,GACxBrW,EACEc,IAAwByV,gBACtBC,IAAwBz7B,eAMzB/U,GAA2C,MAAtBA,IACxBg6B,EACEc,IAAwB2V,kBACtBtV,IAA4BhmB,iBAGhC6kB,EACEc,IAAwB4V,wBACtBvV,IAA4ByI,wBAK1B,OAARj5B,QAAQ,IAARA,SAEF,CACE6nB,EACAE,EACAv1B,EACA68B,EACAh6B,EACAib,EACAtQ,IAKJw7B,2BAAgB,KACd3O,OACC,CAACA,KAGJ,MAMMmZ,GAAepzC,uBAAY,KAC/B,MAAM+C,EAAWmvC,EAAY3jC,cAAc,YACrCmkC,EAAeR,EAAY3jC,cAC/B,gBAGIukC,EAAoBT,EACtBU,YAAmB,CACjBhwC,SAAUA,EACV4uC,KAAMe,IACLxgC,WACH,IACEvL,EAASwuB,EAAaa,OAAOf,GAAetsB,IAAIU,KAChDgqC,EACJd,EAAcp6B,kBAAoB26B,GAClCP,EAAc9vC,oBAAsBA,GACpC8vC,EAAc70B,4BAA8BA,IAC3C7U,IAAQ0pC,EAAct1B,aAActW,GAC1B,OAAbqrC,QAAa,IAAbA,KAAgBqB,KACf,CACDhB,EACApd,EACAid,EACAK,EACApd,EACA6c,EACAt0B,EACAjb,IAOF,OAJA6N,qBAAU,KACR8iC,OACC,CAACA,KAGF,eAAC,IAAD,CACEjmC,KAAM+kC,EACN3kC,eAAgB6lC,GAChB1lC,OAAO,WACPN,SAAUylC,GAJZ,UAME,sBACExoC,MAAO,CACLyP,QAAS,OACTtN,aAAc,MACX8mC,YAAWzpC,GACdU,MAAOT,EAAOU,KAAK2J,SALvB,UAQE,cAACo/B,EAAA,EAAD,CACEtG,QAASoF,EACTpkC,SAAUg/B,IACRqF,EAAmBrF,GAEdA,GACHiF,EAAY/jC,eAAe,CAAEpL,SAAU,MAEzCmvC,EAAY/jC,eAAe,CACzBpL,SAAUywC,IAA+BthC,cAG7C7H,MAAO,CAAEmC,aAAc,QAZzB,SAcE,oDAGA6lC,EAUE,KATF,cAACoB,EAAA,EAAD,UACE,iKAGE,cAACvC,EAAA,EAAD,CAAc70B,KAAM80B,YAAa,0BAOtCkB,GACC,cAACT,GAAD,CACEC,oBAAqBK,EAAY3jC,cAAc,kBAInD,8BACE,cAACujC,GAAD,SAIJ,sBACEznC,MAAO,CACLyP,QAAS,OACTtN,aAAc,MACX8mC,YAAWzpC,GACdU,MAAOT,EAAOU,KAAK2J,SALvB,UAQE,oBAAI9J,MAAO,CAAEE,MAAOT,EAAOU,KAAK2J,SAAhC,SACE,oCAGF,cAACi9B,EAAD,CACE3uC,kBAAmBA,EACnBuO,qBAAsBA,EACtBC,aAAY,UAAE5E,YAAeqR,UAAjB,QAA+C,MAC3DxM,iBAAkBD,GAChBuwB,EAA6BkS,YAAoBziC,IAEnDmkB,eAAgBH,EAChBE,aAAcA,EACdpkB,gBAAiB6B,IACfsiB,EAAiBtiB,GACjBs/B,EAAY/jC,eAAe,CACzBonB,sBAAuB7uB,YAAyBkM,QAItD,cAAC+gC,EAAA,EAAD,CACEtwC,KAAM,wBACN0K,MAAO,CACL,CACE0F,UA/H0B,IAChCy+B,EAAY3jC,cAAc,yBAA2B,IAChDmF,QAAQM,SACVN,QAAQC,iBAkIb,cAAC,IAAKtE,KAAN,CAAWhF,MAAO,CAAE8c,UAAW,QAA/B,SACE,cAAC,IAAD,CAAQ7X,SAAS,SAASC,KAAK,UAA/B,SACE,4DC5ZK,SAASmxB,IAAc,QACpCjxB,EADoC,QAEpCM,EAFoC,SAGpCkiC,IAMA,MAAM,uBACJz8B,EADI,gBAEJF,EAFI,eAGJD,EAHI,2BAIJH,EAJI,WAKJO,GACER,YAAsBlF,GAE1B,OACE,qCACE,cAACD,EAAA,EAAD,CACE/E,MAAO,iBACP0E,QAASA,EACTM,QAASyF,EAHX,SAKE,cAACu8B,GAAD,CACE3kC,SAAUkI,EACV08B,cAAe38B,EACf48B,SAAUA,MAGd,cAACziC,EAAA,EAAD,CACEC,QAASyF,EACTxF,KAAM,KACJ+F,IACAH,KAEF3F,SAAU8F,S,mOCjCH,SAASm+B,GAAuB,UAC7CzwB,EAD6C,aAE7C7U,EAF6C,qBAG7CgpB,EAH6C,6BAI7Cuc,EAJ6C,MAK7CxpC,EAAQ,GALqC,SAM7C4D,EAN6C,aAO7CkJ,IAWA,MAAO/R,EAAc0uC,GAAmBr0C,mBACtC6O,GAGIylC,SACa3yC,IAAjBgE,GACAA,EAAa8M,aAAe0rB,IAA4Bx4B,eAGnD4uC,EAAqBC,GAC1Bx0C,mBAAkBs0C,GAEdG,EAAyBjgC,SAC7B2pB,IAA4Bx4B,cAG9B,OACE,sBAAKiF,MAAOA,EAAZ,UACE,cAAC,IAAU8pC,gBAAX,CACE50C,MAAO6F,EACP6I,SAAUhO,IACR6zC,EAAgB7zC,GAChBgO,EAAShO,IAEXgtC,QAAS+G,EACTI,UAAWnH,IACTgH,EAAuBhH,GAClBA,IACH6G,EAAgBI,GAChBjmC,EAASimC,KAGb/wB,UAAWA,EACXhM,aAAcA,IAGd48B,GAAmBC,GACrB1c,EAAqB91B,OACnB,sCACIuyC,GACA,cAACN,EAAA,EAAD,UACE,8KAOJ,cAAC,IAAUpb,kBAAX,CACEC,KAAMhB,EAAqB3uB,KAAIzB,GAASgC,YAAMhC,KAC9CqxB,cAAeD,IACb,MAAM3xB,EAAS2xB,EAAK3vB,KAAII,GAAOD,YAAQC,KACvC8qC,EAA6BltC,IAE/BmH,cAAe,CACbxC,MAAO,+DACPoD,MACE,gIAMJtJ,aAAY,OAAEA,QAAF,IAAEA,IAAgB,OAGhC,Q,wICtFK,SAASivC,GAAiB,MACvC90C,EADuC,SAEvC0O,EAFuC,YAGvC0I,EAHuC,SAIvCs7B,IAOA,MACEpoC,OAAO,OAAEC,IACPjK,qBAAWkK,KACf,OACE,qBAAKM,MAAO,CAAEsB,QAAS,QAAvB,SACE,cAAC,IAAK0D,KAAN,CACE/D,MACE,cAACD,EAAA,EAAD,CACEC,MACE2mC,EACE,4CAEA,oCAGJ1mC,IACEoL,GAAes7B,EACb,oHAKA,2FAOR5nC,MAAO,CAAEpC,MAAO,QAChB+F,UAAQ,EAzBV,SA2BE,cAACoZ,EAAA,EAAD,CACEjf,IAAK,EACL8gC,IAAKqL,IACLhgC,UACE,sBAAMjK,MAAO,CAAEE,MAAOT,EAAOU,KAAK2J,QAASsG,YAAa,IAAxD,SACE,uDAGJlb,MAAOA,EACP0O,SAAUA,EACV5D,MAAO,CAAEskC,aAAc,UCQjC,SAAS4F,GAAkB,YACzB59B,EADyB,oBAEzB69B,EAFyB,oBAGzBC,EAHyB,SAIzBxC,IAOA,MACEpoC,OAAO,OAAEC,IACPjK,qBAAWkK,KAET2qC,EAA4C,IAAtBD,EACtBE,EAAqBliC,gBACzB+hC,EAAsBA,EAAsBE,EAC5C,GAGIE,EAAoBniC,gBACxBkiC,EAAqBA,EAAqBD,EAC1C,GAGF,OACE,sBAAKrqC,MAAO,CAAEC,SAAU,UAAxB,WACIqM,GACA,cAAC88B,EAAA,EAAD,UACE,wFAKJ,4BAAIh8B,MACHg9B,EAAsB,GAAKxC,GAC1B,mCACE,eAAC7Z,EAAA,EAAD,CACE/tB,MAAO,CAAE8c,UAAW,GAAI1K,gBAAiB3S,EAAO4S,WAAWssB,IAD7D,UAGE,4BACE,2MAEWyL,GAFX,cAEE,gCAKJ,4BACE,uMAIK72B,YAAa+2B,GAJlB,EAQK/2B,YAAag3B,IARlB,cACM,2BADN,EAGE,wBAAQvqC,MAAO,CAAE4nB,WAAY,YAH/B,EAOE,wBAAQ5nB,MAAO,CAAE4nB,WAAY,yBAa9B,SAAS4iB,GAAU,cAChC7C,EADgC,SAEhC5kC,EAFgC,SAGhC6kC,IAKE,IAAD,EACD,MAAM,MACJpoC,EACAA,OAAO,OAAEC,IACPjK,qBAAWkK,MAER+qC,GAAa3jC,oBAEdsrB,EAAWC,eACX,qBACJvf,EADI,iBAEJC,EAFI,4BAGJ6gB,EAHI,sBAIJh7B,GACEk7B,aAAeC,GAASA,EAAMC,mBAC5B97B,EACJS,YACEC,GAGE8xC,EAAuBzyC,YAAqBC,GAC5CoU,EAAc9T,YAAmBua,GACjC43B,EAAqBr+B,EAGrB47B,EAAgBlhC,mBACpB,iBAAO,CACLjM,aAAY,UACV+X,EAAqB/X,oBADX,QAEVw4B,IAA4Bx4B,aAC9BoS,aACGw9B,IAAkB,OAAI53B,QAAJ,IAAIA,OAAJ,EAAIA,EAAkB5F,eACzCy7B,IAAwBz7B,aAC1BI,eACGm9B,IAAoB,OAAI53B,QAAJ,IAAIA,OAAJ,EAAIA,EAAsBvF,iBAC/CgmB,IAA4BhmB,eAC9BmG,OAAwB,OAAhBX,QAAgB,IAAhBA,KAAkBW,OACtBF,YAAkB,OAACT,QAAD,IAACA,OAAD,EAACA,EAAkBW,QACrCk3B,IAAkB/iC,cAExB,CACEiL,EAAqB/X,aADvB,OAEE+X,QAFF,IAEEA,OAFF,EAEEA,EAAsBvF,eACtBo9B,EAHF,OAIE53B,QAJF,IAIEA,OAJF,EAIEA,EAAkB5F,aAJpB,OAKE4F,QALF,IAKEA,OALF,EAKEA,EAAkBW,OAClBg3B,KAWG3vC,EAAc0uC,GAAmBr0C,mBACtC8yC,EAAcntC,eAEToS,EAAcw7B,GAAmBvzC,mBACtC8yC,EAAc/6B,eAETI,EAAgBs7B,GAAqBzzC,mBAC1C8yC,EAAc36B,iBAETmG,EAAQm3B,GAAaz1C,mBAAiB8yC,EAAcx0B,SAEpDo3B,EAAqBC,GAA0B31C,oBACpC,OAAhB2d,QAAgB,IAAhBA,OAAA,EAAAA,EAAkB5F,gBAAiBy7B,IAAwBz7B,eAGtD69B,EAAuBC,GAA4B71C,oBACpC,OAApB0d,QAAoB,IAApBA,OAAA,EAAAA,EAAsBvF,kBACpBgmB,IAA4BhmB,iBAGzB0f,GAAsByG,IAA2Bt+B,mBAAQ,OAC9Dw+B,QAD8D,IAC9DA,OAD8D,EAC9DA,EAA6Bt3B,QAGzB4uC,GAAmBv1C,uBAAYO,gBAC7Bu0C,EAAUviC,iBAChB,MAAMijC,EAA0Ble,GAAqB3uB,KAAIzB,GACvDmC,YAAcnC,KAOhBu1B,EACEc,IAAwB2X,UACtBO,YAAgB,OAAC13B,QAAD,IAACA,IAAUk3B,IAAkB/iC,cAGjDuqB,EAASc,IAAwByV,gBAAxB,OAAwCx7B,QAAxC,IAAwCA,IAAgB,MACjEilB,EAASc,IAAwBuW,gBAAxB,OAAwC1uC,QAAxC,IAAwCA,IAAgB,MAGjEq3B,EAASc,IAAwB2V,kBAAkBt7B,IACnD6kB,EAASc,IAAwB4V,wBAAwBv7B,IAEzD6kB,EACEc,IAAwBQ,wBAAwByX,IAG1C,OAARpoC,QAAQ,IAARA,SACC,CACDqvB,EACAnF,GACAlqB,EACAoK,EACAuG,EACA3Y,EACAwS,EACAk9B,IAGFxkC,qBAAU,KACR,MAAM+iC,EACJd,EAAcntC,eAAiBA,GAC/BmtC,EAAc/6B,eAAiBA,GAC/B+6B,EAAc36B,iBAAmBA,EACtB,OAAbo6B,QAAa,IAAbA,KAAgBqB,MAGlB,MAAMqC,GAAmC,CACvCnrC,MAAOT,EAAOU,KAAK0P,UAGfy7B,GAAsBzwC,WAC1B+Y,YAAmBxa,IAAUC,KAAK0B,KAG9BqvC,GAAsBvvC,WAC1BwS,YAAmBjU,IAAUC,KAAK8T,KAI9Bo+B,GAAkB,UAAG1wC,WAAW6Y,UAAd,QAAyBk3B,IAG3CT,GACJoB,GAHgD,IAAtBD,GAGiBC,GAS7C,OACE,cAAC,IAAD,CAAMloC,OAAO,WAAWN,SAAUmoC,GAAkBpoC,KAAM2nC,EAA1D,SACE,eAAC,IAAD,CAAOlnC,KAAK,SAASD,UAAU,WAA/B,UACE,gCACE,cAAC0mC,EAAD,CACE90C,MAAOwe,EACP9P,SAAU4nC,IACRX,EAAS,OAACW,QAAD,IAACA,IAAaZ,IAAkB/iC,aAE3CyE,YAAaA,EACbs7B,SAAUzvC,QAAQyvC,KAEpB,cAAC2B,EAAD,CACEtlC,aAAcqnC,GACd1nC,SAAU6nC,IAA8B,IAAD,EACrChC,EACEiC,YAAgB,iBACdD,QADc,IACdA,OADc,EACdA,EAA2B5jC,kBADb,QAC2B,KACzCA,aAGN7H,MAAO,IAAKipC,YAAWzpC,GAAQiQ,QAAS,GAAItN,aAAc,IAC1D8qB,qBAAsBA,GACtBuc,6BAA8B9V,GAC9B5mB,aAAclD,SAAS8J,KAGzB,cAAC,IAAK1O,KAAN,CACEX,MACE,cAAC6lC,EAAD,CACE59B,YAAaq+B,EACbR,oBAAqBA,GACrBC,oBAAqBA,GACrBxC,SAAUA,IAGd3mC,MACE,eAACioC,EAAA,EAAD,CACEtlC,SAAUg/B,IACRmI,EAAuBnI,GAClBA,GACH+F,EAAgBC,IAAwBz7B,eAE5Cy1B,QAASkI,EACTl7B,UAAW+6B,EAPb,UASE,yCACEG,GAAuBH,GACvB,uBAAM3qC,MAAOqrC,GAAb,UACG,IADH,IAEIzC,IAAwBz7B,aAF5B,WAONnN,MAAO,IAAKipC,YAAWzpC,GAAQiQ,QAAS,GAAItN,aAAc,IA5B5D,SA8BGwoC,GAAsBG,GACrB,cAACa,EAAA,EAAD,CACE/M,IApSU,GAqSVt0B,YAAa8/B,GACb7/B,OAAO,IACP3G,SAAU1O,IAAK,aACbyzC,EACEiD,YAAgB,iBAAC12C,QAAD,IAACA,OAAD,EAACA,EAAO2S,kBAAR,QAAsB,KAAKA,aAG/CwC,KAAM,OAKZ,cAAC,IAAUwhC,sBAAX,CACE5qC,MACE,qCACE,2CACE+pC,GAAyBN,GACzB,uBAAM1qC,MAAOqrC,GAAb,UACG,IADH,IAEIS,IAFJ,WAON52C,MAAOuY,YAAqBrU,IAAUC,KAAKkU,IAC3C3J,SAAUmoC,IAAgC,IAAD,EACvClD,EACEmD,YAAkB,iBAChBD,QADgB,IAChBA,OADgB,EAChBA,EAA6BlkC,kBADb,QAC2B,KAC3CA,aAGN7H,MAAO,IAAKipC,YAAWzpC,GAAQiQ,QAAS,GAAItN,aAAc,IAC1D4nC,UAAWkB,EACXrI,QAASoI,EACTp7B,UAAW86B,OAGf,cAACpB,EAAA,EAAD,CACEtwC,KAAM,wBACN0K,MAAO,CACL,CACE0F,UA7GyB,IAC/B/M,YAAyB4wB,IAAwB,IAC5C5jB,QAAQM,OAAQ,qCAElBN,QAAQC,cA6GX,cAAC,IAAKtE,KAAN,UACE,cAAC,IAAD,CAAQC,SAAS,SAASC,KAAK,UAA/B,SACE,4DChZG,SAASoxB,GAAY,QAClClxB,EADkC,QAElCM,EAFkC,SAGlCkiC,IAMA,MAAM,uBACJz8B,EADI,gBAEJF,EAFI,eAGJD,EAHI,2BAIJH,EAJI,WAKJO,GACER,YAAsBlF,GAE1B,OACE,qCACE,eAACD,EAAA,EAAD,CACE/E,MAAO,uBACP0E,QAASA,EACTM,QAASyF,EAHX,UAKE,4BACE,gEAEF,cAAC4iB,EAAA,EAAD,CAAS/tB,MAAO,CAAEmC,aAAc,QAAhC,SACE,uMACiB,2BADjB,EAG4B,gCAI9B,cAACqoC,EAAD,CACEznC,SAAUkI,EACV08B,cAAe38B,EACf48B,SAAUA,OAGd,cAACziC,EAAA,EAAD,CACEC,QAASyF,EACTxF,KAAM,KACJ+F,IACAH,KAEF3F,SAAU8F,S,wRCnDH,SAAS6gC,GAAkB,mBACxCC,IAIA,OACE,eAAC,IAAD,CAAO5oC,UAAU,WAAjB,UACE,iHAIC4oC,GACC,cAAC9C,EAAA,EAAD,UACE,yFCSK,SAAS+C,GAAU,cAChCxE,EADgC,SAEhC5kC,IAKA,MAAM,MAAEvD,GAAUhK,qBAAWkK,KAEvB0yB,EAAWC,eACX,qBAAEvf,EAAF,iBAAwBC,GAAqB+gB,aACjDC,GAASA,EAAMC,mBAIXkU,EAAgBlhC,mBACpB,iBAAO,CACL2G,SAAUmF,EAAqBnF,SAC/B3S,aAAc8X,EAAqB9X,aACnC+rB,eAAgBrsB,YAA0B,UACxCqY,EAAiBpY,cADuB,QACbyxC,IAAwB11C,YAGvD,CAACqc,EAAkBD,KAGdo5B,EAAoBG,GAAyBj3C,oBAAkB,IAC/D2xB,EAAgBulB,GAAqBl3C,mBAC1C8yC,EAAcnhB,iBAETpZ,EAAU4+B,GAAen3C,mBAAkB8yC,EAAcv6B,WACzD3S,EAAcwxC,GAAmBp3C,mBACtC8yC,EAAcltC,cAGhBiL,qBAAU,KACR,MAAM+iC,EACJd,EAAcltC,eAAiBA,GAC/BktC,EAAcv6B,WAAaA,IAC1BnP,IAAQ0pC,EAAcnhB,eAAgBA,GAC5B,OAAb4gB,QAAa,IAAbA,KAAgBqB,KACf,CAACrB,EAAeO,EAAev6B,EAAU3S,EAAc+rB,IAE1D,MAAM0lB,EAAc92C,uBAAY,KAC9By8B,EAASc,IAAwBqZ,YAAY5+B,IAC7CykB,EAASc,IAAwBsZ,gBAAgBxxC,IACjDo3B,EAASc,IAAwBwZ,UAAU3lB,EAAerwB,UAClD,OAARqM,QAAQ,IAARA,SACC,CAACqvB,EAAUrvB,EAAUgkB,EAAgBpZ,EAAU3S,IAE5C2xC,EAAuB,CAC3BrrC,QAAS,OACTpB,MAAOV,EAAMC,OAAOU,KAAK2J,QACzBrJ,WAAY,KAGRmsC,GACH7lB,IAAmBoY,oBAAUpY,EAAerwB,SAE/C,OACE,cAAC,IAAD,CAAM2M,OAAO,WAAWN,SAAU0pC,EAAlC,SACE,eAAC,IAAD,CAAOnpC,UAAU,WAAWC,KAAK,QAAjC,UACE,sBAAKvD,MAAO,IAAKipC,YAAWzpC,GAAQiQ,QAAS,QAA7C,UACE,cAAC,IAAKzK,KAAN,CACEX,MACE,qFAFJ,SAOE,sBACErE,MAAO,IACF2sC,GAFP,UAKE,cAAC,IAAD,CACE/oC,SAAU2oC,EACVvsC,MAAO,CAAEoQ,YAAa,UACtBwyB,QAASj1B,IAEX,8CAGJ,cAAC,IAAK3I,KAAN,CACEX,MACE,cAAC4nC,EAAD,CAAmBC,mBAAoBA,IAF3C,SAKE,sBACElsC,MAAO,IACF2sC,GAFP,UAKE,cAAC,IAAD,CACE/oC,SAAUg/B,IACRyJ,EAAsBzJ,GACtB4J,EAAgB5J,IAElB5iC,MAAO,CAAEoQ,YAAa,UACtBwyB,QAAS5nC,IAEX,sDAKN,cAAC,IAAKgK,KAAN,CACEhF,MAAO,IAAKipC,YAAWzpC,GAAQiQ,QAAS,QACxCxO,MACE,cAAC4rC,EAAA,EAAD,UACE,kDAJN,SAQE,cAACC,EAAA,EAAD,CACEC,iBAAkBA,cAClBC,iBAAkBjmB,EAClBnjB,SAAU0oC,MAId,cAAC,IAAKtnC,KAAN,UACE,cAAC,IAAD,CAAQC,SAAS,SAASC,KAAK,UAAU0K,SAAUg9B,EAAnD,SACE,8CC9IG,SAASrW,GAAY,QAClCnxB,EADkC,QAElCM,IAKA,MAAM,uBACJyF,EADI,gBAEJF,EAFI,eAGJD,EAHI,2BAIJH,EAJI,WAKJO,GACER,YAAsBlF,GAE1B,OACE,qCACE,cAACD,EAAA,EAAD,CACE/E,MAAO,eACP0E,QAASA,EACTM,QAASyF,EAHX,SAKE,cAACghC,EAAD,CAAWppC,SAAUkI,EAAiB08B,cAAe38B,MAEvD,cAAC7F,EAAA,EAAD,CACEC,QAASyF,EACTxF,KAAM,KACJ+F,IACAH,KAEF3F,SAAU8F,S,8GCpCd6hC,EAAiCrP,gBAAoB,MAC9CsP,EAA4BD,EAAkBE,SAC1CF,IACJG,EAAsCxP,gBAAoB,MAC1DyP,EAAiCD,EAAuBD,S,SCF/DG,EAAgC,SAAUz1C,EAAGkR,GAC/C,IAAIgd,EAAI,GAER,IAAK,IAAIzrB,KAAKzC,EACRuD,OAAOmyC,UAAUC,eAAeC,KAAK51C,EAAGyC,IAAMyO,EAAE2kC,QAAQpzC,GAAK,IAAGyrB,EAAEzrB,GAAKzC,EAAEyC,IAG/E,GAAS,MAALzC,GAAqD,oBAAjCuD,OAAOuyC,sBAA2C,KAAIzzC,EAAI,EAAb,IAAgBI,EAAIc,OAAOuyC,sBAAsB91C,GAAIqC,EAAII,EAAEnD,OAAQ+C,IAClI6O,EAAE2kC,QAAQpzC,EAAEJ,IAAM,GAAKkB,OAAOmyC,UAAUK,qBAAqBH,KAAK51C,EAAGyC,EAAEJ,MAAK6rB,EAAEzrB,EAAEJ,IAAMrC,EAAEyC,EAAEJ,KAEhG,OAAO6rB,GAcL8nB,EAAgB,SAAuBnQ,EAAOC,GAChD,IAAImQ,EAEAC,EAAenQ,aAAiBqP,GAChCe,EAAyBpQ,aAAiBwP,GAE1Ca,EAAoBrQ,aAAiBsQ,KACrCC,EAAeF,EAAkBE,aACjC7qC,EAAY2qC,EAAkB3qC,UAE9B8qC,EAAWxQ,WACXyQ,EAAYC,YAAW3Q,EAAKyQ,GAG5BG,EADc/4C,qBAAWg5C,KACKD,gBAW9BE,EAAqB/Q,EAAMgR,UAC3B5tC,EAAY48B,EAAM58B,UAClB6E,EAAW+3B,EAAM/3B,SACjB3F,EAAQ09B,EAAM19B,MACd2uC,EAAiBjR,EAAM9tB,SACvBg/B,EAAYtB,EAAO5P,EAAO,CAAC,YAAa,YAAa,WAAY,QAAS,aAE1EmR,EAAiBV,EAAa,QAASM,GACvCC,EAAkI,aAAnG,OAAjBX,QAA0C,IAAjBA,OAA0B,EAASA,EAAae,aAAed,GAAuC,GAAGriB,OAAOkjB,EAAgB,WAAaA,EAEpLE,EAAaC,YAAS,GAAIJ,GAG1Bh/B,EAAWguB,aAAiBqR,KAChCF,EAAWn/B,SAAW++B,GAAkB/+B,EAEpCm+B,IACFgB,EAAW/1C,KAAO+0C,EAAa/0C,KAC/B+1C,EAAWnrC,SAzBE,SAAkBmF,GAC/B,IAAImmC,EAAIC,EAEkB,QAAzBD,EAAKxR,EAAM95B,gBAA6B,IAAPsrC,GAAyBA,EAAGzB,KAAK/P,EAAO30B,GACmB,QAA5FomC,EAAsB,OAAjBpB,QAA0C,IAAjBA,OAA0B,EAASA,EAAanqC,gBAA6B,IAAPurC,GAAyBA,EAAG1B,KAAKM,EAAchlC,IAsBpJgmC,EAAWnM,QAAUlF,EAAMxoC,QAAU64C,EAAa74C,MAClD65C,EAAWn/B,SAAWm/B,EAAWn/B,UAAYm+B,EAAan+B,UAG5D,IAAIw/B,EAAqBC,IAAW,GAAG1jB,OAAO+iB,EAAW,aAAcZ,EAAc,GAAIwB,YAAgBxB,EAAa,GAAGniB,OAAO+iB,EAAW,oBAAqBK,EAAWnM,SAAU0M,YAAgBxB,EAAa,GAAGniB,OAAO+iB,EAAW,qBAAsBK,EAAWn/B,UAAW0/B,YAAgBxB,EAAa,GAAGniB,OAAO+iB,EAAW,gBAA+B,QAAdprC,GAAsBgsC,YAAgBxB,EAAa,GAAGniB,OAAO+iB,EAAW,yBAA0BH,GAAkBT,GAAchtC,GACxd,OAGE88B,gBAAoB,QAAS,CAC3B98B,UAAWsuC,EACXpvC,MAAOA,EACPuvC,aAAc7R,EAAM6R,aACpBC,aAAc9R,EAAM8R,cACN5R,gBAAoB6R,IAAYT,YAAS,GAAID,EAAY,CACvE7pC,KAAM,QACNwpC,UAAWA,EACX/Q,IAAK0Q,UACWt3C,IAAb4O,EAAsCi4B,gBAAoB,OAAQ,KAAMj4B,GAAY,OAIzF+pC,EAAqB9R,aAAiBiQ,GAC1C6B,EAAM1R,YAAc,QACL0R,Q,wBCnFf,IAAIC,EAA0B/R,cAAiB,SAAUF,EAAOC,GAC9D,IAAIsQ,EAAoBrQ,aAAiBsQ,KACrCC,EAAeF,EAAkBE,aACjC7qC,EAAY2qC,EAAkB3qC,UAE9BC,EAAOq6B,aAAiBgS,KAExBC,EAAkBC,YAAepS,EAAMv0B,aAAc,CACvDjU,MAAOwoC,EAAMxoC,QAEX66C,EAAmBC,YAAeH,EAAiB,GACnD36C,EAAQ66C,EAAiB,GACzB56C,EAAW46C,EAAiB,GA0EhC,OAAoBnS,gBAAoBsP,EAA2B,CACjEh4C,MAAO,CACL0O,SA1EgB,SAAuBqsC,GACzC,IAAIC,EAAYh7C,EACZU,EAAMq6C,EAAGpvC,OAAO3L,MAEd,UAAWwoC,GACfvoC,EAASS,GAGX,IAAIgO,EAAW85B,EAAM95B,SAEjBA,GAAYhO,IAAQs6C,GACtBtsC,EAASqsC,IAgET/6C,MAAOA,EACP0a,SAAU8tB,EAAM9tB,SAChB5W,KAAM0kC,EAAM1kC,KACZ81C,WAAYpR,EAAMoR,aA/DJ,WAChB,IAAIhB,EAEAW,EAAqB/Q,EAAMgR,UAC3ByB,EAAmBzS,EAAM58B,UACzBA,OAAiC,IAArBqvC,EAA8B,GAAKA,EAC/CC,EAAU1S,EAAM0S,QAChBC,EAAqB3S,EAAM4S,YAC3BA,OAAqC,IAAvBD,EAAgC,UAAYA,EAC1DzgC,EAAW8tB,EAAM9tB,SACjBjK,EAAW+3B,EAAM/3B,SACjB4qC,EAAgB7S,EAAMn6B,KACtBvD,EAAQ09B,EAAM19B,MACdwd,EAAKkgB,EAAMlgB,GACX+xB,EAAe7R,EAAM6R,aACrBC,EAAe9R,EAAM8R,aACrBd,EAAYP,EAAa,QAASM,GAClC+B,EAAiB,GAAG7kB,OAAO+iB,EAAW,UACtC+B,EAAmB9qC,EAEnByqC,GAAWA,EAAQj5C,OAAS,IAC9Bs5C,EAAmBL,EAAQ9xC,KAAI,SAAUoyC,GACvC,MAAsB,kBAAXA,GAAyC,kBAAXA,EAEnB9S,gBAAoB8R,EAAO,CAC7C1mC,IAAK0nC,EAAO7oC,WACZ6mC,UAAWA,EACX9+B,SAAUA,EACV1a,MAAOw7C,EACP9N,QAAS1tC,IAAUw7C,GAClBA,GAIe9S,gBAAoB8R,EAAO,CAC7C1mC,IAAK,6BAA6B2iB,OAAO+kB,EAAOx7C,OAChDw5C,UAAWA,EACX9+B,SAAU8gC,EAAO9gC,UAAYA,EAC7B1a,MAAOw7C,EAAOx7C,MACd0tC,QAAS1tC,IAAUw7C,EAAOx7C,MAC1B8K,MAAO0wC,EAAO1wC,OACb0wC,EAAOzvC,WAId,IAAI0vC,EAAaJ,GAAiBhtC,EAC9BqtC,EAAcvB,IAAWmB,EAAgB,GAAG7kB,OAAO6kB,EAAgB,KAAK7kB,OAAO2kB,IAAexC,EAAc,GAAIwB,YAAgBxB,EAAa,GAAGniB,OAAO6kB,EAAgB,KAAK7kB,OAAOglB,GAAaA,GAAarB,YAAgBxB,EAAa,GAAGniB,OAAO6kB,EAAgB,QAAuB,QAAdltC,GAAsBwqC,GAAchtC,GACrT,OAAoB88B,gBAAoB,MAAOoR,YAAS,GCvF7C,SAA4BtR,GACzC,OAAOtiC,OAAOkgB,KAAKoiB,GAAO3jC,QAAO,SAAU4mB,EAAM3X,GAK/C,OAJKA,EAAI6nC,WAAW,WAAY7nC,EAAI6nC,WAAW,UAAoB,SAAR7nC,GAAoBA,EAAI6nC,WAAW,aAC5FlwB,EAAK3X,GAAO00B,EAAM10B,IAGb2X,IACN,IDgF2DmwB,CAAmBpT,GAAQ,CACrF58B,UAAW8vC,EACX5wC,MAAOA,EACPuvC,aAAcA,EACdC,aAAcA,EACdhyB,GAAIA,EACJmgB,IAAKA,IACH8S,GAWHM,OAEuBnT,SAAW+R,GEzGnCrC,EAAgC,SAAUz1C,EAAGkR,GAC/C,IAAIgd,EAAI,GAER,IAAK,IAAIzrB,KAAKzC,EACRuD,OAAOmyC,UAAUC,eAAeC,KAAK51C,EAAGyC,IAAMyO,EAAE2kC,QAAQpzC,GAAK,IAAGyrB,EAAEzrB,GAAKzC,EAAEyC,IAG/E,GAAS,MAALzC,GAAqD,oBAAjCuD,OAAOuyC,sBAA2C,KAAIzzC,EAAI,EAAb,IAAgBI,EAAIc,OAAOuyC,sBAAsB91C,GAAIqC,EAAII,EAAEnD,OAAQ+C,IAClI6O,EAAE2kC,QAAQpzC,EAAEJ,IAAM,GAAKkB,OAAOmyC,UAAUK,qBAAqBH,KAAK51C,EAAGyC,EAAEJ,MAAK6rB,EAAEzrB,EAAEJ,IAAMrC,EAAEyC,EAAEJ,KAEhG,OAAO6rB,GAQLirB,EAAc,SAAqBtT,EAAOC,GAC5C,IACIwQ,EADoBvQ,aAAiBsQ,KACJC,aAEjCM,EAAqB/Q,EAAMgR,UAC3BK,EAAazB,EAAO5P,EAAO,CAAC,cAE5BgR,EAAYP,EAAa,QAASM,GACtC,OAAoB7Q,gBAAoByP,EAAgC,CACtEn4C,MAAO,UACO0oC,gBAAoB8R,EAAOV,YAAS,CAClDN,UAAWA,GACVK,EAAY,CACb7pC,KAAM,QACNy4B,IAAKA,OAImBC,eAAiBoT,GCnCzCtB,EAAQ7B,EACZ6B,EAAMuB,OAASA,EACfvB,EAAMzmC,MAAQA,EAECymC","file":"static/js/13.def72972.chunk.js","sourcesContent":["import { Contract, EventFilter } from '@ethersproject/contracts'\r\nimport { V2UserContext } from 'contexts/v2/userContext'\r\n\r\nimport { V2ContractName, V2Contracts } from 'models/v2/contracts'\r\nimport { useCallback, useContext, useState } from 'react'\r\nimport { useDeepCompareEffectNoCheck } from 'use-deep-compare-effect'\r\nimport * as Sentry from '@sentry/browser'\r\n\r\ntype ContractUpdateOn = {\r\n  contract?: ContractConfig\r\n  eventName?: string\r\n  topics?: EventFilter['topics']\r\n}[]\r\n\r\ntype ContractConfig = V2ContractName | Contract | undefined\r\n\r\nexport type ContractReadResult<V> = { data: V | undefined; loading: boolean }\r\n\r\nexport default function useV2ContractReader<V>({\r\n  contract,\r\n  functionName,\r\n  args,\r\n  updateOn,\r\n  formatter,\r\n  callback,\r\n  valueDidChange,\r\n}: {\r\n  contract?: ContractConfig\r\n  functionName?: string\r\n  args?: unknown[] | null\r\n  updateOn?: ContractUpdateOn\r\n  formatter?: (val?: any) => V | undefined // eslint-disable-line @typescript-eslint/no-explicit-any\r\n  callback?: (val?: V) => void\r\n  valueDidChange?: (oldVal?: V, newVal?: V) => boolean\r\n}): ContractReadResult<V> {\r\n  const [value, setValue] = useState<V | undefined>()\r\n  const [loading, setLoading] = useState<boolean>(true)\r\n\r\n  const { contracts } = useContext(V2UserContext)\r\n\r\n  const _formatter = useCallback(\r\n    (val: any) => (formatter ? formatter(val) : val), // eslint-disable-line @typescript-eslint/no-explicit-any\r\n    [formatter],\r\n  )\r\n  const _callback = useCallback(\r\n    (val: any) => (callback ? callback(val) : val), // eslint-disable-line @typescript-eslint/no-explicit-any\r\n    [callback],\r\n  )\r\n  const _valueDidChange = useCallback(\r\n    (a?: any, b?: any) => (valueDidChange ? valueDidChange(a, b) : a !== b), // eslint-disable-line @typescript-eslint/no-explicit-any\r\n    [valueDidChange],\r\n  )\r\n\r\n  useDeepCompareEffectNoCheck(() => {\r\n    async function getValue() {\r\n      const readContract = contractToRead(contract, contracts)\r\n\r\n      console.info(readContract, functionName, args, contract, contracts)\r\n\r\n      if (!readContract || !functionName || args === null) return\r\n\r\n      try {\r\n        console.info('📚 Read >', functionName)\r\n\r\n        setLoading(true)\r\n        const result = await readContract[functionName](...(args ?? []))\r\n\r\n        const newValue = _formatter(result)\r\n\r\n        if (_valueDidChange(value, newValue)) {\r\n          console.info(\r\n            '📗 New >',\r\n            functionName,\r\n            { args },\r\n            { newValue },\r\n            { contract: readContract.address },\r\n          )\r\n          setValue(newValue)\r\n          _callback(newValue)\r\n        }\r\n      } catch (err) {\r\n        console.error(\r\n          '📕 Read error >',\r\n          functionName,\r\n          { args },\r\n          { err },\r\n          { contract: readContract.address },\r\n          contracts,\r\n        )\r\n\r\n        Sentry.captureException(err, {\r\n          tags: {\r\n            contract: typeof contract === 'string' ? contract : undefined,\r\n            contract_function: functionName,\r\n          },\r\n        })\r\n\r\n        setValue(_formatter(undefined))\r\n        _callback(_formatter(undefined))\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    }\r\n\r\n    getValue()\r\n\r\n    const listener = () => getValue()\r\n\r\n    const subscriptions: {\r\n      contract: Contract\r\n      filter: EventFilter\r\n    }[] = []\r\n\r\n    if (updateOn?.length) {\r\n      try {\r\n        // Subscribe listener to updateOn events\r\n        updateOn.forEach(u => {\r\n          const _contract = contractToRead(u.contract, contracts)\r\n\r\n          if (!u.eventName || !_contract) return\r\n\r\n          const filter = _contract.filters[u.eventName](...(u.topics ?? []))\r\n          _contract?.on(filter, listener)\r\n          subscriptions.push({\r\n            contract: _contract,\r\n            filter,\r\n          })\r\n        })\r\n      } catch (error) {\r\n        console.error('Read contract >', {\r\n          functionName,\r\n          error,\r\n        })\r\n      }\r\n    }\r\n\r\n    return () => subscriptions.forEach(s => s.contract.off(s.filter, listener))\r\n  }, [\r\n    contract,\r\n    contracts,\r\n    functionName,\r\n    updateOn,\r\n    args,\r\n    _formatter,\r\n    _callback,\r\n    _valueDidChange,\r\n  ])\r\n\r\n  return { data: value, loading }\r\n}\r\n\r\nfunction contractToRead(\r\n  contractConfig?: ContractConfig,\r\n  contracts?: V2Contracts,\r\n): Contract | undefined {\r\n  if (!contractConfig) return\r\n\r\n  if (typeof contractConfig === 'string') {\r\n    return contracts ? contracts[contractConfig] : undefined\r\n  } else return contractConfig\r\n}\r\n","import * as constants from '@ethersproject/constants'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { getAddress } from '@ethersproject/address'\r\nimport {\r\n  V2FundingCycle,\r\n  V2FundingCycleMetadata,\r\n  V2FundingCycleMetadataGlobal,\r\n} from 'models/v2/fundingCycle'\r\n\r\nimport { invertPermyriad } from 'utils/bigNumbers'\r\nimport unsafeFundingCycleProperties from 'utils/unsafeFundingCycleProperties'\r\n\r\nimport { fromWad, parseWad } from '../formatNumber'\r\n\r\nimport {\r\n  SerializedV2FundAccessConstraint,\r\n  SerializedV2FundingCycleData,\r\n} from './serializers'\r\nimport { FundingCycleRiskFlags } from 'constants/fundingWarningText'\r\nimport { getBallotStrategyByAddress } from 'constants/v2/ballotStrategies/getBallotStrategiesByAddress'\r\nimport { MAX_DISTRIBUTION_LIMIT } from './math'\r\n\r\nexport const hasDistributionLimit = (\r\n  fundAccessConstraint: SerializedV2FundAccessConstraint | undefined,\r\n): boolean => {\r\n  return Boolean(\r\n    fundAccessConstraint?.distributionLimit &&\r\n      !parseWad(fundAccessConstraint.distributionLimit).eq(\r\n        MAX_DISTRIBUTION_LIMIT,\r\n      ),\r\n  )\r\n}\r\n\r\nexport const hasFundingDuration = (\r\n  fundingCycle: Pick<SerializedV2FundingCycleData, 'duration'>,\r\n) => Boolean(fundingCycle?.duration && fundingCycle?.duration !== '0')\r\n\r\n/**\r\n * Return the default fund access constraint for a project.\r\n *\r\n * Projects can have multiple access constraints. This frontend creates one for them,\r\n * using the default ETH payment terminal.\r\n */\r\nexport function getDefaultFundAccessConstraint<T>(\r\n  fundAccessConstraints: T[],\r\n): T | undefined {\r\n  return fundAccessConstraints[0]\r\n}\r\n\r\n/**\r\n * | flags (1 bit each) | ballot redemption rate (16 bits) | redemption rate (16 bits) | reserved rate (16 bits) |     global (16 bits)    | version (8 bits)  |\r\n * |         p          |        bbbbbbbbbbbbbbbb          |    RRRRRRRRRRRRRRRR       |     rrrrrrrrrrrrrrrr    |     00000000000000tt    |     VVVVVVVV      |\r\n */\r\n\r\nconst bits16 = 0b1111111111111111\r\nconst bits8 = 0b11111111\r\nconst bits1 = 0b1\r\n\r\nconst bigNumberToBoolean = (val: BigNumber) => Boolean(val.toNumber())\r\n\r\nconst parameters: {\r\n  name: keyof V2FundingCycleMetadata\r\n  bits: 0 | 1 | 8 | 16\r\n  parser?: (\r\n    val: BigNumber,\r\n  ) =>\r\n    | string\r\n    | boolean\r\n    | BigNumber\r\n    | number\r\n    | undefined\r\n    | V2FundingCycleMetadataGlobal\r\n}[] = [\r\n  {\r\n    name: 'version',\r\n    bits: 8,\r\n    parser: (val: BigNumber) =>\r\n      val.toNumber() as V2FundingCycleMetadata['version'],\r\n  },\r\n  {\r\n    name: 'global',\r\n    bits: 16,\r\n    parser: val => {\r\n      return {\r\n        allowSetTerminals: bigNumberToBoolean(BigNumber.from(val).shr(1)),\r\n        allowSetController: bigNumberToBoolean(BigNumber.from(val).shr(2)),\r\n      }\r\n    },\r\n  },\r\n  { name: 'reservedRate', bits: 16 },\r\n  { name: 'redemptionRate', bits: 16, parser: invertPermyriad },\r\n  { name: 'ballotRedemptionRate', bits: 16, parser: invertPermyriad },\r\n  { name: 'pausePay', bits: 1, parser: bigNumberToBoolean },\r\n  {\r\n    name: 'pauseDistributions',\r\n    bits: 1,\r\n    parser: bigNumberToBoolean,\r\n  },\r\n  { name: 'pauseRedeem', bits: 1, parser: bigNumberToBoolean },\r\n  { name: 'pauseBurn', bits: 1, parser: bigNumberToBoolean },\r\n  { name: 'allowMinting', bits: 1, parser: bigNumberToBoolean },\r\n  { name: 'allowChangeToken', bits: 1, parser: bigNumberToBoolean },\r\n  {\r\n    name: 'allowTerminalMigration',\r\n    bits: 1,\r\n    parser: bigNumberToBoolean,\r\n  },\r\n  {\r\n    name: 'allowControllerMigration',\r\n    bits: 1,\r\n    parser: bigNumberToBoolean,\r\n  },\r\n  { name: 'holdFees', bits: 1, parser: bigNumberToBoolean },\r\n  {\r\n    name: 'useTotalOverflowForRedemptions',\r\n    bits: 1,\r\n    parser: bigNumberToBoolean,\r\n  },\r\n  {\r\n    name: 'useDataSourceForPay',\r\n    bits: 1,\r\n    parser: bigNumberToBoolean,\r\n  },\r\n  {\r\n    name: 'useDataSourceForRedeem',\r\n    bits: 1,\r\n    parser: bigNumberToBoolean,\r\n  },\r\n  {\r\n    name: 'dataSource',\r\n    bits: 0,\r\n    parser: val => {\r\n      const dataSource = val.toHexString()\r\n      return dataSource === BigNumber.from('0').toHexString()\r\n        ? constants.AddressZero\r\n        : getAddress(dataSource)\r\n    },\r\n  },\r\n]\r\n\r\nexport const decodeV2FundingCycleMetadata = (\r\n  packedMetadata: BigNumber,\r\n): V2FundingCycleMetadata => {\r\n  const metadata = parameters.reduce((metadata, parameter, i) => {\r\n    // 1. Get the bits used by the parameter.\r\n    const bits =\r\n      parameter.bits === 16\r\n        ? bits16\r\n        : parameter.bits === 8\r\n        ? bits8\r\n        : parameter.bits === 1\r\n        ? bits1\r\n        : 0\r\n\r\n    // 2. Get the amount of bits to shift right by.\r\n    const shiftRightBits =\r\n      i === 0\r\n        ? 0\r\n        : parameters.slice(0, i).reduce((acc, p) => (acc += p.bits), 0)\r\n\r\n    // 3. Get the value of the parameter from the bits\r\n    let value\r\n    if (bits === 0) {\r\n      value = packedMetadata.shr(shiftRightBits)\r\n    } else {\r\n      value = packedMetadata.shr(shiftRightBits).and(bits)\r\n    }\r\n\r\n    return {\r\n      ...metadata,\r\n      ...{\r\n        [parameter.name]: parameter.parser?.(value) ?? value,\r\n      },\r\n    }\r\n  }, {}) as V2FundingCycleMetadata\r\n\r\n  return metadata\r\n}\r\n\r\n/**\r\n * Mark various funding cycle properties as \"unsafe\",\r\n * based on a subjective interpretation.\r\n *\r\n * If a value in the returned object is true, it is potentially unsafe.\r\n */\r\nexport const getUnsafeV2FundingCycleProperties = (\r\n  fundingCycle: V2FundingCycle,\r\n): FundingCycleRiskFlags => {\r\n  const metadata = decodeV2FundingCycleMetadata(fundingCycle.metadata)\r\n  const ballotAddress = getBallotStrategyByAddress(fundingCycle.ballot).address\r\n  const reservedRatePercentage = parseFloat(fromWad(metadata?.reservedRate))\r\n  const allowMinting = Boolean(metadata?.allowMinting)\r\n\r\n  return unsafeFundingCycleProperties({\r\n    ballotAddress,\r\n    reservedRatePercentage,\r\n    hasFundingDuration: fundingCycle.duration?.gt(0),\r\n    allowMinting,\r\n  })\r\n}\r\n\r\n/**\r\n * Return number of risk indicators for a funding cycle.\r\n * 0 if we deem a project \"safe\" to contribute to.\r\n */\r\nexport const V2FundingCycleRiskCount = (\r\n  fundingCycle: V2FundingCycle,\r\n): number => {\r\n  return Object.values(getUnsafeV2FundingCycleProperties(fundingCycle)).filter(\r\n    v => v === true,\r\n  ).length\r\n}\r\n","// contracts/libraries/JBTokens.sol\r\nexport const ETH_TOKEN_ADDRESS = '0x000000000000000000000000000000000000eeee'\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\n\r\nimport { V2ContractName } from 'models/v2/contracts'\r\n\r\nimport { ETH_TOKEN_ADDRESS } from 'constants/v2/juiceboxTokens'\r\n\r\nimport useV2ContractReader from './V2ContractReader'\r\n\r\nexport default function useProjectDistributionLimit({\r\n  projectId,\r\n  configuration,\r\n  terminal,\r\n  useDeprecatedContract,\r\n}: {\r\n  projectId: number | undefined\r\n  configuration: string | undefined\r\n  terminal: string | undefined\r\n  useDeprecatedContract?: boolean\r\n}) {\r\n  return useV2ContractReader<BigNumber[]>({\r\n    contract: useDeprecatedContract\r\n      ? V2ContractName.DeprecatedJBController\r\n      : V2ContractName.JBController,\r\n    functionName: 'distributionLimitOf',\r\n    args:\r\n      projectId && configuration && terminal\r\n        ? [projectId, configuration, terminal, ETH_TOKEN_ADDRESS]\r\n        : null,\r\n  })\r\n}\r\n","import { Split } from 'models/v2/splits'\r\n\r\nimport { preciseFormatSplitPercent, splitPercentFrom } from './math'\r\n\r\n/**\r\n * Gets amount from percent of a bigger amount (rounded to 4dp)\r\n * @param percent {float} - value as a percentage.\r\n * @param amount string (hexString)\r\n * @returns {number} distribution amount\r\n */\r\nexport function amountFromPercent({\r\n  percent,\r\n  amount,\r\n}: {\r\n  percent: number\r\n  amount: string\r\n}) {\r\n  return (percent / 100) * parseFloat(amount)\r\n}\r\n\r\n/**\r\n * Gets split percent from split amount and the distribution limit\r\n * @param percent {float} - value as a percentage.\r\n * @param distributionLimit number\r\n * @returns {number} percent as an actual percentage of distribution limit (/100)\r\n */\r\nexport function getDistributionPercentFromAmount({\r\n  amount, // Distribution amount before fee\r\n  distributionLimit,\r\n}: {\r\n  amount: number\r\n  distributionLimit: number\r\n}) {\r\n  return splitPercentFrom((amount / distributionLimit) * 100).toNumber()\r\n}\r\n\r\n/**\r\n * Calculates sum of all split percentages\r\n * @param splits {Split[]} - list of splits\r\n * @returns {number} sum of all split percentanges\r\n */\r\nexport function getTotalSplitsPercentage(splits: Split[]) {\r\n  return splits.reduce(\r\n    (acc, curr) => acc + preciseFormatSplitPercent(curr.percent),\r\n    0,\r\n  )\r\n}\r\n\r\n/**\r\n * Adjusts exist split percents to stay the same amount when distribution limit is changed\r\n * @param splits {Split[]} - list of current splits to have their percents adjusted\r\n * @param oldDistributionLimit {string} - string of the old distribution limit number (e.g. '1')\r\n * @param newDistributionLimit {string} - string of the new distribution limit number\r\n * @returns {Split[]} splits with their percents adjusted\r\n */\r\nexport function adjustedSplitPercents({\r\n  splits,\r\n  oldDistributionLimit,\r\n  newDistributionLimit,\r\n}: {\r\n  splits: Split[]\r\n  oldDistributionLimit: string\r\n  newDistributionLimit: string\r\n}) {\r\n  const adjustedSplits: Split[] = []\r\n  splits.forEach((split: Split) => {\r\n    const currentAmount = amountFromPercent({\r\n      percent: preciseFormatSplitPercent(split.percent),\r\n      amount: oldDistributionLimit,\r\n    })\r\n\r\n    const newPercent = getDistributionPercentFromAmount({\r\n      amount: currentAmount,\r\n      distributionLimit: parseFloat(newDistributionLimit),\r\n    })\r\n    const adjustedSplit = {\r\n      beneficiary: split.beneficiary,\r\n      percent: newPercent,\r\n      preferClaimed: split.preferClaimed,\r\n      lockedUntil: split.lockedUntil,\r\n      projectId: split.projectId,\r\n      allocator: split.allocator,\r\n    } as Split\r\n    adjustedSplits?.push(adjustedSplit)\r\n  })\r\n  return adjustedSplits\r\n}\r\n\r\n/**\r\n * Derives the new distribution limit when a split amount is altered or added\r\n * @param editingSplitPercent {number} - percent of the split being edited (0 if adding a split)\r\n * @param newDistributionLimit {string} - string of the new distribution limit number (e.g. '1')\r\n * @returns {number} newDistributionLimit\r\n */\r\nexport function getNewDistributionLimit({\r\n  editingSplitPercent,\r\n  newSplitAmount,\r\n  currentDistributionLimit,\r\n}: {\r\n  editingSplitPercent: number // percent per billion\r\n  newSplitAmount: number\r\n  currentDistributionLimit: string\r\n}) {\r\n  const previousSplitAmount = amountFromPercent({\r\n    percent: preciseFormatSplitPercent(editingSplitPercent),\r\n    amount: currentDistributionLimit,\r\n  }) // will be 0 when adding split but an actual amount when reconfiging or deleting\r\n\r\n  const newDistributionLimit =\r\n    parseFloat(currentDistributionLimit) - previousSplitAmount + newSplitAmount\r\n\r\n  return parseFloat(newDistributionLimit.toFixed(4)) // round to 4dp\r\n}\r\n","import { DrawerProps } from 'antd'\r\n\r\nexport const drawerStyle: Partial<DrawerProps> = {\r\n  placement: 'right',\r\n  width: Math.min(640, window.innerWidth * 0.9),\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { V2ContractName } from 'models/v2/contracts'\r\nimport { Split, SplitGroup } from 'models/v2/splits'\r\nimport isEqual from 'lodash/isEqual'\r\n\r\nimport { useCallback } from 'react'\r\n\r\nimport useV2ContractReader from './V2ContractReader'\r\n\r\ntype SplitResult = {\r\n  percent: BigNumber\r\n  lockedUntil: BigNumber\r\n  projectId: BigNumber\r\n  beneficiary: string\r\n  allocator: string\r\n  preferClaimed: boolean\r\n}\r\n\r\nconst formatSplitResult = (splitResult: SplitResult[]) => {\r\n  return splitResult.map((split: SplitResult) => {\r\n    return {\r\n      percent: split.percent.toNumber(),\r\n      lockedUntil: split.lockedUntil.toNumber(),\r\n      projectId: split.projectId.toHexString(),\r\n      beneficiary: split.beneficiary,\r\n      allocator: split.allocator,\r\n      preferClaimed: split.preferClaimed,\r\n    }\r\n  })\r\n}\r\n\r\nexport default function useProjectSplits({\r\n  projectId,\r\n  splitGroup,\r\n  domain,\r\n  useDeprecatedContract,\r\n}: {\r\n  projectId: number | undefined\r\n  splitGroup: SplitGroup\r\n  domain: string | undefined\r\n  useDeprecatedContract?: boolean\r\n}) {\r\n  return useV2ContractReader<Split[]>({\r\n    contract: useDeprecatedContract\r\n      ? V2ContractName.DeprecatedJBSplitsStore\r\n      : V2ContractName.JBSplitsStore,\r\n    functionName: 'splitsOf',\r\n    args: projectId && domain ? [projectId, domain, splitGroup] : null,\r\n    formatter: useCallback((value): Split[] => {\r\n      return formatSplitResult((value ?? []) as SplitResult[])\r\n    }, []),\r\n    valueDidChange: useCallback((oldValue, newValue) => {\r\n      return !isEqual(oldValue, newValue)\r\n    }, []),\r\n  })\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport * as constants from '@ethersproject/constants'\r\nimport { PayoutMod } from 'models/mods'\r\nimport { Split } from 'models/v2/splits'\r\nimport { percentToPermyriad, permyriadToPercent } from 'utils/formatNumber'\r\n\r\nimport { formatSplitPercent, splitPercentFrom } from './math'\r\n\r\nexport const toSplit = (mod: PayoutMod): Split => {\r\n  return {\r\n    // mod.percent is a parts-per-ten thousand (permyriad),\r\n    // split.percent is a parts-per-billion\r\n    percent: splitPercentFrom(\r\n      parseFloat(permyriadToPercent(mod.percent)),\r\n    ).toNumber(),\r\n    lockedUntil: mod.lockedUntil,\r\n    beneficiary: mod.beneficiary,\r\n    projectId: mod.projectId?.toHexString(),\r\n    allocator: mod.allocator,\r\n    preferClaimed: mod.preferUnstaked,\r\n  }\r\n}\r\n\r\nexport const toMod = (split: Split): PayoutMod => {\r\n  return {\r\n    // mod.percent is a parts-per-ten thousand (permyriad),\r\n    // split.percent is a parts-per-billion\r\n    percent: percentToPermyriad(\r\n      formatSplitPercent(BigNumber.from(split.percent)),\r\n    ).toNumber(),\r\n    lockedUntil: split.lockedUntil,\r\n    beneficiary: split.beneficiary,\r\n    projectId: split.projectId ? BigNumber.from(split.projectId) : undefined,\r\n    allocator: split.allocator,\r\n    preferUnstaked: split.preferClaimed,\r\n  }\r\n}\r\n\r\nexport const sanitizeSplit = (split: Split): Split => {\r\n  return {\r\n    lockedUntil: split.lockedUntil ?? 0,\r\n    projectId: split.projectId ?? BigNumber.from(0).toHexString(),\r\n    beneficiary: split.beneficiary ?? constants.AddressZero,\r\n    allocator: constants.AddressZero,\r\n    preferClaimed: false,\r\n    percent: split.percent,\r\n  }\r\n}\r\n","import { CrownFilled, LockOutlined } from '@ant-design/icons'\r\nimport { Trans } from '@lingui/macro'\r\nimport { Tooltip } from 'antd'\r\nimport { ThemeContext } from 'contexts/themeContext'\r\nimport { useContext } from 'react'\r\nimport { formatDate } from 'utils/formatDate'\r\n\r\nimport { Split } from 'models/v2/splits'\r\nimport TooltipLabel from 'components/TooltipLabel'\r\nimport FormattedAddress from 'components/FormattedAddress'\r\nimport { formatWad } from 'utils/formatNumber'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport CurrencySymbol from 'components/CurrencySymbol'\r\nimport { V2CurrencyOption } from 'models/v2/currencyOption'\r\nimport { V2CurrencyName } from 'utils/v2/currency'\r\nimport { formatSplitPercent, SPLITS_TOTAL_PERCENT } from 'utils/v2/math'\r\nimport useMobile from 'hooks/Mobile'\r\nimport { Link } from 'react-router-dom'\r\nimport TooltipIcon from 'components/TooltipIcon'\r\nimport { v2ProjectRoute } from 'utils/routes'\r\n\r\nexport default function SplitItem({\r\n  split,\r\n  showSplitValue,\r\n  currency,\r\n  totalValue,\r\n  projectOwnerAddress,\r\n  valueSuffix,\r\n  valueFormatProps,\r\n  reservedRate,\r\n}: {\r\n  split: Split\r\n  currency?: BigNumber\r\n  totalValue: BigNumber | undefined\r\n  projectOwnerAddress: string | undefined\r\n  showSplitValue: boolean\r\n  valueSuffix?: string | JSX.Element\r\n  valueFormatProps?: { precision?: number }\r\n  reservedRate?: number\r\n}) {\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n\r\n  const isProjectOwner = projectOwnerAddress === split.beneficiary\r\n  const isJuiceboxProject = split.projectId\r\n    ? BigNumber.from(split.projectId).gt(0)\r\n    : false\r\n\r\n  const LockedText = ({ lockedUntil }: { lockedUntil: number }) => {\r\n    const lockedUntilFormatted = formatDate(lockedUntil * 1000, 'yyyy-MM-DD')\r\n\r\n    return (\r\n      <div style={{ fontSize: '.8rem', color: colors.text.secondary }}>\r\n        <LockOutlined /> <Trans>locked until {lockedUntilFormatted}</Trans>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const isMobile = useMobile()\r\n\r\n  const itemFontSize = isMobile ? '0.9rem' : 'unset'\r\n\r\n  const JuiceboxProjectBeneficiary = () => {\r\n    return (\r\n      <div>\r\n        {/* TODO figure out project \"handles\" with ENS resolution */}\r\n\r\n        <div style={{ fontWeight: 500 }}>\r\n          <Tooltip\r\n            title={<Trans>Juicebox V2 project with ID {split.projectId}</Trans>}\r\n          >\r\n            <Link\r\n              to={v2ProjectRoute({ projectId: split.projectId })}\r\n              target=\"_blank\"\r\n              className=\"text-primary hover-text-action-primary hover-text-decoration-underline\"\r\n            >\r\n              @{split.projectId}\r\n            </Link>\r\n          </Tooltip>\r\n          :\r\n        </div>\r\n        <div\r\n          style={{\r\n            fontSize: '.8rem',\r\n            color: colors.text.secondary,\r\n            marginLeft: 10,\r\n          }}\r\n        >\r\n          <TooltipLabel\r\n            label={<Trans>Tokens:</Trans>}\r\n            tip={\r\n              <Trans>\r\n                This address will receive any tokens minted when the recipient\r\n                project gets paid.\r\n              </Trans>\r\n            }\r\n          />{' '}\r\n          <FormattedAddress address={split.beneficiary} />{' '}\r\n          {isProjectOwner && (\r\n            <Tooltip title={<Trans>Project owner</Trans>}>\r\n              <CrownFilled />\r\n            </Tooltip>\r\n          )}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const ETHAddressBeneficiary = () => {\r\n    return (\r\n      <div\r\n        style={{\r\n          fontWeight: 500,\r\n          fontSize: itemFontSize,\r\n          display: 'flex',\r\n          alignItems: 'baseline',\r\n        }}\r\n      >\r\n        {split.beneficiary ? (\r\n          <FormattedAddress address={split.beneficiary} />\r\n        ) : null}\r\n        {!split.beneficiary && isProjectOwner ? (\r\n          <Trans>Project owner (you)</Trans>\r\n        ) : null}\r\n        {isProjectOwner && (\r\n          <span style={{ marginLeft: 5 }}>\r\n            <Tooltip title={<Trans>Project owner</Trans>}>\r\n              <CrownFilled />\r\n            </Tooltip>\r\n          </span>\r\n        )}\r\n        :\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const SplitValue = () => {\r\n    const splitValue = totalValue?.mul(split.percent).div(SPLITS_TOTAL_PERCENT)\r\n    const splitValueFormatted = formatWad(splitValue, { ...valueFormatProps })\r\n\r\n    return (\r\n      <span style={{ fontSize: itemFontSize }}>\r\n        (\r\n        <CurrencySymbol\r\n          currency={V2CurrencyName(\r\n            currency?.toNumber() as V2CurrencyOption | undefined,\r\n          )}\r\n        />\r\n        {splitValueFormatted}\r\n        {valueSuffix ? <span> {valueSuffix}</span> : null})\r\n      </span>\r\n    )\r\n  }\r\n\r\n  const formattedSplitPercent = formatSplitPercent(\r\n    BigNumber.from(split.percent),\r\n  )\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        alignItems: 'baseline',\r\n        justifyContent: 'space-between',\r\n        marginBottom: 5,\r\n      }}\r\n    >\r\n      <div style={{ lineHeight: 1.4 }}>\r\n        <div style={{ display: 'flex', alignItems: 'baseline' }}>\r\n          {isJuiceboxProject ? (\r\n            <JuiceboxProjectBeneficiary />\r\n          ) : (\r\n            <ETHAddressBeneficiary />\r\n          )}\r\n        </div>\r\n\r\n        {split.lockedUntil ? (\r\n          <LockedText lockedUntil={split.lockedUntil} />\r\n        ) : null}\r\n      </div>\r\n      <div>\r\n        <span>{formattedSplitPercent}%</span>\r\n        {totalValue?.gt(0) && showSplitValue ? (\r\n          <span style={{ marginLeft: '0.2rem' }}>\r\n            {' '}\r\n            <SplitValue />\r\n          </span>\r\n        ) : null}\r\n        {reservedRate ? (\r\n          <TooltipIcon\r\n            iconStyle={{ marginLeft: 7 }}\r\n            tip={\r\n              <Trans>\r\n                {(reservedRate * parseFloat(formattedSplitPercent)) / 100}% of\r\n                all newly minted tokens.\r\n              </Trans>\r\n            }\r\n          />\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { Split } from 'models/v2/splits'\r\nimport { SPLITS_TOTAL_PERCENT } from 'utils/v2/math'\r\n\r\nimport SplitItem from './SplitItem'\r\n\r\nexport default function SplitList({\r\n  splits,\r\n  showSplitValues = false,\r\n  currency,\r\n  totalValue,\r\n  projectOwnerAddress,\r\n  valueSuffix,\r\n  valueFormatProps,\r\n  reservedRate,\r\n}: {\r\n  splits: Split[]\r\n  currency?: BigNumber\r\n  totalValue: BigNumber | undefined\r\n  projectOwnerAddress: string | undefined\r\n  showSplitValues?: boolean\r\n  valueSuffix?: string | JSX.Element\r\n  valueFormatProps?: { precision?: number }\r\n  reservedRate?: number\r\n}) {\r\n  const totalSplitPercentage =\r\n    splits?.reduce((sum, split) => sum + split.percent, 0) ?? 0\r\n  const ownerPercentage = SPLITS_TOTAL_PERCENT - totalSplitPercentage\r\n\r\n  return (\r\n    <div>\r\n      {[...splits]\r\n        .sort((a, b) => (a.percent < b.percent ? 1 : -1))\r\n        .map(split => (\r\n          <div\r\n            key={`${split.beneficiary}-${split.percent}`}\r\n            style={{ marginBottom: 5 }}\r\n          >\r\n            <SplitItem\r\n              split={split}\r\n              showSplitValue={showSplitValues}\r\n              currency={currency}\r\n              totalValue={totalValue}\r\n              projectOwnerAddress={projectOwnerAddress}\r\n              valueSuffix={valueSuffix}\r\n              valueFormatProps={valueFormatProps}\r\n              reservedRate={reservedRate}\r\n            />\r\n          </div>\r\n        ))}\r\n      {ownerPercentage ? (\r\n        <SplitItem\r\n          split={{\r\n            beneficiary: projectOwnerAddress,\r\n            percent: ownerPercentage,\r\n            preferClaimed: undefined,\r\n            lockedUntil: undefined,\r\n            projectId: undefined,\r\n            allocator: undefined,\r\n          }}\r\n          showSplitValue={showSplitValues}\r\n          currency={currency}\r\n          totalValue={totalValue}\r\n          projectOwnerAddress={projectOwnerAddress}\r\n          valueSuffix={valueSuffix}\r\n          valueFormatProps={valueFormatProps}\r\n          reservedRate={reservedRate}\r\n        />\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n","import { Button, Form, FormInstance, Space } from 'antd'\r\nimport { t, Trans } from '@lingui/macro'\r\n\r\nimport { FormItems } from 'components/formItems'\r\nimport { normalizeHandle } from 'utils/formatHandle'\r\nimport { CSSProperties } from 'react'\r\nimport Callout from 'components/Callout'\r\n\r\nexport type ProjectDetailsFormFields = {\r\n  name: string\r\n  description: string\r\n  infoUri: string\r\n  handle: string\r\n  logoUri: string\r\n  twitter: string\r\n  discord: string\r\n  payButton: string\r\n  payDisclosure: string\r\n}\r\n\r\nexport default function ProjectDetailsForm({\r\n  form,\r\n  onFinish,\r\n  hideProjectHandle = false,\r\n  saveButton,\r\n  style,\r\n  loading,\r\n  onValuesChange,\r\n}: {\r\n  form: FormInstance<ProjectDetailsFormFields>\r\n  onFinish: (values: ProjectDetailsFormFields) => void\r\n  hideProjectHandle?: boolean\r\n  saveButton?: JSX.Element\r\n  style?: CSSProperties\r\n  loading?: boolean\r\n  onValuesChange?: VoidFunction\r\n}) {\r\n  return (\r\n    <Form\r\n      scrollToFirstError={{ behavior: 'smooth' }}\r\n      form={form}\r\n      layout=\"vertical\"\r\n      onFinish={onFinish}\r\n      style={style}\r\n      onValuesChange={() => onValuesChange?.()}\r\n    >\r\n      <Space direction=\"vertical\" size=\"large\">\r\n        <div>\r\n          <FormItems.ProjectName\r\n            name=\"name\"\r\n            formItemProps={{\r\n              rules: [{ required: true }],\r\n            }}\r\n            onChange={name => {\r\n              const val = name ? normalizeHandle(name) : ''\r\n              // Use `handle` state to enable ProjectHandle to validate while typing\r\n              form.setFieldsValue({ handle: val })\r\n            }}\r\n          />\r\n          {!hideProjectHandle && (\r\n            <FormItems.ProjectHandleFormItem\r\n              name=\"handle\"\r\n              initialValue={form.getFieldValue('handle')}\r\n              requireState=\"notExist\"\r\n              formItemProps={{\r\n                dependencies: ['name'],\r\n                extra: t`Project handle must be unique.`,\r\n              }}\r\n              required\r\n            />\r\n          )}\r\n          <FormItems.ProjectDescription name=\"description\" />\r\n          <FormItems.ProjectLogoUri\r\n            name=\"logoUri\"\r\n            initialUrl={form.getFieldValue('logoUri')}\r\n            onSuccess={logoUri => {\r\n              form.setFieldsValue({ logoUri })\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <h3>\r\n            <Trans>Links</Trans>\r\n          </h3>\r\n          <FormItems.ProjectLink name=\"infoUri\" />\r\n          <FormItems.ProjectTwitter name=\"twitter\" />\r\n          <FormItems.ProjectDiscord name=\"discord\" />\r\n        </div>\r\n\r\n        <div>\r\n          <h3>\r\n            <Trans>Project page customizations</Trans>\r\n          </h3>\r\n\r\n          <FormItems.ProjectPayButton name=\"payButton\" />\r\n          <FormItems.ProjectPayDisclosure name=\"payDisclosure\" />\r\n        </div>\r\n        <div>\r\n          <Form.Item>\r\n            {saveButton ?? (\r\n              <Button htmlType=\"submit\" loading={loading} type=\"primary\">\r\n                <span>\r\n                  <Trans>Save project details</Trans>\r\n                </span>\r\n              </Button>\r\n            )}\r\n          </Form.Item>\r\n\r\n          <Callout>\r\n            <Trans>\r\n              You can edit your project details after creation at any time, but\r\n              the transaction will cost gas.\r\n            </Trans>\r\n          </Callout>\r\n        </div>\r\n      </Space>\r\n    </Form>\r\n  )\r\n}\r\n","import { t, Trans } from '@lingui/macro'\r\nimport { Modal } from 'antd'\r\n\r\nexport default function UnsavedChangesModal({\r\n  visible,\r\n  onOk,\r\n  onCancel,\r\n}: {\r\n  visible: boolean\r\n  onOk: () => void\r\n  onCancel: () => void\r\n}) {\r\n  return (\r\n    <Modal\r\n      title={t`Unsaved changes`}\r\n      okText={t`Discard`}\r\n      visible={visible}\r\n      onOk={onOk}\r\n      onCancel={onCancel}\r\n      destroyOnClose\r\n    >\r\n      <Trans>\r\n        You have unsaved changes. Are you sure you want to discard them?\r\n      </Trans>\r\n    </Modal>\r\n  )\r\n}\r\n","import { Drawer } from 'antd'\r\nimport { PropsWithChildren } from 'react'\r\n\r\nimport { drawerStyle } from 'constants/styles/drawerStyle'\r\n\r\n/**\r\n * Provides the blueprint for Funding Cycle Drawers.\r\n */\r\nexport default function FundingCycleDrawer({\r\n  title,\r\n  visible,\r\n  onClose,\r\n  children,\r\n}: PropsWithChildren<{\r\n  title: string\r\n  visible: boolean\r\n  onClose: VoidFunction\r\n}>) {\r\n  return (\r\n    <Drawer {...drawerStyle} visible={visible} onClose={onClose} destroyOnClose>\r\n      <h1>{title}</h1>\r\n      {children}\r\n    </Drawer>\r\n  )\r\n}\r\n","export const JUICEBOX_MONEY_METADATA_DOMAIN = 0\r\n","export const projectHandleENSTextRecordKey = 'juicebox_project_id'\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { V2UserContext } from 'contexts/v2/userContext'\r\nimport { useContext, useEffect, useState } from 'react'\r\n\r\nexport function useETHPaymentTerminalFee() {\r\n  const [fee, setFee] = useState<BigNumber>()\r\n  const { contracts } = useContext(V2UserContext)\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const res = await contracts?.JBETHPaymentTerminal.functions.fee()\r\n      if (!res) return\r\n\r\n      setFee(res[0])\r\n    }\r\n    fetchData()\r\n  }, [contracts])\r\n\r\n  return fee\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { t, Trans } from '@lingui/macro'\r\nimport { DatePicker, Form, InputNumber, Modal, Radio } from 'antd'\r\nimport { useForm } from 'antd/lib/form/Form'\r\nimport CurrencySwitch from 'components/CurrencySwitch'\r\nimport CurrencySymbol from 'components/CurrencySymbol'\r\nimport { FormItems } from 'components/formItems'\r\nimport {\r\n  ModalMode,\r\n  validateEthAddress,\r\n  validatePercentage,\r\n} from 'components/formItems/formHelpers'\r\nimport InputAccessoryButton from 'components/InputAccessoryButton'\r\nimport FormattedNumberInput from 'components/inputs/FormattedNumberInput'\r\nimport NumberSlider from 'components/inputs/NumberSlider'\r\nimport TooltipIcon from 'components/TooltipIcon'\r\nimport TooltipLabel from 'components/TooltipLabel'\r\nimport { ThemeContext } from 'contexts/themeContext'\r\nimport { useETHPaymentTerminalFee } from 'hooks/v2/contractReader/ETHPaymentTerminalFee'\r\nimport { findIndex, round } from 'lodash'\r\nimport { Split } from 'models/v2/splits'\r\nimport moment, * as Moment from 'moment'\r\nimport { useContext, useEffect, useMemo, useState } from 'react'\r\nimport { parseWad } from 'utils/formatNumber'\r\nimport { stringIsDigit } from 'utils/math'\r\nimport {\r\n  adjustedSplitPercents,\r\n  amountFromPercent,\r\n  getDistributionPercentFromAmount,\r\n  getNewDistributionLimit,\r\n} from 'utils/v2/distributions'\r\nimport {\r\n  formatFee,\r\n  MAX_DISTRIBUTION_LIMIT,\r\n  preciseFormatSplitPercent,\r\n  splitPercentFrom,\r\n} from 'utils/v2/math'\r\nimport * as constants from '@ethersproject/constants'\r\n\r\nimport { CurrencyName } from 'constants/currency'\r\n\r\ntype AddOrEditSplitFormFields = {\r\n  projectId: string\r\n  beneficiary: string\r\n  percent: number\r\n  amount: number\r\n  lockedUntil: Moment.Moment | undefined | null\r\n}\r\n\r\ntype SplitType = 'project' | 'address'\r\ntype DistributionType = 'amount' | 'percent'\r\n\r\n// Using both state and a form in this modal. I know it seems over the top,\r\n// but the state is necessary to link the percent and amount fields, and the form\r\n// is useful for its features such as field validation.\r\nexport default function DistributionSplitModal({\r\n  visible,\r\n  mode,\r\n  overrideDistTypeWithPercentage = false,\r\n  splits, // Locked and editable splits\r\n  editingSplit, // Split that is currently being edited (only in the case mode ==='Edit')\r\n  onSplitsChanged,\r\n  distributionLimit,\r\n  setDistributionLimit,\r\n  onClose,\r\n  currencyName,\r\n  onCurrencyChange,\r\n}: {\r\n  visible: boolean\r\n  mode: ModalMode // 'Add' or 'Edit' or 'Undefined'\r\n  overrideDistTypeWithPercentage?: boolean\r\n  splits: Split[]\r\n  editingSplit?: Split\r\n  onSplitsChanged?: (splits: Split[]) => void\r\n  distributionLimit?: string\r\n  setDistributionLimit?: (distributionLimit: string) => void\r\n  onClose: VoidFunction\r\n  currencyName: CurrencyName\r\n  onCurrencyChange?: (currencyName: CurrencyName) => void\r\n}) {\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n\r\n  const [form] = useForm<AddOrEditSplitFormFields>()\r\n\r\n  const distributionLimitIsInfinite = useMemo(\r\n    () =>\r\n      !distributionLimit ||\r\n      parseWad(distributionLimit).eq(MAX_DISTRIBUTION_LIMIT),\r\n    [distributionLimit],\r\n  )\r\n\r\n  // true if no splits have been created, or only one split and it is selected\r\n  const isFirstSplit = useMemo(\r\n    () => !splits.length || (splits.length === 1 && editingSplit !== undefined),\r\n    [editingSplit, splits.length],\r\n  )\r\n\r\n  const [editingSplitType, setEditingSplitType] = useState<SplitType>('address')\r\n  const [distributionType, setDistributionType] = useState<DistributionType>(\r\n    distributionLimitIsInfinite ? 'percent' : 'amount',\r\n  )\r\n  const [projectId, setProjectId] = useState<string | undefined>()\r\n  const [newDistributionLimit, setNewDistributionLimit] = useState<string>()\r\n  const [amount, setAmount] = useState<number | undefined>()\r\n  const [lockedUntil, setLockedUntil] = useState<\r\n    Moment.Moment | undefined | null\r\n  >()\r\n  const ETHPaymentTerminalFee = useETHPaymentTerminalFee()\r\n\r\n  const feePercentage = ETHPaymentTerminalFee\r\n    ? formatFee(ETHPaymentTerminalFee)\r\n    : undefined\r\n\r\n  useEffect(() =>\r\n    form.setFieldsValue({\r\n      projectId,\r\n      lockedUntil,\r\n    }),\r\n  )\r\n\r\n  // Set address project id to undefined if editing type is address\r\n  useEffect(() => {\r\n    if (editingSplitType === 'address') {\r\n      form.setFieldsValue({ projectId: undefined })\r\n      setProjectId(undefined)\r\n    }\r\n  }, [editingSplitType, form])\r\n\r\n  useEffect(() => {\r\n    if (overrideDistTypeWithPercentage) {\r\n      setDistributionType('percent')\r\n      return\r\n    }\r\n    setDistributionType(distributionLimitIsInfinite ? 'percent' : 'amount')\r\n  }, [distributionLimitIsInfinite, overrideDistTypeWithPercentage, visible])\r\n\r\n  // Set the initial info for form from split\r\n  // If editing, format the lockedUntil and projectId\r\n  useEffect(() => {\r\n    if (!editingSplit) return\r\n    setEditingSplitType('address')\r\n    const isEditingProjectSplit =\r\n      editingSplit.projectId &&\r\n      !BigNumber.from(editingSplit.projectId).eq(\r\n        BigNumber.from(constants.AddressZero),\r\n      )\r\n    if (isEditingProjectSplit) {\r\n      setEditingSplitType('project')\r\n      setProjectId(editingSplit.projectId?.toString())\r\n    }\r\n    setLockedUntil(\r\n      editingSplit.lockedUntil\r\n        ? Moment.default(editingSplit.lockedUntil * 1000)\r\n        : undefined,\r\n    )\r\n\r\n    form.setFieldsValue({\r\n      beneficiary: editingSplit.beneficiary,\r\n      percent: preciseFormatSplitPercent(editingSplit.percent),\r\n    })\r\n\r\n    if (distributionLimitIsInfinite) {\r\n      setAmount(\r\n        amountFromPercent({\r\n          percent: preciseFormatSplitPercent(editingSplit.percent),\r\n          amount: distributionLimit ?? '0',\r\n        }),\r\n      )\r\n    } else if (distributionLimit) {\r\n      const percentPerBillion = editingSplit.percent\r\n      const amount = amountFromPercent({\r\n        percent: preciseFormatSplitPercent(percentPerBillion),\r\n        amount: distributionLimit,\r\n      })\r\n      setAmount(amount)\r\n    } else {\r\n      setAmount(undefined)\r\n    }\r\n  }, [\r\n    distributionLimit,\r\n    distributionLimitIsInfinite,\r\n    editingSplit,\r\n    form,\r\n    visible,\r\n  ])\r\n\r\n  const resetStates = () => {\r\n    setProjectId(undefined)\r\n    setAmount(undefined)\r\n    setLockedUntil(undefined)\r\n  }\r\n\r\n  // Validates new or newly edited split, then adds it to or edits the splits list\r\n  const confirmSplit = async () => {\r\n    await form.validateFields()\r\n\r\n    const roundedLockedUntil = lockedUntil\r\n      ? Math.round(lockedUntil.valueOf() / 1000)\r\n      : undefined\r\n\r\n    const newSplit = {\r\n      beneficiary: form.getFieldValue('beneficiary'),\r\n      percent: splitPercentFrom(form.getFieldValue('percent')).toNumber(),\r\n      lockedUntil: roundedLockedUntil,\r\n      preferClaimed: true,\r\n      projectId: projectId,\r\n      allocator: undefined, // TODO: new v2 feature\r\n    } as Split\r\n\r\n    let adjustedSplits: Split[] = splits\r\n    // If an amount and therefore the distribution limit has been changed,\r\n    // recalculate all split percents based on newly added split amount\r\n    if (newDistributionLimit && !distributionLimitIsInfinite) {\r\n      adjustedSplits = adjustedSplitPercents({\r\n        splits,\r\n        oldDistributionLimit: distributionLimit ?? '0',\r\n        newDistributionLimit,\r\n      })\r\n      setDistributionLimit?.(newDistributionLimit)\r\n    }\r\n\r\n    const newSplits =\r\n      mode === 'Edit'\r\n        ? adjustedSplits.map(m =>\r\n            m.beneficiary === editingSplit?.beneficiary &&\r\n            m.projectId === editingSplit?.projectId\r\n              ? {\r\n                  ...m,\r\n                  ...newSplit,\r\n                }\r\n              : m,\r\n          )\r\n        : [...adjustedSplits, newSplit]\r\n\r\n    onSplitsChanged?.(newSplits)\r\n\r\n    resetStates()\r\n    form.resetFields()\r\n\r\n    onClose()\r\n  }\r\n\r\n  const onAmountChange = (newAmount: number) => {\r\n    if (distributionLimitIsInfinite || !newAmount) return\r\n    const newDistributionLimit = getNewDistributionLimit({\r\n      currentDistributionLimit: distributionLimit ?? '0',\r\n      newSplitAmount: newAmount,\r\n      editingSplitPercent: mode === 'Add' ? 0 : editingSplit?.percent ?? 0, //percentPerBillion,\r\n    })\r\n\r\n    const newPercent = getDistributionPercentFromAmount({\r\n      amount: newAmount,\r\n      distributionLimit: newDistributionLimit,\r\n    })\r\n\r\n    setNewDistributionLimit(newDistributionLimit.toString())\r\n    setAmount(newAmount)\r\n    form.setFieldsValue({\r\n      percent: preciseFormatSplitPercent(newPercent),\r\n    })\r\n  }\r\n\r\n  // Validates new payout receiving address\r\n  const validatePayoutAddress = () => {\r\n    const beneficiary = form.getFieldValue('beneficiary')\r\n    if (editingSplit?.beneficiary === beneficiary) {\r\n      return Promise.resolve()\r\n    }\r\n    return validateEthAddress(\r\n      beneficiary ?? '',\r\n      splits,\r\n      mode,\r\n      findIndex(\r\n        splits,\r\n        s =>\r\n          s.beneficiary === editingSplit?.beneficiary &&\r\n          s.projectId === editingSplit?.projectId,\r\n      ),\r\n    )\r\n  }\r\n\r\n  const validateProjectId = () => {\r\n    if (!stringIsDigit(form.getFieldValue('projectId'))) {\r\n      return Promise.reject(t`Project ID must be a number.`)\r\n    }\r\n    // TODO: check if projectId exists\r\n    return Promise.resolve()\r\n  }\r\n\r\n  const validatePayoutPercentage = () => {\r\n    return validatePercentage(\r\n      preciseFormatSplitPercent(form.getFieldValue('percent') ?? 0),\r\n    )\r\n  }\r\n\r\n  // Cannot select days before today or today with lockedUntil\r\n  const disabledDate = (current: moment.Moment) =>\r\n    current && current < moment().endOf('day')\r\n\r\n  const amountSubFee = amount\r\n    ? amount - (amount * parseFloat(feePercentage ?? '0')) / 100\r\n    : undefined\r\n\r\n  function AfterFeeMessage() {\r\n    return amountSubFee && amountSubFee > 0 ? (\r\n      <TooltipLabel\r\n        label={\r\n          <Trans>\r\n            <CurrencySymbol currency={currencyName} />\r\n            {round(amountSubFee, 4)} after {feePercentage}% JBX membership fee\r\n          </Trans>\r\n        }\r\n        tip={\r\n          <Trans>\r\n            Payouts to Ethereum addresses incur a {feePercentage}% fee. Your\r\n            project will receive JBX in return at the current issuance rate.\r\n          </Trans>\r\n        }\r\n      />\r\n    ) : null\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      title={mode === 'Edit' ? t`Edit payout` : t`Add new payout`}\r\n      visible={visible}\r\n      onOk={confirmSplit}\r\n      okText={mode === 'Edit' ? t`Save payout` : t`Add payout`}\r\n      onCancel={() => {\r\n        resetStates()\r\n        form.resetFields()\r\n        onClose()\r\n      }}\r\n      destroyOnClose\r\n    >\r\n      <Form\r\n        form={form}\r\n        layout=\"vertical\"\r\n        scrollToFirstError={{ behavior: 'smooth' }}\r\n        onKeyDown={e => {\r\n          if (e.key === 'Enter') confirmSplit()\r\n        }}\r\n      >\r\n        <Form.Item label={t`Recipient`}>\r\n          <Radio.Group\r\n            value={editingSplitType}\r\n            onChange={e => setEditingSplitType(e.target.value)}\r\n          >\r\n            <Radio value=\"address\" style={{ fontWeight: 400 }}>\r\n              <Trans>Wallet address</Trans>\r\n            </Radio>\r\n            <Radio value=\"project\" style={{ fontWeight: 400 }}>\r\n              <Trans>Juicebox project</Trans>\r\n            </Radio>\r\n          </Radio.Group>\r\n        </Form.Item>\r\n\r\n        {editingSplitType === 'address' ? (\r\n          <FormItems.EthAddress\r\n            name=\"beneficiary\"\r\n            defaultValue={form.getFieldValue('beneficiary')}\r\n            formItemProps={{\r\n              label: t`Address`,\r\n              rules: [\r\n                {\r\n                  validator: validatePayoutAddress,\r\n                },\r\n              ],\r\n              required: true,\r\n            }}\r\n            onAddressChange={beneficiary =>\r\n              form.setFieldsValue({ beneficiary })\r\n            }\r\n          />\r\n        ) : (\r\n          <Form.Item\r\n            name={'projectId'}\r\n            rules={[{ validator: validateProjectId }]}\r\n            label={t`Juicebox Project ID`}\r\n            required\r\n          >\r\n            <InputNumber\r\n              value={parseInt(projectId ?? '')}\r\n              style={{ width: '100%' }}\r\n              placeholder={t`ID`}\r\n              onChange={(projectId: number) => {\r\n                setProjectId(projectId?.toString())\r\n              }}\r\n            />\r\n          </Form.Item>\r\n        )}\r\n        {editingSplitType === 'project' ? (\r\n          <FormItems.EthAddress\r\n            name=\"beneficiary\"\r\n            defaultValue={form.getFieldValue('beneficiary')}\r\n            formItemProps={{\r\n              label: t`Token beneficiary address`,\r\n              required: true,\r\n              extra: t`The address that should receive the tokens minted from paying this project.`,\r\n            }}\r\n            onAddressChange={beneficiary => {\r\n              form.setFieldsValue({ beneficiary })\r\n            }}\r\n          />\r\n        ) : null}\r\n\r\n        {/* Only show amount input if project distribution limit is not infinite */}\r\n        {distributionLimit && distributionType === 'amount' ? (\r\n          <Form.Item\r\n            className=\"ant-form-item-extra-only\"\r\n            label={t`Distribution`}\r\n            required\r\n            extra={\r\n              feePercentage && form.getFieldValue('percent') <= 100 ? (\r\n                <>\r\n                  {editingSplitType === 'address' ? (\r\n                    <div>\r\n                      <AfterFeeMessage />\r\n                    </div>\r\n                  ) : (\r\n                    <Trans>\r\n                      Distributing funds to Juicebox projects won't incur fees.\r\n                    </Trans>\r\n                  )}\r\n                </>\r\n              ) : null\r\n            }\r\n          >\r\n            <div\r\n              style={{\r\n                display: 'flex',\r\n                color: colors.text.primary,\r\n                alignItems: 'center',\r\n              }}\r\n            >\r\n              <FormattedNumberInput\r\n                value={amount?.toFixed(4)}\r\n                placeholder={'0'}\r\n                onChange={amount => onAmountChange(parseFloat(amount || '0'))}\r\n                formItemProps={{\r\n                  rules: [{ validator: validatePayoutPercentage }],\r\n                  required: true,\r\n                }}\r\n                accessory={\r\n                  isFirstSplit && onCurrencyChange ? (\r\n                    <CurrencySwitch\r\n                      onCurrencyChange={onCurrencyChange}\r\n                      currency={currencyName}\r\n                    />\r\n                  ) : (\r\n                    <InputAccessoryButton content={currencyName} />\r\n                  )\r\n                }\r\n              />\r\n              <div\r\n                style={{\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  marginLeft: 10,\r\n                }}\r\n              >\r\n                <Trans>{form.getFieldValue('percent')}%</Trans>\r\n                <TooltipIcon\r\n                  tip={\r\n                    <Trans>\r\n                      If you don't raise the sum of all your payouts (\r\n                      <CurrencySymbol currency={currencyName} />\r\n                      {distributionLimit}), this address will receive{' '}\r\n                      {form.getFieldValue('percent')}% of all the funds you\r\n                      raise.\r\n                    </Trans>\r\n                  }\r\n                  placement={'topLeft'}\r\n                  iconStyle={{ marginLeft: 5 }}\r\n                />\r\n              </div>\r\n            </div>\r\n          </Form.Item>\r\n        ) : (\r\n          <Form.Item>\r\n            <div\r\n              style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n              }}\r\n            >\r\n              <span style={{ flex: 1 }}>\r\n                <NumberSlider\r\n                  onChange={(percentage: number | undefined) => {\r\n                    form.setFieldsValue({ percent: percentage })\r\n                  }}\r\n                  step={0.01}\r\n                  defaultValue={0}\r\n                  sliderValue={form.getFieldValue('percent') ?? 0}\r\n                  suffix=\"%\"\r\n                  name=\"percent\"\r\n                  formItemProps={{\r\n                    rules: [{ validator: validatePayoutPercentage }],\r\n                  }}\r\n                />\r\n              </span>\r\n            </div>\r\n          </Form.Item>\r\n        )}\r\n        <Form.Item\r\n          name=\"lockedUntil\"\r\n          label={t`Lock until`}\r\n          extra={\r\n            <Trans>\r\n              If locked, this split can't be edited or removed until the lock\r\n              expires or the funding cycle is reconfigured.\r\n            </Trans>\r\n          }\r\n        >\r\n          <DatePicker\r\n            disabledDate={disabledDate}\r\n            onChange={lockedUntil => setLockedUntil(lockedUntil)}\r\n          />\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n  )\r\n}\r\n","import { useState, useCallback } from 'react'\r\n\r\n/**\r\n * Provides State for Funding Cycle Drawers.\r\n */\r\nexport function useFundingCycleDrawer(onClose: VoidFunction) {\r\n  const [unsavedChangesModalVisible, setUnsavedChangesModalVisible] =\r\n    useState(false)\r\n\r\n  const [formUpdated, setFormUpdated] = useState<boolean>(false)\r\n\r\n  const emitDrawerClose = onClose\r\n\r\n  const openModal = () => setUnsavedChangesModalVisible(true)\r\n  const closeModal = () => setUnsavedChangesModalVisible(false)\r\n\r\n  const handleDrawerCloseClick = useCallback(() => {\r\n    if (!formUpdated) {\r\n      return emitDrawerClose()\r\n    }\r\n    openModal()\r\n  }, [formUpdated, emitDrawerClose])\r\n\r\n  return {\r\n    emitDrawerClose,\r\n    formUpdated,\r\n    setFormUpdated,\r\n    unsavedChangesModalVisible,\r\n    openModal,\r\n    closeModal,\r\n    handleDrawerCloseClick,\r\n  }\r\n}\r\n","import { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { V2ContractName } from 'models/v2/contracts'\r\nimport { useContext } from 'react'\r\n\r\nimport useContractReader from './V2ContractReader'\r\n\r\n/** Returns address of project owner. */\r\nexport default function useProjectOwner(projectId: number | undefined) {\r\n  const { isPreviewMode } = useContext(V2ProjectContext)\r\n\r\n  return useContractReader<string>({\r\n    contract: V2ContractName.JBProjects,\r\n    functionName: 'ownerOf',\r\n    args: projectId && !isPreviewMode ? [projectId] : null,\r\n  })\r\n}\r\n","import { V2ContractName } from 'models/v2/contracts'\r\n\r\nimport useV2ContractReader from './V2ContractReader'\r\n\r\nexport default function useProjectTerminals({\r\n  projectId,\r\n  useDeprecatedContract,\r\n}: {\r\n  projectId?: number\r\n  useDeprecatedContract?: boolean\r\n}) {\r\n  return useV2ContractReader<string[]>({\r\n    contract: useDeprecatedContract\r\n      ? V2ContractName.DeprecatedJBDirectory\r\n      : V2ContractName.JBDirectory,\r\n    functionName: 'terminalsOf',\r\n    args: projectId ? [projectId] : null,\r\n  })\r\n}\r\n","import { V2ContractName } from 'models/v2/contracts'\r\nimport { V2FundingCycle, V2FundingCycleMetadata } from 'models/v2/fundingCycle'\r\n\r\nimport useV2ContractReader from './V2ContractReader'\r\n\r\nexport default function useProjectCurrentFundingCycle({\r\n  projectId,\r\n  useDeprecatedContract,\r\n}: {\r\n  projectId?: number\r\n  useDeprecatedContract?: boolean\r\n}) {\r\n  return useV2ContractReader<[V2FundingCycle, V2FundingCycleMetadata]>({\r\n    contract: useDeprecatedContract\r\n      ? V2ContractName.DeprecatedJBController\r\n      : V2ContractName.JBController,\r\n    functionName: 'currentFundingCycleOf',\r\n    args: projectId ? [projectId] : null,\r\n  })\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { t, Trans } from '@lingui/macro'\r\nimport { Statistic } from 'antd'\r\nimport CurrencySymbol from 'components/CurrencySymbol'\r\nimport TooltipLabel from 'components/TooltipLabel'\r\nimport { formatWad } from 'utils/formatNumber'\r\nimport {\r\n  formatDiscountRate,\r\n  formatRedemptionRate,\r\n  MAX_DISTRIBUTION_LIMIT,\r\n} from 'utils/v2/math'\r\n\r\nimport FundingCycleDetailWarning from 'components/Project/FundingCycleDetailWarning'\r\nimport { detailedTimeString } from 'utils/formatTime'\r\nimport {\r\n  DISCOUNT_RATE_EXPLANATION,\r\n  REDEMPTION_RATE_EXPLANATION,\r\n} from 'components/v2/V2Project/V2FundingCycleSection/settingExplanations'\r\nimport SplitList from 'components/v2/shared/SplitList'\r\nimport { Split } from 'models/v2/splits'\r\n\r\nimport { getBallotStrategyByAddress } from 'constants/v2/ballotStrategies/getBallotStrategiesByAddress'\r\nimport {\r\n  FUNDING_CYCLE_WARNING_TEXT,\r\n  RESERVED_RATE_WARNING_THRESHOLD_PERCENT,\r\n} from 'constants/fundingWarningText'\r\nimport { CurrencyName } from 'constants/currency'\r\n\r\nexport function DistributionLimitStatistic({\r\n  distributionLimit,\r\n  currencyName,\r\n  showDetail,\r\n}: {\r\n  distributionLimit: BigNumber | undefined\r\n  currencyName: CurrencyName\r\n  showDetail?: boolean\r\n}) {\r\n  const hasDistributionLimit =\r\n    distributionLimit && !distributionLimit.eq(MAX_DISTRIBUTION_LIMIT)\r\n  return (\r\n    <Statistic\r\n      title={\r\n        <TooltipLabel\r\n          label={t`Distribution limit`}\r\n          tip={t`The maximum amount of funds allowed to be distributed from the project's treasury each funding cycle.`}\r\n        />\r\n      }\r\n      valueRender={() =>\r\n        hasDistributionLimit ? (\r\n          distributionLimit.eq(0) ? (\r\n            <span>\r\n              {showDetail ? (\r\n                <Trans>\r\n                  Distribution limit is 0: All funds will be considered overflow\r\n                  and can be redeemed by token holders.\r\n                </Trans>\r\n              ) : (\r\n                <Trans>Zero</Trans>\r\n              )}\r\n            </span>\r\n          ) : (\r\n            <span>\r\n              <CurrencySymbol currency={currencyName} />\r\n              {formatWad(distributionLimit)}{' '}\r\n            </span>\r\n          )\r\n        ) : (\r\n          <span>\r\n            {showDetail ? (\r\n              <Trans>\r\n                Distribution limit is infinite.{' '}\r\n                <p style={{ fontSize: '1rem' }}>\r\n                  The project will control how all funds are distributed, and\r\n                  none can be redeemed by token holders.\r\n                </p>\r\n              </Trans>\r\n            ) : (\r\n              <Trans>Infinite (no limit)</Trans>\r\n            )}\r\n          </span>\r\n        )\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nexport function DurationStatistic({\r\n  duration,\r\n  showWarning,\r\n}: {\r\n  duration: BigNumber | undefined\r\n  showWarning?: boolean\r\n}) {\r\n  const formattedDuration = detailedTimeString({\r\n    timeSeconds: duration?.toNumber(),\r\n  })\r\n  const hasDuration = duration?.gt(0)\r\n\r\n  return (\r\n    <Statistic\r\n      title={t`Duration`}\r\n      valueRender={() => (\r\n        <FundingCycleDetailWarning\r\n          showWarning={showWarning}\r\n          tooltipTitle={FUNDING_CYCLE_WARNING_TEXT().duration}\r\n        >\r\n          {hasDuration ? formattedDuration : t`Not set`}\r\n        </FundingCycleDetailWarning>\r\n      )}\r\n    />\r\n  )\r\n}\r\n\r\nexport function ReservedTokensStatistic({\r\n  reservedRate,\r\n  reservedPercentage,\r\n}: {\r\n  reservedRate: string\r\n  reservedPercentage: number\r\n}) {\r\n  return (\r\n    <Statistic\r\n      title={\r\n        <TooltipLabel\r\n          label={t`Reserved tokens`}\r\n          tip={\r\n            <Trans>\r\n              Amount of newly minted project tokens{' '}\r\n              <strong>reserved for the project</strong> when 1 ETH is\r\n              contributed. Reserve tokens are reserved for the project owner by\r\n              default, but can also be allocated to other wallet addresses by\r\n              the owner.\r\n            </Trans>\r\n          }\r\n        />\r\n      }\r\n      value={`${reservedRate} (${reservedPercentage}`}\r\n      suffix={\r\n        <FundingCycleDetailWarning\r\n          showWarning={\r\n            reservedPercentage > RESERVED_RATE_WARNING_THRESHOLD_PERCENT\r\n          }\r\n          tooltipTitle={FUNDING_CYCLE_WARNING_TEXT().metadataReservedRate}\r\n        >\r\n          %)\r\n        </FundingCycleDetailWarning>\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nexport function IssuanceRateStatistic({\r\n  issuanceRate,\r\n  isInitial,\r\n}: {\r\n  issuanceRate: string\r\n  isInitial?: boolean\r\n}) {\r\n  return (\r\n    <Statistic\r\n      title={\r\n        <TooltipLabel\r\n          label={isInitial ? t`Initial issuance rate` : t`Contributor rate`}\r\n          tip={t`Contributors will be rewarded this amount of your project's tokens per ETH contributed.`}\r\n        />\r\n      }\r\n      value={t`${issuanceRate} tokens / ETH`}\r\n    />\r\n  )\r\n}\r\n\r\nexport function InflationRateStatistic({\r\n  inflationRate,\r\n  isInitial,\r\n}: {\r\n  inflationRate: string\r\n  isInitial?: boolean\r\n}) {\r\n  return (\r\n    <Statistic\r\n      title={\r\n        <TooltipLabel\r\n          label={isInitial ? t`Initial mint rate` : t`Mint rate`}\r\n          tip={\r\n            <Trans>\r\n              <strong>Total project tokens minted</strong> when 1 ETH is\r\n              contributed. This can change over time according to the discount\r\n              rate and reserved tokens amount of future funding cycles.\r\n            </Trans>\r\n          }\r\n        />\r\n      }\r\n      value={t`${inflationRate} tokens / ETH`}\r\n    />\r\n  )\r\n}\r\n\r\nexport function DiscountRateStatistic({\r\n  discountRate,\r\n}: {\r\n  discountRate: BigNumber\r\n}) {\r\n  return (\r\n    <Statistic\r\n      title={\r\n        <TooltipLabel\r\n          label={t`Discount rate`}\r\n          tip={DISCOUNT_RATE_EXPLANATION}\r\n        />\r\n      }\r\n      value={formatDiscountRate(discountRate)}\r\n      suffix=\"%\"\r\n    />\r\n  )\r\n}\r\n\r\nexport function RedemptionRateStatistic({\r\n  redemptionRate,\r\n}: {\r\n  redemptionRate: BigNumber\r\n}) {\r\n  return (\r\n    <Statistic\r\n      title={\r\n        <TooltipLabel\r\n          label={t`Redemption rate`}\r\n          tip={REDEMPTION_RATE_EXPLANATION}\r\n        />\r\n      }\r\n      value={formatRedemptionRate(redemptionRate)}\r\n      suffix=\"%\"\r\n    />\r\n  )\r\n}\r\n\r\nexport function PausePayStatistic({ pausePay }: { pausePay: boolean }) {\r\n  return (\r\n    <Statistic\r\n      title={\r\n        <TooltipLabel\r\n          label={t`Payments paused`}\r\n          tip={\r\n            !pausePay\r\n              ? t`Project is accepting payments this funding cycle.`\r\n              : t`Project is not accepting payments this funding cycle.`\r\n          }\r\n        />\r\n      }\r\n      value={pausePay ? t`Yes` : t`No`}\r\n    />\r\n  )\r\n}\r\n\r\nexport function AllowMintingStatistic({\r\n  allowMinting,\r\n}: {\r\n  allowMinting: boolean\r\n}) {\r\n  return (\r\n    <Statistic\r\n      title={\r\n        <TooltipLabel\r\n          label={t`Allow token minting`}\r\n          tip={\r\n            allowMinting\r\n              ? t`Owner can mint tokens at any time.`\r\n              : t`Owner is not allowed to mint tokens.`\r\n          }\r\n        />\r\n      }\r\n      valueRender={() => (\r\n        <FundingCycleDetailWarning\r\n          showWarning={allowMinting}\r\n          tooltipTitle={FUNDING_CYCLE_WARNING_TEXT().allowMinting}\r\n        >\r\n          {allowMinting ? t`Allowed` : t`Disabled`}\r\n          {` `}\r\n        </FundingCycleDetailWarning>\r\n      )}\r\n    />\r\n  )\r\n}\r\n\r\nexport function ReconfigurationStatistic({\r\n  ballotAddress,\r\n}: {\r\n  ballotAddress: string\r\n}) {\r\n  return (\r\n    <Statistic\r\n      title={\r\n        <TooltipLabel\r\n          label={t`Reconfiguration rules`}\r\n          tip={t`How long before your next funding cycle must you reconfigure in order for changes to take effect.`}\r\n        />\r\n      }\r\n      valueRender={() => {\r\n        const ballot = getBallotStrategyByAddress(ballotAddress)\r\n        return (\r\n          <FundingCycleDetailWarning\r\n            showWarning={\r\n              !ballot.durationSeconds || ballot.durationSeconds === 0\r\n            }\r\n            tooltipTitle={FUNDING_CYCLE_WARNING_TEXT().ballot}\r\n          >\r\n            <div>\r\n              {ballot.name}{' '}\r\n              <div style={{ fontSize: '0.7rem' }}>{ballot.address}</div>\r\n            </div>\r\n          </FundingCycleDetailWarning>\r\n        )\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nexport function DistributionSplitsStatistic({\r\n  splits,\r\n  currency,\r\n  totalValue,\r\n  projectOwnerAddress,\r\n  showSplitValues,\r\n  fundingCycleDuration,\r\n}: {\r\n  splits: Split[]\r\n  currency: BigNumber | undefined\r\n  totalValue: BigNumber | undefined\r\n  projectOwnerAddress: string | undefined\r\n  showSplitValues: boolean\r\n  fundingCycleDuration: BigNumber | undefined\r\n}) {\r\n  const formattedDuration = detailedTimeString({\r\n    timeSeconds: fundingCycleDuration?.toNumber(),\r\n    fullWords: true,\r\n  })\r\n  const hasDuration = fundingCycleDuration?.gt(0)\r\n\r\n  return (\r\n    <Statistic\r\n      title={\r\n        <TooltipLabel\r\n          label={t`Payouts`}\r\n          tip={\r\n            <Trans>\r\n              Available funds can be distributed according to the payouts below\r\n              {hasDuration ? ` every ${formattedDuration}` : null}.\r\n            </Trans>\r\n          }\r\n        />\r\n      }\r\n      valueRender={() => (\r\n        <SplitList\r\n          splits={splits}\r\n          currency={currency}\r\n          totalValue={totalValue}\r\n          projectOwnerAddress={projectOwnerAddress}\r\n          showSplitValues={showSplitValues}\r\n        />\r\n      )}\r\n    />\r\n  )\r\n}\r\n\r\nexport function ReservedSplitsStatistic({\r\n  splits,\r\n  reservedPercentage,\r\n  projectOwnerAddress,\r\n}: {\r\n  splits: Split[]\r\n  reservedPercentage: number\r\n  projectOwnerAddress: string | undefined\r\n}) {\r\n  return (\r\n    <Statistic\r\n      title={\r\n        <TooltipLabel\r\n          label={t`Reserved token allocation`}\r\n          tip={t`How the ${reservedPercentage}% of your project's reserved tokens will be split.`}\r\n        />\r\n      }\r\n      valueRender={() => (\r\n        <SplitList\r\n          splits={splits}\r\n          projectOwnerAddress={projectOwnerAddress}\r\n          totalValue={undefined}\r\n        />\r\n      )}\r\n    />\r\n  )\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { V2ContractName } from 'models/v2/contracts'\r\n\r\nimport useV2ContractReader from './V2ContractReader'\r\n\r\nexport default function useTerminalCurrentOverflow({\r\n  terminal,\r\n  projectId,\r\n}: {\r\n  terminal?: string\r\n  projectId?: number\r\n}) {\r\n  return useV2ContractReader<BigNumber>({\r\n    contract: V2ContractName.JBSingleTokenPaymentTerminalStore,\r\n    functionName: 'currentOverflowOf',\r\n    args: terminal && projectId ? [terminal, projectId] : null,\r\n  })\r\n}\r\n","import { V2ContractName } from 'models/v2/contracts'\r\n\r\nimport useV2ContractReader from './V2ContractReader'\r\n\r\nexport default function useProjectToken({ projectId }: { projectId?: number }) {\r\n  return useV2ContractReader<string>({\r\n    contract: V2ContractName.JBTokenStore,\r\n    functionName: 'tokenOf',\r\n    args: projectId ? [projectId] : null,\r\n  })\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { Trans } from '@lingui/macro'\r\nimport CurrencySymbol from 'components/CurrencySymbol'\r\nimport { formatWad } from 'utils/formatNumber'\r\nimport { MAX_DISTRIBUTION_LIMIT } from 'utils/v2/math'\r\nimport TooltipIcon from 'components/TooltipIcon'\r\n\r\nimport { useContext } from 'react'\r\nimport { ThemeContext } from 'contexts/themeContext'\r\n\r\nimport { CurrencyName } from 'constants/currency'\r\n\r\nexport default function DistributionLimit({\r\n  distributionLimit,\r\n  currencyName,\r\n  showTooltip,\r\n}: {\r\n  distributionLimit: BigNumber | undefined\r\n  currencyName: CurrencyName | undefined\r\n  showTooltip?: boolean\r\n}) {\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n\r\n  const distributionLimitIsInfinite = distributionLimit?.eq(\r\n    MAX_DISTRIBUTION_LIMIT,\r\n  )\r\n  const distributionLimitIsZero = distributionLimit?.eq(0)\r\n\r\n  const _tooltip = showTooltip ? (\r\n    <TooltipIcon\r\n      tip={\r\n        distributionLimitIsInfinite ? (\r\n          <Trans>\r\n            All funds received by the treasury will be distributed. Token\r\n            holders will receive <strong>no ETH</strong> when burning their\r\n            tokens.\r\n          </Trans>\r\n        ) : distributionLimitIsZero ? (\r\n          <Trans>\r\n            No funds can be distributed out of the treasury. Funds can only be\r\n            accessed by token holders redeeming their tokens.\r\n          </Trans>\r\n        ) : (\r\n          <Trans>\r\n            If you don't raise this amount, your splits will receive their\r\n            percentage of whatever you raise.\r\n          </Trans>\r\n        )\r\n      }\r\n      placement={'topLeft'}\r\n      iconStyle={{ marginLeft: 5 }}\r\n    />\r\n  ) : null\r\n\r\n  const _text = distributionLimitIsInfinite ? (\r\n    <Trans>No limit (infinite)</Trans>\r\n  ) : distributionLimitIsZero ? (\r\n    <Trans>Zero</Trans>\r\n  ) : (\r\n    <>\r\n      <CurrencySymbol currency={currencyName} />\r\n      {formatWad(distributionLimit)}\r\n    </>\r\n  )\r\n\r\n  return (\r\n    <span style={{ color: colors.text.primary }}>\r\n      {_text}\r\n      {_tooltip}\r\n    </span>\r\n  )\r\n}\r\n","import { Button, Col, Row, Space, Tooltip } from 'antd'\r\nimport { ThemeContext } from 'contexts/themeContext'\r\nimport { Split } from 'models/v2/splits'\r\nimport { PropsWithChildren, useContext, useState } from 'react'\r\nimport { parseWad } from 'utils/formatNumber'\r\nimport FormattedAddress from 'components/FormattedAddress'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\n\r\nimport { formatDate } from 'utils/formatDate'\r\nimport { CrownFilled, LockOutlined, DeleteOutlined } from '@ant-design/icons'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\n\r\nimport {\r\n  formatSplitPercent,\r\n  MAX_DISTRIBUTION_LIMIT,\r\n  preciseFormatSplitPercent,\r\n  SPLITS_TOTAL_PERCENT,\r\n} from 'utils/v2/math'\r\nimport CurrencySymbol from 'components/CurrencySymbol'\r\nimport { amountFromPercent } from 'utils/v2/distributions'\r\nimport { t, Trans } from '@lingui/macro'\r\nimport TooltipIcon from 'components/TooltipIcon'\r\n\r\nimport DistributionSplitModal from './DistributionSplitModal'\r\nimport { CurrencyName } from 'constants/currency'\r\n\r\nconst Parens = ({\r\n  withParens = false,\r\n  children,\r\n}: PropsWithChildren<{ withParens: boolean }>) => {\r\n  if (withParens) return <>({children})</>\r\n  return <>{children}</>\r\n}\r\n\r\nexport default function DistributionSplitCard({\r\n  split,\r\n  splits,\r\n  distributionLimit,\r\n  currencyName,\r\n  isLocked,\r\n  isProjectOwner,\r\n  editInputMode,\r\n  onSplitsChanged,\r\n  onSplitDelete,\r\n  setDistributionLimit,\r\n  onCurrencyChange,\r\n}: {\r\n  split: Split\r\n  splits: Split[]\r\n  distributionLimit?: string\r\n  currencyName: CurrencyName\r\n  isLocked?: boolean\r\n  isProjectOwner?: boolean\r\n  editInputMode?: 'Distribution' | 'Percentage'\r\n  onSplitsChanged?: (splits: Split[]) => void\r\n  onSplitDelete?: (split: Split) => void\r\n  setDistributionLimit?: (distributionLimit: string) => void\r\n  onCurrencyChange?: (currencyName: CurrencyName) => void\r\n}) {\r\n  const {\r\n    theme: { colors, radii },\r\n  } = useContext(ThemeContext)\r\n  const { projectOwnerAddress } = useContext(V2ProjectContext)\r\n\r\n  const [editSplitModalOpen, setEditSplitModalOpen] = useState<boolean>(false)\r\n\r\n  const gutter = 10\r\n\r\n  const labelColSpan = 9\r\n  const dataColSpan = 15\r\n\r\n  const isProject = parseInt(split.projectId ?? '0') > 0\r\n\r\n  // !isProject added here because we don't want to show the crown next to\r\n  // a project recipient whose token benefiary is the owner of this project\r\n  const isOwner =\r\n    (projectOwnerAddress === split.beneficiary && !isProject) || isProjectOwner\r\n\r\n  const distributionLimitIsInfinite =\r\n    !distributionLimit || parseWad(distributionLimit).eq(MAX_DISTRIBUTION_LIMIT)\r\n\r\n  // If percentage has greater than 2 dp it will be rounded in the UI\r\n  const percentIsRounded =\r\n    split.percent !== SPLITS_TOTAL_PERCENT &&\r\n    (split.percent / SPLITS_TOTAL_PERCENT).toString().split('.')[1]?.length > 4\r\n\r\n  const cursor = isLocked ? 'default' : 'pointer'\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        padding: 10,\r\n        border:\r\n          '1px solid ' +\r\n          (isLocked ? colors.stroke.disabled : colors.stroke.tertiary),\r\n        borderRadius: radii.md,\r\n      }}\r\n    >\r\n      <Space\r\n        direction=\"vertical\"\r\n        style={{\r\n          width: '100%',\r\n          color: colors.text.primary,\r\n          cursor,\r\n        }}\r\n        onClick={!isLocked ? () => setEditSplitModalOpen(true) : undefined}\r\n      >\r\n        {split.projectId && parseInt(split.projectId) > 0 ? (\r\n          <Row gutter={gutter} style={{ width: '100%' }} align=\"middle\">\r\n            <Col span={labelColSpan}>\r\n              <label style={{ cursor }}>\r\n                <Trans>Project ID:</Trans>\r\n              </label>{' '}\r\n            </Col>\r\n            <Col span={dataColSpan}>\r\n              <div\r\n                style={{\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'space-between',\r\n                }}\r\n              >\r\n                <span style={{ cursor }}>{split.projectId}</span>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        ) : (\r\n          <Row gutter={gutter} style={{ width: '100%' }} align=\"middle\">\r\n            <Col span={labelColSpan}>\r\n              <label style={{ cursor }}>\r\n                <Trans>Address:</Trans>\r\n              </label>{' '}\r\n            </Col>\r\n            <Col span={dataColSpan}>\r\n              <div\r\n                style={{\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'space-between',\r\n                }}\r\n              >\r\n                {isOwner && !split.beneficiary ? (\r\n                  <span style={{ cursor }}>\r\n                    <Trans>Project owner (you)</Trans>\r\n                  </span>\r\n                ) : (\r\n                  <span style={{ cursor: 'pointer' }}>\r\n                    <FormattedAddress address={split.beneficiary} />\r\n                  </span>\r\n                )}\r\n                {isOwner && (\r\n                  <Tooltip title={t`Project owner`}>\r\n                    <CrownFilled />\r\n                  </Tooltip>\r\n                )}\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        )}\r\n\r\n        {parseInt(split.projectId ?? '0') > 0 ? (\r\n          <Row>\r\n            <Col span={labelColSpan}>\r\n              <label style={{ cursor }}>\r\n                <Trans>Token beneficiary:</Trans>\r\n              </label>\r\n            </Col>\r\n            <Col span={dataColSpan}>\r\n              <span style={{ cursor: 'pointer' }}>\r\n                <FormattedAddress address={split.beneficiary} />\r\n              </span>\r\n            </Col>\r\n          </Row>\r\n        ) : null}\r\n\r\n        <Row gutter={gutter} style={{ width: '100%' }} align=\"middle\">\r\n          <Col span={labelColSpan}>\r\n            <label style={{ cursor }}>\r\n              {distributionLimitIsInfinite ? (\r\n                <Trans>Percentage:</Trans>\r\n              ) : (\r\n                <Trans>Amount:</Trans>\r\n              )}\r\n            </label>\r\n          </Col>\r\n          <Col span={dataColSpan}>\r\n            <div\r\n              style={{\r\n                display: 'flex',\r\n                width: '100%',\r\n                justifyContent: 'space-between',\r\n                alignItems: 'center',\r\n              }}\r\n            >\r\n              <span\r\n                style={{\r\n                  marginRight: 10,\r\n                  width: 100,\r\n                  maxWidth: 100,\r\n                }}\r\n              >\r\n                <Space size=\"small\" direction=\"horizontal\">\r\n                  {!distributionLimitIsInfinite && (\r\n                    <span>\r\n                      <CurrencySymbol currency={currencyName} />\r\n                      {parseFloat(\r\n                        amountFromPercent({\r\n                          percent: preciseFormatSplitPercent(split.percent),\r\n                          amount: distributionLimit,\r\n                        }).toFixed(4),\r\n                      )}\r\n                    </span>\r\n                  )}\r\n                  <span>\r\n                    <Parens withParens={!distributionLimitIsInfinite}>\r\n                      {percentIsRounded ? '~' : null}\r\n                      {formatSplitPercent(BigNumber.from(split.percent))}%\r\n                    </Parens>\r\n                  </span>\r\n                </Space>\r\n              </span>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        {split.lockedUntil ? (\r\n          <Row gutter={gutter} style={{ width: '100%' }} align=\"middle\">\r\n            <Col span={labelColSpan}>\r\n              <label style={{ cursor }}>\r\n                <Trans>Locked:</Trans>\r\n              </label>\r\n            </Col>\r\n            <Col span={dataColSpan}>\r\n              until {formatDate((split.lockedUntil ?? 0) * 1000, 'yyyy-MM-DD')}\r\n            </Col>\r\n          </Row>\r\n        ) : null}\r\n      </Space>\r\n\r\n      {isLocked ? (\r\n        <>\r\n          {!isOwner ? (\r\n            <Tooltip title={<Trans>Payout is locked</Trans>}>\r\n              <LockOutlined\r\n                style={{ color: colors.icon.disabled, paddingTop: '4px' }}\r\n              />\r\n            </Tooltip>\r\n          ) : (\r\n            <TooltipIcon\r\n              iconStyle={{ paddingTop: '4px' }}\r\n              tip={\r\n                <Trans>\r\n                  You have configured for all funds to be distributed from the\r\n                  treasury. Your current payouts do not sum to 100%, so the\r\n                  remainder will go to the project owner.\r\n                </Trans>\r\n              }\r\n            />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <Tooltip title={<Trans>Delete payout</Trans>}>\r\n          <Button\r\n            type=\"text\"\r\n            onClick={e => {\r\n              onSplitDelete?.(split)\r\n              e.stopPropagation()\r\n            }}\r\n            icon={<DeleteOutlined />}\r\n            style={{ height: 16 }}\r\n          />\r\n        </Tooltip>\r\n      )}\r\n      {!isLocked ? (\r\n        <DistributionSplitModal\r\n          visible={editSplitModalOpen}\r\n          overrideDistTypeWithPercentage={editInputMode === 'Percentage'}\r\n          onSplitsChanged={onSplitsChanged}\r\n          mode={'Edit'}\r\n          splits={splits}\r\n          editingSplit={split}\r\n          distributionLimit={distributionLimit}\r\n          setDistributionLimit={setDistributionLimit}\r\n          onClose={() => setEditSplitModalOpen(false)}\r\n          currencyName={currencyName}\r\n          onCurrencyChange={onCurrencyChange}\r\n        />\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { V2ContractName } from 'models/v2/contracts'\r\n\r\nimport useV2ContractReader from './V2ContractReader'\r\n\r\nexport default function useUsedDistributionLimit({\r\n  projectId,\r\n  terminal,\r\n  fundingCycleNumber,\r\n}: {\r\n  projectId: number | undefined\r\n  terminal: string | undefined\r\n  fundingCycleNumber: BigNumber | undefined\r\n}) {\r\n  return useV2ContractReader<BigNumber>({\r\n    contract: V2ContractName.JBSingleTokenPaymentTerminalStore,\r\n    functionName: 'usedDistributionLimitOf',\r\n    args:\r\n      terminal && projectId && fundingCycleNumber\r\n        ? [terminal, projectId, fundingCycleNumber]\r\n        : null,\r\n  })\r\n}\r\n","import { NetworkContext } from 'contexts/networkContext'\r\nimport { useContext } from 'react'\r\n\r\nimport { V2ContractName } from 'models/v2/contracts'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\n\r\nimport useProjectOwner from './ProjectOwner'\r\nimport useContractReader from './V2ContractReader'\r\n\r\nexport enum V2OperatorPermission {\r\n  'RECONFIGURE' = 1,\r\n  'REDEEM' = 2,\r\n  'MIGRATE_CONTROLLER' = 3,\r\n  'MIGRATE_TERMINAL' = 4,\r\n  'PROCESS_FEES' = 5,\r\n  'SET_METADATA' = 6,\r\n  'ISSUE' = 7,\r\n  'CHANGE_TOKEN' = 8,\r\n  'MINT' = 9,\r\n  'BURN' = 10,\r\n  'CLAIM' = 11,\r\n  'TRANSFER' = 12,\r\n  'REQUIRE_CLAIM' = 13,\r\n  'SET_CONTROLLER' = 14,\r\n  'SET_TERMINALS' = 15,\r\n  'SET_PRIMARY_TERMINAL' = 16,\r\n  'USE_ALLOWANCE' = 17,\r\n  'SET_SPLITS' = 18,\r\n}\r\n\r\nexport function useHasPermission(\r\n  permission: V2OperatorPermission | V2OperatorPermission[],\r\n) {\r\n  const { userAddress } = useContext(NetworkContext)\r\n  const { projectId, isPreviewMode } = useContext(V2ProjectContext)\r\n\r\n  const { data: owner } = useProjectOwner(projectId)\r\n\r\n\r\n\r\n  const hasOperatorPermission = useContractReader<boolean>({\r\n    contract: V2ContractName.JBOperatorStore,\r\n    functionName: 'hasPermissions',\r\n    args:\r\n      userAddress && owner && projectId && !isPreviewMode\r\n        ? [\r\n            userAddress,\r\n            owner,\r\n            projectId,\r\n            Array.isArray(permission) ? permission : [permission],\r\n          ]\r\n        : null,\r\n  })\r\n\r\n  if (isPreviewMode) return false\r\n\r\n  const isOwner =\r\n    userAddress && owner && userAddress.toLowerCase() === owner.toLowerCase()\r\n\r\n  return (\r\n    isOwner ||\r\n    hasOperatorPermission.data ||\r\n    process.env.NODE_ENV === 'development'\r\n  )\r\n}\r\n","import { V2ContractName } from 'models/v2/contracts'\r\nimport { V2FundingCycle, V2FundingCycleMetadata } from 'models/v2/fundingCycle'\r\n\r\nimport useV2ContractReader from './V2ContractReader'\r\n\r\nexport default function useProjectQueuedFundingCycle({\r\n  projectId,\r\n}: {\r\n  projectId?: number\r\n}) {\r\n  return useV2ContractReader<[V2FundingCycle, V2FundingCycleMetadata]>({\r\n    contract: V2ContractName.JBController,\r\n    functionName: 'queuedFundingCycleOf',\r\n    args: projectId ? [projectId] : null,\r\n  })\r\n}\r\n","import { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { V2UserContext } from 'contexts/v2/userContext'\r\nimport { useContext } from 'react'\r\n\r\nimport { JUICEBOX_MONEY_METADATA_DOMAIN } from 'constants/v2/metadataDomain'\r\n\r\nimport { TransactorInstance } from '../../Transactor'\r\n\r\nexport function useEditV2ProjectDetailsTx(): TransactorInstance<{\r\n  cid: string\r\n}> {\r\n  const { transactor, contracts } = useContext(V2UserContext)\r\n  const { projectId } = useContext(V2ProjectContext)\r\n\r\n  return ({ cid }, txOpts) => {\r\n    if (!transactor || !projectId || !contracts?.JBProjects) {\r\n      txOpts?.onDone?.()\r\n      return Promise.resolve(false)\r\n    }\r\n\r\n    return transactor(\r\n      contracts.JBProjects,\r\n      'setMetadataOf',\r\n      [projectId, [cid, JUICEBOX_MONEY_METADATA_DOMAIN]],\r\n      txOpts,\r\n    )\r\n  }\r\n}\r\n","import { useContext } from 'react'\r\nimport { ThemeContext } from 'contexts/themeContext'\r\n\r\nexport default function V2BugNotice() {\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n\r\n  // This copy has not been prepped for translations due to being a hot fix that is likely to change.\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        padding: 20,\r\n        color: colors.text.warn,\r\n        border: `1px solid ${colors.stroke.warn}`,\r\n      }}\r\n    >\r\n      <h2 style={{ color: colors.text.warn }}>Heads up</h2>\r\n      <p>\r\n        A minor bug has been found in the V2 Juicebox protocol contracts. The\r\n        contracts have been fixed and will be redeployed soon.{' '}\r\n        <b>No funds are in danger</b> and projects are unlikely to be affected.\r\n      </p>\r\n      <p>\r\n        While the current V2 contracts are being deprecated, creating new\r\n        Juicebox projects has been temporarily disabled on the juicebox.money\r\n        app. Payments to V2 projects with a 0 treasury balance have also been\r\n        disabled. <a href=\"/#/v2-bug-updates\">More details</a>\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n","import { ThemeContext } from 'contexts/themeContext'\r\nimport { useContext } from 'react'\r\nimport { ExclamationCircleOutlined } from '@ant-design/icons'\r\n\r\nexport default function Banner({\r\n  title,\r\n  body,\r\n  actions,\r\n}: {\r\n  title: string | JSX.Element\r\n  body: string | JSX.Element\r\n  actions: JSX.Element\r\n}) {\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n  return (\r\n    <div\r\n      style={{\r\n        padding: '1rem 3.3rem',\r\n        backgroundColor: colors.background.l2,\r\n        position: 'relative',\r\n      }}\r\n    >\r\n      <ExclamationCircleOutlined\r\n        style={{ position: 'absolute', left: 20, top: 18 }}\r\n      />\r\n\r\n      <h2 style={{ color: colors.text.primary, fontSize: 14, fontWeight: 600 }}>\r\n        {title}\r\n      </h2>\r\n      <p>{body}</p>\r\n\r\n      <div>{actions}</div>\r\n    </div>\r\n  )\r\n}\r\n","import { Col, Row } from 'antd'\r\nimport {\r\n  AllowMintingStatistic,\r\n  DiscountRateStatistic,\r\n  DistributionLimitStatistic,\r\n  DistributionSplitsStatistic,\r\n  DurationStatistic,\r\n  InflationRateStatistic,\r\n  IssuanceRateStatistic,\r\n  PausePayStatistic,\r\n  ReconfigurationStatistic,\r\n  RedemptionRateStatistic,\r\n  ReservedSplitsStatistic,\r\n  ReservedTokensStatistic,\r\n} from 'pages/create/tabs/ReviewDeployTab/FundingAttributes'\r\nimport {\r\n  V2FundAccessConstraint,\r\n  V2FundingCycle,\r\n  V2FundingCycleData,\r\n  V2FundingCycleMetadata,\r\n} from 'models/v2/fundingCycle'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { useContext } from 'react'\r\nimport { NetworkContext } from 'contexts/networkContext'\r\nimport { getDefaultFundAccessConstraint } from 'utils/v2/fundingCycle'\r\nimport { V2CurrencyName } from 'utils/v2/currency'\r\nimport { V2CurrencyOption } from 'models/v2/currencyOption'\r\nimport {\r\n  formatIssuanceRate,\r\n  formatReservedRate,\r\n  MAX_DISTRIBUTION_LIMIT,\r\n  weightedAmount,\r\n} from 'utils/v2/math'\r\nimport { Split } from 'models/v2/splits'\r\nimport { formattedNum } from 'utils/formatNumber'\r\nimport { parseEther } from 'ethers/lib/utils'\r\n\r\nexport default function ReconfigurePreview({\r\n  payoutSplits,\r\n  reserveSplits,\r\n  fundingCycleMetadata,\r\n  fundingCycleData,\r\n  fundAccessConstraints,\r\n}: {\r\n  payoutSplits: Split[]\r\n  reserveSplits: Split[]\r\n  fundingCycleMetadata: V2FundingCycleMetadata\r\n  fundingCycleData: V2FundingCycleData\r\n  fundAccessConstraints: V2FundAccessConstraint[]\r\n}) {\r\n  const { userAddress } = useContext(NetworkContext)\r\n\r\n  const fundingCycle: V2FundingCycle = {\r\n    ...fundingCycleData,\r\n    number: BigNumber.from(1),\r\n    configuration: BigNumber.from(0),\r\n    basedOn: BigNumber.from(0),\r\n    start: BigNumber.from(Date.now()).div(1000),\r\n    metadata: BigNumber.from(0),\r\n  }\r\n\r\n  const fundAccessConstraint = getDefaultFundAccessConstraint(\r\n    fundAccessConstraints,\r\n  )\r\n\r\n  const currencyName = V2CurrencyName(\r\n    fundAccessConstraint?.distributionLimitCurrency.toNumber() as V2CurrencyOption,\r\n  )\r\n\r\n  const distributionLimit = fundAccessConstraint?.distributionLimit\r\n  const hasDistributionLimit = Boolean(\r\n    distributionLimit && !distributionLimit.gte(MAX_DISTRIBUTION_LIMIT),\r\n  )\r\n\r\n  const duration = fundingCycle.duration\r\n  const hasDuration = duration?.gt(0)\r\n\r\n  const issuanceRate =\r\n    formattedNum(\r\n      formatIssuanceRate(\r\n        weightedAmount(\r\n          fundingCycle?.weight,\r\n          fundingCycleMetadata?.reservedRate.toNumber(),\r\n          parseEther('1'),\r\n          'payer',\r\n        ),\r\n      ),\r\n    ) ?? '0'\r\n\r\n  const reservedPercentage = parseFloat(\r\n    formatReservedRate(fundingCycleMetadata?.reservedRate),\r\n  )\r\n\r\n  const gutter = 20\r\n  const rowMargin = 20\r\n\r\n  const secondRowColWidth = hasDuration && hasDistributionLimit ? 8 : 12\r\n\r\n  const reservedRate =\r\n    formattedNum(\r\n      formatIssuanceRate(\r\n        weightedAmount(\r\n          fundingCycle?.weight,\r\n          fundingCycleMetadata?.reservedRate.toNumber(),\r\n          parseEther('1'),\r\n          'reserved',\r\n        ) ?? '',\r\n      ),\r\n    ) ?? '0'\r\n\r\n  return (\r\n    <div style={{ padding: '0 0px' }}>\r\n      <Row gutter={gutter} style={{ marginBottom: rowMargin }}>\r\n        <Col md={12} sm={12}>\r\n          <DurationStatistic duration={fundingCycle.duration} />\r\n        </Col>\r\n        <Col md={12} sm={12}>\r\n          <DistributionLimitStatistic\r\n            distributionLimit={distributionLimit}\r\n            currencyName={currencyName ?? 'ETH'}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row gutter={gutter} style={{ marginBottom: rowMargin }}>\r\n        <Col md={12} sm={12}>\r\n          <InflationRateStatistic\r\n            inflationRate={\r\n              formattedNum(\r\n                formatIssuanceRate(fundingCycle?.weight.toString()),\r\n              ) ?? '0'\r\n            }\r\n          />\r\n        </Col>\r\n        <Col md={12} sm={12}>\r\n          <IssuanceRateStatistic issuanceRate={issuanceRate} />\r\n        </Col>\r\n      </Row>\r\n      <Row gutter={gutter} style={{ marginBottom: rowMargin }}>\r\n        <Col md={secondRowColWidth} sm={12}>\r\n          <ReservedTokensStatistic\r\n            reservedRate={reservedRate}\r\n            reservedPercentage={reservedPercentage}\r\n          />\r\n        </Col>\r\n        {hasDuration ? (\r\n          <Col md={secondRowColWidth} sm={12}>\r\n            <DiscountRateStatistic discountRate={fundingCycle.discountRate} />\r\n          </Col>\r\n        ) : null}\r\n        {hasDistributionLimit ? (\r\n          <Col md={secondRowColWidth} sm={12}>\r\n            <RedemptionRateStatistic\r\n              redemptionRate={fundingCycleMetadata.redemptionRate}\r\n            />\r\n          </Col>\r\n        ) : null}\r\n      </Row>\r\n      <Row gutter={gutter} style={{ marginBottom: rowMargin }}>\r\n        <Col md={12} sm={12}>\r\n          <PausePayStatistic pausePay={fundingCycleMetadata.pausePay} />\r\n        </Col>\r\n        <Col md={12} sm={12}>\r\n          <AllowMintingStatistic\r\n            allowMinting={fundingCycleMetadata.allowMinting}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row gutter={gutter} style={{ marginBottom: rowMargin }}>\r\n        {hasDuration ? (\r\n          <Col span={24}>\r\n            <ReconfigurationStatistic ballotAddress={fundingCycle.ballot} />\r\n          </Col>\r\n        ) : null}\r\n      </Row>\r\n\r\n      {!distributionLimit?.eq(0) && (\r\n        <DistributionSplitsStatistic\r\n          splits={payoutSplits}\r\n          currency={fundAccessConstraint?.distributionLimitCurrency}\r\n          totalValue={distributionLimit}\r\n          projectOwnerAddress={userAddress}\r\n          showSplitValues={hasDistributionLimit}\r\n          fundingCycleDuration={duration}\r\n        />\r\n      )}\r\n      {fundingCycleMetadata?.reservedRate.gt(0) && (\r\n        <ReservedSplitsStatistic\r\n          splits={reserveSplits}\r\n          reservedPercentage={reservedPercentage}\r\n          projectOwnerAddress={userAddress}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { Button, Form, Input } from 'antd'\r\nimport { useContext, useEffect, useMemo, useState } from 'react'\r\n\r\nimport Banner from 'components/Banner'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport TransactionModal from 'components/TransactionModal'\r\nimport {\r\n  V2FundAccessConstraint,\r\n  V2FundingCycleData,\r\n  V2FundingCycleMetadata,\r\n} from 'models/v2/fundingCycle'\r\nimport { V2UserContext } from 'contexts/v2/userContext'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport useProjectTerminals from 'hooks/v2/contractReader/ProjectTerminals'\r\nimport useProjectDistributionLimit from 'hooks/v2/contractReader/ProjectDistributionLimit'\r\nimport useProjectCurrentFundingCycle from 'hooks/v2/contractReader/ProjectCurrentFundingCycle'\r\nimport useProjectSplits from 'hooks/v2/contractReader/ProjectSplits'\r\nimport { useLaunchFundingCyclesTx } from 'hooks/v2/transactor/LaunchFundingCyclesTx'\r\n\r\nimport {\r\n  ETH_PAYOUT_SPLIT_GROUP,\r\n  RESERVED_TOKEN_SPLIT_GROUP,\r\n} from 'constants/v2/splits'\r\nimport ReconfigurePreview from '../V2ProjectReconfigureModal/ReconfigurePreview'\r\nimport { ETH_TOKEN_ADDRESS } from 'constants/v2/juiceboxTokens'\r\nimport {\r\n  BALLOT_ADDRESSES,\r\n  DEPRECATED_BALLOT_ADDRESSES,\r\n} from 'constants/v2/ballotStrategies'\r\nimport { readNetwork } from 'constants/networks'\r\n\r\nexport function RelaunchFundingCycleBanner() {\r\n  const { projectId } = useContext(V2ProjectContext)\r\n  const { contracts } = useContext(V2UserContext)\r\n  const [newDuration, setNewDuration] = useState<BigNumber>(BigNumber.from(0))\r\n  const [newStart, setNewStart] = useState<string>('1')\r\n\r\n  const [modalOpen, setModalOpen] = useState<boolean>(false)\r\n  const [transactionPending, setTransactionPending] = useState<boolean>(false)\r\n\r\n  const { data, loading: deprecatedFundingCycleLoading } =\r\n    useProjectCurrentFundingCycle({\r\n      projectId,\r\n      useDeprecatedContract: true,\r\n    })\r\n  const [deprecatedFundingCycle, deprecatedFundingCycleMetadata] = data ?? []\r\n\r\n  const { data: deprecatedPayoutSplits, loading: payoutSplitsLoading } =\r\n    useProjectSplits({\r\n      projectId,\r\n      splitGroup: ETH_PAYOUT_SPLIT_GROUP,\r\n      domain: deprecatedFundingCycle?.configuration?.toString(),\r\n      useDeprecatedContract: true,\r\n    })\r\n  const { data: deprecatedTokenSplits, loading: tokenSplitsLoading } =\r\n    useProjectSplits({\r\n      projectId,\r\n      splitGroup: RESERVED_TOKEN_SPLIT_GROUP,\r\n      domain: deprecatedFundingCycle?.configuration?.toString(),\r\n      useDeprecatedContract: true,\r\n    })\r\n\r\n  useEffect(() => {\r\n    setNewDuration(deprecatedFundingCycle?.duration ?? BigNumber.from(0))\r\n  }, [deprecatedFundingCycle])\r\n\r\n  const { data: terminals } = useProjectTerminals({\r\n    projectId,\r\n    useDeprecatedContract: true,\r\n  })\r\n  const primaryTerminal = terminals?.[0]\r\n\r\n  const { data: distributionLimitData, loading: distributionLimitLoading } =\r\n    useProjectDistributionLimit({\r\n      projectId,\r\n      configuration: deprecatedFundingCycle?.configuration?.toString(),\r\n      terminal: primaryTerminal,\r\n      useDeprecatedContract: true,\r\n    })\r\n\r\n  const [deprecatedDistributionLimit, deprecatedDistributionLimitCurrency] =\r\n    distributionLimitData ?? []\r\n\r\n  const deprecatedFundAccessConstraint: V2FundAccessConstraint = {\r\n    terminal: contracts?.JBETHPaymentTerminal.address ?? '',\r\n    token: ETH_TOKEN_ADDRESS,\r\n    distributionLimit: deprecatedDistributionLimit,\r\n    distributionLimitCurrency: deprecatedDistributionLimitCurrency,\r\n    overflowAllowance: BigNumber.from(0),\r\n    overflowAllowanceCurrency: BigNumber.from(0),\r\n  }\r\n\r\n  const launchFundingCycleTx = useLaunchFundingCyclesTx()\r\n\r\n  const newBallot = useMemo(() => {\r\n    if (!deprecatedFundingCycle) return\r\n\r\n    switch (deprecatedFundingCycle.ballot) {\r\n      case DEPRECATED_BALLOT_ADDRESSES.THREE_DAY[readNetwork.name]:\r\n        return BALLOT_ADDRESSES.THREE_DAY[readNetwork.name]!\r\n      // case DEPRECATED_BALLOT_ADDRESSES.SEVEN_DAY[readNetwork.name]:\r\n      //   return BALLOT_ADDRESSES.SEVEN_DAY[readNetwork.name]!\r\n      default:\r\n        return deprecatedFundingCycle.ballot\r\n    }\r\n  }, [deprecatedFundingCycle])\r\n\r\n  const loading =\r\n    payoutSplitsLoading ||\r\n    deprecatedFundingCycleLoading ||\r\n    tokenSplitsLoading ||\r\n    distributionLimitLoading\r\n\r\n  if (\r\n    !projectId ||\r\n    !deprecatedFundingCycle ||\r\n    !deprecatedFundingCycleMetadata\r\n  ) {\r\n    return null\r\n  }\r\n\r\n  const onLaunchModalOk = async () => {\r\n    const fundingCycleData: V2FundingCycleData = {\r\n      duration: newDuration ?? deprecatedFundingCycle.duration,\r\n      ballot: newBallot ?? deprecatedFundingCycle.ballot,\r\n      weight: deprecatedFundingCycle.weight,\r\n      discountRate: deprecatedFundingCycle.discountRate,\r\n    }\r\n\r\n    const fundingCycleMetadata: V2FundingCycleMetadata =\r\n      deprecatedFundingCycleMetadata\r\n\r\n    await launchFundingCycleTx(\r\n      {\r\n        projectId,\r\n        fundingCycleData,\r\n        fundingCycleMetadata,\r\n        fundAccessConstraints: [deprecatedFundAccessConstraint],\r\n        groupedSplits: [\r\n          {\r\n            group: ETH_PAYOUT_SPLIT_GROUP,\r\n            splits: deprecatedPayoutSplits ?? [],\r\n          },\r\n          {\r\n            group: RESERVED_TOKEN_SPLIT_GROUP,\r\n            splits: deprecatedTokenSplits ?? [],\r\n          },\r\n        ],\r\n        mustStartAtOrAfter: newStart,\r\n      },\r\n      {\r\n        onDone() {\r\n          console.info('Transaction executed. Awaiting confirmation...')\r\n          setTransactionPending(true)\r\n        },\r\n        onConfirmed() {\r\n          setTransactionPending(false)\r\n          window.location.reload()\r\n        },\r\n      },\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Banner\r\n        title={<Trans>Funding cycle required.</Trans>}\r\n        body={\r\n          <Trans>\r\n            Your Juicebox project has no active funding cycle. Launch a funding\r\n            cycle to re-enable payments on your project.\r\n          </Trans>\r\n        }\r\n        actions={\r\n          <>\r\n            <Button type=\"primary\" onClick={() => setModalOpen(true)}>\r\n              <Trans>Review and launch funding cycle</Trans>\r\n            </Button>\r\n          </>\r\n        }\r\n      />\r\n      <TransactionModal\r\n        visible={modalOpen}\r\n        title={<Trans>Launch funding cycle</Trans>}\r\n        okText={\r\n          <span>\r\n            <Trans>Launch funding cycle</Trans>\r\n          </span>\r\n        }\r\n        width={700}\r\n        onOk={onLaunchModalOk}\r\n        onCancel={() => setModalOpen(false)}\r\n        transactionPending={transactionPending}\r\n      >\r\n        {loading ? (\r\n          'Loading...'\r\n        ) : (\r\n          <>\r\n            <p style={{ marginBottom: '2rem' }}>\r\n              <Trans>\r\n                Relaunch your funding cycle on the new Juicebox V2 contracts.\r\n              </Trans>\r\n            </p>\r\n            <Form layout=\"vertical\" style={{ marginBottom: '1rem' }}>\r\n              <div style={{ display: 'flex', gap: 20 }}>\r\n                <Form.Item\r\n                  label={<Trans>Duration (seconds)</Trans>}\r\n                  required\r\n                  style={{ width: '100%' }}\r\n                  extra={\r\n                    newDuration.toNumber() > 0\r\n                      ? `= ${newDuration.toNumber() / 86400} days`\r\n                      : ''\r\n                  }\r\n                >\r\n                  <Input\r\n                    type=\"number\"\r\n                    min={0}\r\n                    value={newDuration.toNumber()}\r\n                    onChange={e => {\r\n                      setNewDuration(BigNumber.from(e.target.value || 0))\r\n                    }}\r\n                  />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                  label={<Trans>Start time (seconds, Unix time)</Trans>}\r\n                  style={{ width: '100%' }}\r\n                  extra={<Trans>Leave blank to start immediately.</Trans>}\r\n                >\r\n                  <Input\r\n                    type=\"number\"\r\n                    min={0}\r\n                    onChange={e => {\r\n                      setNewStart(e.target.value || '1')\r\n                    }}\r\n                  />\r\n                </Form.Item>\r\n              </div>\r\n            </Form>\r\n\r\n            <h3>\r\n              <Trans>Funding cycle preview</Trans>\r\n            </h3>\r\n            <p>\r\n              <Trans>\r\n                Your funding cycle configuration has been pre-populated using\r\n                the configuration you originally launched with. If you need to\r\n                customize it, contact us.\r\n              </Trans>\r\n            </p>\r\n\r\n            <ReconfigurePreview\r\n              payoutSplits={deprecatedPayoutSplits ?? []}\r\n              reserveSplits={deprecatedTokenSplits ?? []}\r\n              fundingCycleMetadata={deprecatedFundingCycleMetadata}\r\n              fundingCycleData={{\r\n                ...deprecatedFundingCycle,\r\n                duration: newDuration ?? deprecatedFundingCycle.duration,\r\n                ballot: newBallot ?? deprecatedFundingCycle.ballot,\r\n              }}\r\n              fundAccessConstraints={[deprecatedFundAccessConstraint]}\r\n            />\r\n          </>\r\n        )}\r\n      </TransactionModal>\r\n    </>\r\n  )\r\n}\r\n","import { NetworkContext } from 'contexts/networkContext'\r\nimport { V2UserContext } from 'contexts/v2/userContext'\r\nimport { useContext } from 'react'\r\nimport {\r\n  V2FundAccessConstraint,\r\n  V2FundingCycleData,\r\n  V2FundingCycleMetadata,\r\n} from 'models/v2/fundingCycle'\r\n\r\nimport { GroupedSplits, SplitGroup } from 'models/v2/splits'\r\n\r\nimport { TransactorInstance } from '../../Transactor'\r\n\r\nconst DEFAULT_MUST_START_AT_OR_AFTER = '1' // start immediately\r\nconst DEFAULT_MEMO = ''\r\n\r\nexport function useLaunchFundingCyclesTx(): TransactorInstance<{\r\n  projectId: number\r\n  fundingCycleData: V2FundingCycleData\r\n  fundingCycleMetadata: V2FundingCycleMetadata\r\n  fundAccessConstraints: V2FundAccessConstraint[]\r\n  groupedSplits?: GroupedSplits<SplitGroup>[]\r\n  mustStartAtOrAfter?: string // epoch seconds. anything less than \"now\" will start immediately.\r\n}> {\r\n  const { transactor, contracts } = useContext(V2UserContext)\r\n  const { userAddress } = useContext(NetworkContext)\r\n\r\n  return (\r\n    {\r\n      projectId,\r\n      fundingCycleData,\r\n      fundingCycleMetadata,\r\n      fundAccessConstraints,\r\n      groupedSplits = [],\r\n      mustStartAtOrAfter = DEFAULT_MUST_START_AT_OR_AFTER,\r\n    },\r\n    txOpts,\r\n  ) => {\r\n    if (\r\n      !transactor ||\r\n      !userAddress ||\r\n      !contracts?.JBController ||\r\n      !contracts?.JBETHPaymentTerminal\r\n    ) {\r\n      return Promise.resolve(false)\r\n    }\r\n\r\n    const args = [\r\n      projectId, // _projectId\r\n      fundingCycleData, // _data (JBFundingCycleData)\r\n      fundingCycleMetadata, // _metadata (JBFundingCycleMetadata)\r\n      mustStartAtOrAfter, // _mustStartAtOrAfter\r\n      groupedSplits, // _groupedSplits,\r\n      fundAccessConstraints, // _fundAccessConstraints,\r\n      [contracts.JBETHPaymentTerminal.address], //  _terminals (contract address of the JBETHPaymentTerminal)\r\n      DEFAULT_MEMO,\r\n    ]\r\n\r\n    return transactor(\r\n      contracts.JBController,\r\n      'launchFundingCyclesFor',\r\n      args,\r\n      txOpts,\r\n    )\r\n  }\r\n}\r\n","import * as constants from '@ethersproject/constants'\r\nimport { useContext } from 'react'\r\nimport { V2UserContext } from 'contexts/v2/userContext'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { NetworkContext } from 'contexts/networkContext'\r\n\r\nimport { TransactorInstance } from '../../Transactor'\r\n\r\nexport type DeployProjectPayerTxArgs = {\r\n  customBeneficiaryAddress: string | undefined\r\n  customMemo: string | undefined\r\n  tokenMintingEnabled: boolean\r\n  preferClaimed: boolean\r\n}\r\n\r\nexport function useDeployProjectPayerTx(): TransactorInstance<DeployProjectPayerTxArgs> {\r\n  const { transactor, contracts } = useContext(V2UserContext)\r\n  const { userAddress } = useContext(NetworkContext)\r\n  const { projectId } = useContext(V2ProjectContext)\r\n\r\n  const DEFAULT_MEMO = ''\r\n  const DEFAULT_METADATA = [0x1]\r\n\r\n  return (\r\n    {\r\n      customBeneficiaryAddress,\r\n      customMemo,\r\n      tokenMintingEnabled,\r\n      preferClaimed,\r\n    },\r\n    txOpts,\r\n  ) => {\r\n    if (!transactor || !projectId || !contracts?.JBETHPaymentTerminal) {\r\n      txOpts?.onDone?.()\r\n      return Promise.resolve(false)\r\n    }\r\n\r\n    return transactor(\r\n      contracts?.JBETHERC20ProjectPayerDeployer,\r\n      'deployProjectPayer',\r\n      [\r\n        projectId,\r\n        customBeneficiaryAddress ?? constants.AddressZero, // defaultBeneficiary is none because we want tokens to go to msg.sender\r\n        preferClaimed, // _defaultPreferClaimedTokens,\r\n        customMemo ?? DEFAULT_MEMO, // _defaultMemo,\r\n        DEFAULT_METADATA, //_defaultMetadata,\r\n        !tokenMintingEnabled, // defaultPreferAddToBalance,\r\n        contracts.JBDirectory.address, // _directory,\r\n        userAddress, //, _owner\r\n      ],\r\n      {\r\n        ...txOpts,\r\n      },\r\n    )\r\n  }\r\n}\r\n","import { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { V2UserContext } from 'contexts/v2/userContext'\r\nimport { useContext } from 'react'\r\n\r\nimport { TransactorInstance } from '../../Transactor'\r\n\r\nexport function useIssueTokensTx(): TransactorInstance<{\r\n  name: string\r\n  symbol: string\r\n}> {\r\n  const { transactor, contracts } = useContext(V2UserContext)\r\n  const { projectId } = useContext(V2ProjectContext)\r\n\r\n  return ({ name, symbol }, txOpts) => {\r\n    if (!transactor || !projectId || !contracts?.JBTokenStore) {\r\n      txOpts?.onDone?.()\r\n      return Promise.resolve(false)\r\n    }\r\n\r\n    return transactor(\r\n      contracts.JBController,\r\n      'issueTokenFor',\r\n      [projectId, name, symbol],\r\n      txOpts,\r\n    )\r\n  }\r\n}\r\n","import { CheckCircleFilled } from '@ant-design/icons'\r\nimport { Trans } from '@lingui/macro'\r\nimport { Button, Divider, Drawer } from 'antd'\r\nimport Form, { useForm } from 'antd/lib/form/Form'\r\nimport { FormItems } from 'components/formItems'\r\n\r\nimport { ThemeContext } from 'contexts/themeContext'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport useProjectENSName from 'hooks/v2/contractReader/ProjectENSName'\r\nimport { useProjectHandleENSTextRecord } from 'hooks/v2/contractReader/ProjectHandleENSTextRecord'\r\nimport { useEditV2ProjectHandleTx } from 'hooks/v2/transactor/EditV2ProjectHandleTx'\r\nimport { useSetENSTextRecordForHandleTx } from 'hooks/v2/transactor/SetENSTextRecordForHandleTx'\r\nimport { useCallback, useContext, useEffect, useState } from 'react'\r\n\r\nimport { v2ProjectRoute } from 'utils/routes'\r\n\r\nimport { drawerStyle } from 'constants/styles/drawerStyle'\r\n\r\nexport function V2ReconfigureProjectHandleDrawer({\r\n  visible,\r\n  onFinish,\r\n}: {\r\n  visible: boolean | undefined\r\n  onFinish?: () => void\r\n}) {\r\n  const { handle, projectId } = useContext(V2ProjectContext)\r\n  const [ensNameForm] = useForm<{ ensName: string }>()\r\n\r\n  const [ensNameInputDisabled, setEnsNameInputDisabled] = useState<boolean>()\r\n  const [loadingSetENSName, setLoadingSetENSName] = useState<boolean>()\r\n  const [loadingSetTextRecord, setLoadingSetTextRecord] = useState<boolean>()\r\n\r\n  const textRecordValue = useProjectHandleENSTextRecord(\r\n    handle ? handle + '.eth' : undefined,\r\n  )\r\n\r\n  const { data: projectEnsName } = useProjectENSName({ projectId })\r\n\r\n  const { colors } = useContext(ThemeContext).theme\r\n\r\n  const editV2ProjectHandleTx = useEditV2ProjectHandleTx()\r\n  const setENSTextRecordForHandleTx = useSetENSTextRecordForHandleTx()\r\n\r\n  useEffect(() => {\r\n    if (projectEnsName?.length) setEnsNameInputDisabled(true)\r\n  }, [projectEnsName])\r\n\r\n  function onSetENSNameFormSaved() {\r\n    setLoadingSetENSName(true)\r\n\r\n    const ensName = ensNameForm.getFieldValue('ensName')\r\n\r\n    editV2ProjectHandleTx(\r\n      { ensName },\r\n      {\r\n        onDone: () => setLoadingSetENSName(false),\r\n      },\r\n    )\r\n  }\r\n\r\n  function setTextRecord() {\r\n    setLoadingSetTextRecord(true)\r\n\r\n    setENSTextRecordForHandleTx(\r\n      { ensName: projectEnsName ?? '' },\r\n      {\r\n        onDone: () => setLoadingSetTextRecord(false),\r\n      },\r\n    )\r\n  }\r\n\r\n  // initially fill form with current handle if set\r\n  const resetHandleForm = useCallback(() => {\r\n    ensNameForm.setFieldsValue({\r\n      ensName: projectEnsName ?? '',\r\n    })\r\n  }, [ensNameForm, projectEnsName])\r\n\r\n  useEffect(() => {\r\n    resetHandleForm()\r\n  }, [resetHandleForm])\r\n\r\n  return (\r\n    <Drawer visible={visible} {...drawerStyle} onClose={onFinish}>\r\n      <h3>\r\n        {handle ? (\r\n          <Trans>Change project handle</Trans>\r\n        ) : (\r\n          <Trans>Set project handle</Trans>\r\n        )}\r\n      </h3>\r\n\r\n      {handle && (\r\n        <div style={{ fontWeight: 'bold', fontSize: '1.4rem' }}>@{handle}</div>\r\n      )}\r\n\r\n      <p>\r\n        <Trans>\r\n          Projects with a handle:\r\n          <br />\r\n          <br />\r\n          1. Are included in search results on the projects page\r\n          <br />\r\n          2. Can be accessed via the URL:{' '}\r\n          <b>juicebox.money/#{v2ProjectRoute({ handle: 'handle' })}</b>\r\n          <br />\r\n          <br />\r\n          (The original URL{' '}\r\n          <b>juicebox.money/#{v2ProjectRoute({ projectId })}</b> will continue\r\n          to work.)\r\n        </Trans>\r\n      </p>\r\n\r\n      <Divider />\r\n\r\n      <p style={{ color: colors.text.primary }}>\r\n        <Trans>\r\n          Juicebox projects use{' '}\r\n          <a\r\n            href=\"https://ens.domains/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            ENS names\r\n          </a>{' '}\r\n          as handles. Setting a handle involves 2 transactions:\r\n        </Trans>\r\n      </p>\r\n\r\n      <br />\r\n\r\n      <h4>\r\n        <Trans>1. Set ENS name</Trans>\r\n      </h4>\r\n\r\n      <p style={{ color: colors.text.primary }}>\r\n        <Trans>\r\n          Choose an ENS name to use as the project's handle. Subdomains are\r\n          allowed and will be included in the handle. Handles won't include the\r\n          \".eth\" extension.\r\n          <br />\r\n          <br />\r\n          juicebox.eth = @juicebox\r\n          <br />\r\n          dao.juicebox.eth = @dao.juicebox\r\n        </Trans>\r\n      </p>\r\n\r\n      {ensNameInputDisabled ? (\r\n        <div>\r\n          <strong>ENS Name:</strong> {projectEnsName}.eth\r\n          <br />\r\n          <br />\r\n          <Button onClick={() => setEnsNameInputDisabled(false)} type=\"primary\">\r\n            <Trans>Change ENS name</Trans>\r\n          </Button>\r\n        </div>\r\n      ) : (\r\n        <Form form={ensNameForm} onFinish={onSetENSNameFormSaved}>\r\n          <FormItems.ENSName name=\"ensName\" hideLabel />\r\n          <Button htmlType=\"submit\" loading={loadingSetENSName} type=\"primary\">\r\n            <Trans>Set ENS name</Trans>\r\n          </Button>\r\n        </Form>\r\n      )}\r\n\r\n      <Divider />\r\n\r\n      <h4>\r\n        <Trans>2. Set text record</Trans>\r\n      </h4>\r\n\r\n      <p style={{ color: colors.text.primary }}>\r\n        <Trans>\r\n          Set a text record for{' '}\r\n          {handle ? <strong>{handle}.eth</strong> : 'that ENS name'} with the\r\n          key <strong>\"juicebox\"</strong> and the value{' '}\r\n          <strong>\"{projectId}\"</strong> (this project's ID). You can do this on\r\n          the{' '}\r\n          <a\r\n            href={\r\n              projectEnsName\r\n                ? `https://app.ens.domains/name/${projectEnsName}/details`\r\n                : 'https://app.ens.domains'\r\n            }\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            ENS app\r\n          </a>\r\n          , or use the button below (as long as your connected wallet owns or\r\n          controls that ENS name).\r\n        </Trans>\r\n      </p>\r\n\r\n      {projectId && textRecordValue.data === projectId ? (\r\n        <Button type=\"primary\" disabled>\r\n          <CheckCircleFilled /> <Trans>Text record is set</Trans>\r\n        </Button>\r\n      ) : (\r\n        <Button\r\n          loading={loadingSetTextRecord}\r\n          type=\"primary\"\r\n          disabled={!projectEnsName}\r\n          onClick={setTextRecord}\r\n        >\r\n          <Trans>\r\n            Set text record for {projectEnsName + '.eth' ?? 'ENS name'}\r\n          </Trans>\r\n        </Button>\r\n      )}\r\n\r\n      {!projectEnsName && (\r\n        <p style={{ color: colors.text.secondary }}>\r\n          Choose an ENS name before setting the text record\r\n        </p>\r\n      )}\r\n    </Drawer>\r\n  )\r\n}\r\n","import { namehash } from 'ethers/lib/utils'\r\nimport { V2ContractName } from 'models/v2/contracts'\r\nimport { useCallback, useMemo } from 'react'\r\n\r\nimport { projectHandleENSTextRecordKey } from 'constants/projectHandleENSTextRecordKey'\r\n\r\nimport useV2ContractReader from './V2ContractReader'\r\n\r\nexport function useProjectHandleENSTextRecord(ensName: string | undefined) {\r\n  const node = ensName\r\n    ? namehash(ensName + (ensName.endsWith('.eth') ? '' : '.eth'))\r\n    : undefined\r\n\r\n  return useV2ContractReader<number>({\r\n    contract: V2ContractName.PublicResolver,\r\n    functionName: 'text',\r\n    args: node ? [node, projectHandleENSTextRecordKey] : null,\r\n    formatter: useCallback((val: string) => {\r\n      try {\r\n        return parseInt(val)\r\n      } catch (e) {\r\n        console.info('Error parsing project ID from text record', e)\r\n      }\r\n\r\n      // return 0 if text record is unset or not an integer\r\n      return 0\r\n    }, []),\r\n    updateOn: useMemo(\r\n      () => [\r\n        {\r\n          contract: V2ContractName.PublicResolver,\r\n          eventName: 'TextChanged',\r\n          topics: [[], projectHandleENSTextRecordKey],\r\n        },\r\n      ],\r\n      [],\r\n    ),\r\n  })\r\n}\r\n","import { V2ContractName } from 'models/v2/contracts'\r\n\r\nimport { useCallback, useMemo } from 'react'\r\n\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\n\r\nimport useV2ContractReader from './V2ContractReader'\r\n\r\nexport default function useProjectENSName({\r\n  projectId,\r\n}: {\r\n  projectId?: number\r\n}) {\r\n  return useV2ContractReader<string>({\r\n    contract: V2ContractName.JBProjectHandles,\r\n    functionName: 'ensNamePartsOf',\r\n    args: projectId ? [projectId] : null,\r\n    formatter: useCallback(\r\n      (val: string[]) => (val ? val.join('.') : undefined),\r\n      [],\r\n    ),\r\n    updateOn: useMemo(\r\n      () =>\r\n        projectId\r\n          ? [\r\n              {\r\n                contract: V2ContractName.JBProjectHandles,\r\n                eventName: 'SetEnsNameParts',\r\n                topics: [BigNumber.from(projectId).toHexString()],\r\n              },\r\n            ]\r\n          : undefined,\r\n      [projectId],\r\n    ),\r\n  })\r\n}\r\n","import { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { V2UserContext } from 'contexts/v2/userContext'\r\nimport { useContext } from 'react'\r\n\r\nimport { TransactorInstance } from '../../Transactor'\r\n\r\nexport function useEditV2ProjectHandleTx(): TransactorInstance<{\r\n  ensName: string\r\n}> {\r\n  const { transactor, contracts } = useContext(V2UserContext)\r\n  const { projectId } = useContext(V2ProjectContext)\r\n\r\n  return ({ ensName }, txOpts) => {\r\n    if (!transactor || !projectId || !contracts?.JBProjects) {\r\n      txOpts?.onDone?.()\r\n      return Promise.resolve(false)\r\n    }\r\n\r\n    const ensNameParts = ensName.split('.').reverse()\r\n\r\n    return transactor(\r\n      contracts.JBProjectHandles,\r\n      'setEnsNamePartsFor',\r\n      [projectId, ensNameParts],\r\n      txOpts,\r\n    )\r\n  }\r\n}\r\n","import { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { V2UserContext } from 'contexts/v2/userContext'\r\nimport { namehash } from 'ethers/lib/utils'\r\nimport { useContext } from 'react'\r\n\r\nimport { projectHandleENSTextRecordKey } from 'constants/projectHandleENSTextRecordKey'\r\n\r\nimport { TransactorInstance } from '../../Transactor'\r\n\r\nexport function useSetENSTextRecordForHandleTx(): TransactorInstance<{\r\n  ensName: string\r\n}> {\r\n  const { transactor, contracts } = useContext(V2UserContext)\r\n  const { projectId } = useContext(V2ProjectContext)\r\n\r\n  return ({ ensName }, txOpts) => {\r\n    if (!transactor || !projectId || !contracts?.JBProjects) {\r\n      txOpts?.onDone?.()\r\n      return Promise.resolve(false)\r\n    }\r\n\r\n    const node = namehash(ensName + (ensName.endsWith('.eth') ? '' : '.eth'))\r\n\r\n    return transactor(\r\n      contracts.PublicResolver,\r\n      'setText',\r\n      [node, projectHandleENSTextRecordKey, projectId.toString()],\r\n      txOpts,\r\n    )\r\n  }\r\n}\r\n","import { t, Trans } from '@lingui/macro'\r\nimport { Modal } from 'antd'\r\nimport { useDeployProjectPayerTx } from 'hooks/v2/transactor/DeployProjectPayerTx'\r\nimport { useIssueTokensTx } from 'hooks/v2/transactor/IssueTokensTx'\r\nimport { CheckCircleFilled } from '@ant-design/icons'\r\nimport { CSSProperties, useContext, useState } from 'react'\r\nimport RichButton from 'components/RichButton'\r\n\r\nimport { ThemeContext } from 'contexts/themeContext'\r\nimport IssueTokenModal from 'components/modals/IssueTokenModal'\r\n\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\n\r\nimport LaunchProjectPayerModal from './LaunchProjectPayer/LaunchProjectPayerModal'\r\nimport { V2ReconfigureProjectHandleDrawer } from './V2ReconfigureProjectHandleDrawer'\r\n\r\nexport default function NewDeployModal({\r\n  visible,\r\n  onClose,\r\n}: {\r\n  visible: boolean\r\n  onClose: VoidFunction\r\n}) {\r\n  const { handle } = useContext(V2ProjectContext)\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n\r\n  const [issueTokenModalVisible, setIssueTokenModalVisible] =\r\n    useState<boolean>(false)\r\n  const [launchProjectPayerModalVisible, setLaunchProjectPayerModalVisible] =\r\n    useState<boolean>(false)\r\n  const [handleModalVisible, setHandleModalVisible] = useState<boolean>(false)\r\n\r\n  const [hasIssuedToken, setHasIssuedToken] = useState<boolean>()\r\n  const [hasLaunchedPayableAddress, setHasLaunchedPayableAddress] =\r\n    useState<boolean>()\r\n\r\n  const completedAllSteps = hasIssuedToken && hasLaunchedPayableAddress\r\n\r\n  const seenColor = colors.text.tertiary\r\n\r\n  const stepButtonStyle: CSSProperties = {\r\n    marginBottom: 15,\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      visible={visible}\r\n      onOk={onClose}\r\n      onCancel={onClose}\r\n      okButtonProps={{ hidden: !completedAllSteps }}\r\n      cancelButtonProps={{ hidden: completedAllSteps }}\r\n      okText={t`Done`}\r\n      cancelText={t`Close, I'll do these later`}\r\n    >\r\n      <h2>\r\n        <Trans>Project launch successful</Trans>\r\n      </h2>\r\n      <p>\r\n        <Trans>\r\n          Congratulations on launching your project! The next steps are optional\r\n          and can be completed at any time.\r\n        </Trans>\r\n      </p>\r\n      <div>\r\n        <RichButton\r\n          prefix=\"1\"\r\n          heading={<Trans>Set a project handle (optional)</Trans>}\r\n          description={\r\n            <Trans>\r\n              Set a unique name that will be visible in your project's URL, and\r\n              that will allow your project to appear in search results.\r\n            </Trans>\r\n          }\r\n          onClick={() => setHandleModalVisible(true)}\r\n          disabled={!!handle}\r\n          icon={\r\n            handle ? (\r\n              <CheckCircleFilled style={{ color: seenColor }} />\r\n            ) : undefined\r\n          }\r\n          primaryColor={handle ? seenColor : undefined}\r\n          style={stepButtonStyle}\r\n        />\r\n        <RichButton\r\n          prefix=\"2\"\r\n          heading={<Trans>Issue an ERC-20 token (optional)</Trans>}\r\n          description={\r\n            <Trans>\r\n              Create your own ERC-20 token to represent stake in your project.\r\n              Contributors will receive these tokens when they pay your project.\r\n            </Trans>\r\n          }\r\n          onClick={() => setIssueTokenModalVisible(true)}\r\n          disabled={hasIssuedToken}\r\n          icon={\r\n            hasIssuedToken ? (\r\n              <CheckCircleFilled style={{ color: seenColor }} />\r\n            ) : undefined\r\n          }\r\n          primaryColor={hasIssuedToken ? seenColor : undefined}\r\n          style={stepButtonStyle}\r\n        />\r\n        <RichButton\r\n          prefix=\"3\"\r\n          heading={<Trans>Create a payable address (optional)</Trans>}\r\n          description={\r\n            <Trans>\r\n              Create an Ethereum address for your project. Enables direct\r\n              payments without going through your project's Juicebox page.\r\n            </Trans>\r\n          }\r\n          onClick={() => setLaunchProjectPayerModalVisible(true)}\r\n          disabled={hasLaunchedPayableAddress}\r\n          icon={\r\n            hasLaunchedPayableAddress ? (\r\n              <CheckCircleFilled style={{ color: seenColor }} />\r\n            ) : undefined\r\n          }\r\n          primaryColor={hasLaunchedPayableAddress ? seenColor : undefined}\r\n          style={stepButtonStyle}\r\n        />\r\n      </div>\r\n      <V2ReconfigureProjectHandleDrawer\r\n        visible={handleModalVisible}\r\n        onFinish={() => setHandleModalVisible(false)}\r\n      />\r\n      <IssueTokenModal\r\n        visible={issueTokenModalVisible}\r\n        useIssueTokensTx={useIssueTokensTx}\r\n        onClose={() => setIssueTokenModalVisible(false)}\r\n        onConfirmed={() => setHasIssuedToken(true)}\r\n      />\r\n      <LaunchProjectPayerModal\r\n        visible={launchProjectPayerModalVisible}\r\n        onClose={() => setLaunchProjectPayerModalVisible(false)}\r\n        useDeployProjectPayerTx={useDeployProjectPayerTx}\r\n        onConfirmed={() => setHasLaunchedPayableAddress(true)}\r\n      />\r\n    </Modal>\r\n  )\r\n}\r\n","import { t, Trans } from '@lingui/macro'\r\nimport { Modal } from 'antd'\r\nimport InputAccessoryButton from 'components/InputAccessoryButton'\r\nimport FormattedNumberInput from 'components/inputs/FormattedNumberInput'\r\nimport { emitErrorNotification } from 'utils/notifications'\r\n\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { useCallback, useContext, useEffect, useState } from 'react'\r\nimport { fromWad } from 'utils/formatNumber'\r\nimport { querySubgraphExhaustive } from 'utils/graph'\r\n\r\nimport { readProvider } from 'constants/readProvider'\r\n\r\nexport default function V2DownloadPaymentsModal({\r\n  visible,\r\n  onCancel,\r\n}: {\r\n  visible: boolean | undefined\r\n  onCancel: VoidFunction | undefined\r\n}) {\r\n  const [latestBlockNumber, setLatestBlockNumber] = useState<number>()\r\n  const [blockNumber, setBlockNumber] = useState<number>()\r\n  const [loading, setLoading] = useState<boolean>()\r\n  const { projectId } = useContext(V2ProjectContext)\r\n\r\n  useEffect(() => {\r\n    readProvider.getBlockNumber().then(val => {\r\n      setLatestBlockNumber(val)\r\n      setBlockNumber(val)\r\n    })\r\n  }, [])\r\n\r\n  const download = useCallback(async () => {\r\n    if (blockNumber === undefined || !projectId) return\r\n\r\n    setLoading(true)\r\n\r\n    const rows = [\r\n      [t`Amount paid`, t`Date`, t`Payer`, t`Beneficiary`, t`Note`], // CSV header row\r\n    ]\r\n\r\n    try {\r\n      const payments = await querySubgraphExhaustive({\r\n        entity: 'payEvent',\r\n        keys: ['caller', 'beneficiary', 'amount', 'timestamp', 'note'],\r\n        orderBy: 'timestamp',\r\n        orderDirection: 'desc',\r\n        block: {\r\n          number: blockNumber,\r\n        },\r\n        where: [\r\n          {\r\n            key: 'projectId',\r\n            value: projectId,\r\n          },\r\n          {\r\n            key: 'cv',\r\n            value: '2',\r\n          },\r\n        ],\r\n      })\r\n\r\n      if (!payments) {\r\n        emitErrorNotification(t`Error loading payments`)\r\n        throw new Error('No data.')\r\n      }\r\n\r\n      payments.forEach(p => {\r\n        let date = new Date((p.timestamp ?? 0) * 1000).toUTCString()\r\n\r\n        if (date.includes(',')) date = date.split(',')[1]\r\n\r\n        rows.push([fromWad(p.amount), date, p.caller, p.beneficiary, p.note])\r\n      })\r\n\r\n      const csvContent =\r\n        'data:text/csv;charset=utf-8,' + rows.map(e => e.join(',')).join('\\n')\r\n      const encodedUri = encodeURI(csvContent)\r\n      const link = document.createElement('a')\r\n      link.setAttribute('href', encodedUri)\r\n      link.setAttribute(\r\n        'download',\r\n        `project-${projectId}_payments-block${blockNumber}.csv`,\r\n      )\r\n      document.body.appendChild(link)\r\n\r\n      link.click()\r\n\r\n      setLoading(false)\r\n    } catch (e) {\r\n      console.error('Error downloading payments', e)\r\n      setLoading(false)\r\n    }\r\n  }, [projectId, setLoading, blockNumber])\r\n\r\n  return (\r\n    <Modal\r\n      visible={visible}\r\n      onCancel={onCancel}\r\n      onOk={download}\r\n      okText={t`Download CSV`}\r\n      okButtonProps={{ type: 'primary' }}\r\n      cancelText={t`Close`}\r\n      confirmLoading={loading}\r\n      centered\r\n    >\r\n      <div>\r\n        <h4>\r\n          <Trans>Download CSV of payments</Trans>\r\n        </h4>\r\n\r\n        <label style={{ display: 'block', marginTop: 20, marginBottom: 5 }}>\r\n          <Trans>Block number</Trans>\r\n        </label>\r\n        <FormattedNumberInput\r\n          value={blockNumber?.toString()}\r\n          onChange={val => setBlockNumber(val ? parseInt(val) : undefined)}\r\n          accessory={\r\n            <InputAccessoryButton\r\n              content={t`Latest`}\r\n              onClick={() => setBlockNumber(latestBlockNumber)}\r\n              disabled={blockNumber === latestBlockNumber}\r\n            />\r\n          }\r\n        />\r\n      </div>\r\n    </Modal>\r\n  )\r\n}\r\n","import { t, Trans } from '@lingui/macro'\r\nimport { Button, Modal } from 'antd'\r\nimport { useState } from 'react'\r\n\r\nimport V2DownloadPaymentsModal from './V2DownloadPaymentsModal'\r\n\r\nexport default function V2DownloadActivityModal({\r\n  visible,\r\n  onCancel,\r\n}: {\r\n  visible: boolean | undefined\r\n  onCancel: VoidFunction | undefined\r\n}) {\r\n  const [paymentsModalVisible, setPaymentsModalVisible] = useState<boolean>()\r\n\r\n  return (\r\n    <Modal\r\n      visible={visible}\r\n      onCancel={onCancel}\r\n      cancelText={t`Close`}\r\n      okButtonProps={{ hidden: true }}\r\n      centered\r\n    >\r\n      <div>\r\n        <h4>\r\n          <Trans>Download CSV of project activity</Trans>\r\n        </h4>\r\n\r\n        <div style={{ marginTop: 20 }}>\r\n          <Button block onClick={() => setPaymentsModalVisible(true)}>\r\n            Payments\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <V2DownloadPaymentsModal\r\n        visible={paymentsModalVisible}\r\n        onCancel={() => setPaymentsModalVisible(false)}\r\n      />\r\n    </Modal>\r\n  )\r\n}\r\n","import CurrencySymbol from 'components/CurrencySymbol'\r\nimport FormattedAddress from 'components/FormattedAddress'\r\nimport EtherscanLink from 'components/EtherscanLink'\r\n\r\nimport { ThemeContext } from 'contexts/themeContext'\r\nimport useSubgraphQuery from 'hooks/SubgraphQuery'\r\nimport { useContext } from 'react'\r\nimport { formatHistoricalDate } from 'utils/formatDate'\r\nimport { formatWad } from 'utils/formatNumber'\r\n\r\nimport { Trans } from '@lingui/macro'\r\nimport { smallHeaderStyle } from 'components/activityEventElems/styles'\r\nimport { DistributePayoutsEvent } from 'models/subgraph-entities/v2/distribute-payouts-event'\r\n\r\nexport default function DistributePayoutsElem({\r\n  event,\r\n}: {\r\n  event:\r\n    | Pick<\r\n        DistributePayoutsEvent,\r\n        | 'id'\r\n        | 'timestamp'\r\n        | 'txHash'\r\n        | 'caller'\r\n        | 'beneficiary'\r\n        | 'beneficiaryDistributionAmount'\r\n        | 'distributedAmount'\r\n        | 'memo'\r\n      >\r\n    | undefined\r\n}) {\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n\r\n  const { data: distributePayoutsEvents } = useSubgraphQuery({\r\n    entity: 'distributeToPayoutSplitEvent',\r\n    keys: [\r\n      'id',\r\n      'timestamp',\r\n      'txHash',\r\n      'amount',\r\n      'beneficiary',\r\n      'splitProjectId',\r\n    ],\r\n    orderDirection: 'desc',\r\n    orderBy: 'amount',\r\n    where: event?.id\r\n      ? {\r\n          key: 'distributePayoutsEvent',\r\n          value: event.id,\r\n        }\r\n      : undefined,\r\n  })\r\n\r\n  if (!event) return null\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n        }}\r\n      >\r\n        <div style={smallHeaderStyle(colors)}>\r\n          <Trans>Distributed funds</Trans>\r\n        </div>\r\n\r\n        <div\r\n          style={{\r\n            textAlign: 'right',\r\n          }}\r\n        >\r\n          <div style={smallHeaderStyle(colors)}>\r\n            {event.timestamp && (\r\n              <span>{formatHistoricalDate(event.timestamp * 1000)}</span>\r\n            )}{' '}\r\n            <EtherscanLink value={event.txHash} type=\"tx\" />\r\n          </div>\r\n          <div style={smallHeaderStyle(colors)}>\r\n            <Trans>\r\n              called by <FormattedAddress address={event.caller} />\r\n            </Trans>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 5 }}>\r\n        {distributePayoutsEvents?.map(e => (\r\n          <div\r\n            key={e.id}\r\n            style={{\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              alignItems: 'baseline',\r\n              fontSize: '0.8rem',\r\n            }}\r\n          >\r\n            <div style={{ fontWeight: 500 }}>\r\n              {e.splitProjectId ? (\r\n                <span>Project {e.splitProjectId}</span>\r\n              ) : (\r\n                <FormattedAddress address={e.beneficiary} />\r\n              )}\r\n              :\r\n            </div>\r\n\r\n            <div style={{ color: colors.text.secondary }}>\r\n              <CurrencySymbol currency=\"ETH\" />\r\n              {formatWad(e.amount, { precision: 4 })}\r\n            </div>\r\n          </div>\r\n        ))}\r\n\r\n        {event.beneficiaryDistributionAmount?.gt(0) && (\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              alignItems: 'baseline',\r\n              fontSize: distributePayoutsEvents?.length ? '0.8rem' : undefined,\r\n            }}\r\n          >\r\n            <div style={{ fontWeight: 500 }}>\r\n              <FormattedAddress address={event.beneficiary} />:\r\n            </div>\r\n            <div\r\n              style={\r\n                distributePayoutsEvents?.length\r\n                  ? { color: colors.text.secondary }\r\n                  : { fontWeight: 500 }\r\n              }\r\n            >\r\n              <CurrencySymbol currency=\"ETH\" />\r\n              {formatWad(event.beneficiaryDistributionAmount, { precision: 4 })}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {distributePayoutsEvents?.length ? (\r\n        <div\r\n          style={{\r\n            color: colors.text.primary,\r\n            fontWeight: 500,\r\n            textAlign: 'right',\r\n          }}\r\n        >\r\n          <CurrencySymbol currency=\"ETH\" />\r\n          {formatWad(event.distributedAmount, { precision: 4 })}\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { smallHeaderStyle } from 'components/activityEventElems/styles'\r\nimport EtherscanLink from 'components/EtherscanLink'\r\nimport FormattedAddress from 'components/FormattedAddress'\r\nimport { ThemeContext } from 'contexts/themeContext'\r\nimport { V1ProjectContext } from 'contexts/v1/projectContext'\r\nimport useSubgraphQuery from 'hooks/SubgraphQuery'\r\nimport { DistributeReservedTokensEvent } from 'models/subgraph-entities/v2/distribute-reserved-tokens-event'\r\nimport { useContext } from 'react'\r\nimport { formatHistoricalDate } from 'utils/formatDate'\r\nimport { formatWad } from 'utils/formatNumber'\r\nimport { tokenSymbolText } from 'utils/tokenSymbolText'\r\n\r\nexport default function DistributeReservedTokensEventElem({\r\n  event,\r\n}: {\r\n  event:\r\n    | Pick<\r\n        DistributeReservedTokensEvent,\r\n        | 'id'\r\n        | 'timestamp'\r\n        | 'txHash'\r\n        | 'caller'\r\n        | 'beneficiary'\r\n        | 'beneficiaryTokenCount'\r\n        | 'tokenCount'\r\n      >\r\n    | undefined\r\n}) {\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n  const { tokenSymbol } = useContext(V1ProjectContext)\r\n\r\n  const { data: distributeEvents } = useSubgraphQuery(\r\n    {\r\n      entity: 'distributeToReservedTokenSplitEvent',\r\n      keys: [\r\n        'id',\r\n        'timestamp',\r\n        'txHash',\r\n        'beneficiary',\r\n        'tokenCount',\r\n        'projectId',\r\n      ],\r\n      orderDirection: 'desc',\r\n      orderBy: 'tokenCount',\r\n      where: event?.id\r\n        ? {\r\n            key: 'distributeReservedTokensEvent',\r\n            value: event.id,\r\n          }\r\n        : undefined,\r\n    },\r\n    {},\r\n  )\r\n\r\n  if (!event) return null\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n        }}\r\n      >\r\n        <div style={smallHeaderStyle(colors)}>\r\n          <Trans>\r\n            Distributed reserved{' '}\r\n            {tokenSymbolText({\r\n              tokenSymbol: tokenSymbol,\r\n              capitalize: false,\r\n              plural: true,\r\n            })}\r\n          </Trans>\r\n        </div>\r\n\r\n        <div style={{ textAlign: 'right' }}>\r\n          <div style={smallHeaderStyle(colors)}>\r\n            {event.timestamp && (\r\n              <span>{formatHistoricalDate(event.timestamp * 1000)}</span>\r\n            )}{' '}\r\n            <EtherscanLink value={event.txHash} type=\"tx\" />\r\n          </div>\r\n          <div style={smallHeaderStyle(colors)}>\r\n            <Trans>\r\n              called by <FormattedAddress address={event.caller} />\r\n            </Trans>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 5 }}>\r\n        {distributeEvents?.map(e => (\r\n          <div\r\n            key={e.id}\r\n            style={{\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              alignItems: 'baseline',\r\n            }}\r\n          >\r\n            <div style={{ fontWeight: 500, fontSize: '0.8rem' }}>\r\n              <FormattedAddress address={e.beneficiary} />:\r\n            </div>\r\n\r\n            <div\r\n              style={\r\n                distributeEvents.length > 1\r\n                  ? { color: colors.text.secondary, fontSize: '0.8rem' }\r\n                  : { fontWeight: 500 }\r\n              }\r\n            >\r\n              {formatWad(e.tokenCount, { precision: 0 })}\r\n            </div>\r\n          </div>\r\n        ))}\r\n\r\n        {event.beneficiaryTokenCount?.gt(0) && (\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              alignItems: 'baseline',\r\n            }}\r\n          >\r\n            <div style={{ fontWeight: 500 }}>\r\n              <FormattedAddress address={event.beneficiary} />:\r\n            </div>\r\n            <div style={{ color: colors.text.secondary }}>\r\n              {formatWad(event.beneficiaryTokenCount, {\r\n                precision: 0,\r\n              })}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {distributeEvents?.length && distributeEvents?.length > 1 ? (\r\n        <div\r\n          style={{\r\n            color: colors.text.primary,\r\n            fontWeight: 500,\r\n            textAlign: 'right',\r\n          }}\r\n        >\r\n          {formatWad(event.tokenCount, { precision: 0 })}\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n","import { DownloadOutlined } from '@ant-design/icons'\r\nimport { t, Trans } from '@lingui/macro'\r\nimport { Button, Select, Space } from 'antd'\r\nimport DeployedERC20EventElem from 'components/activityEventElems/DeployedERC20EventElem'\r\nimport PayEventElem from 'components/activityEventElems/PayEventElem'\r\nimport ProjectCreateEventElem from 'components/activityEventElems/ProjectCreateEventElem'\r\nimport RedeemEventElem from 'components/activityEventElems/RedeemEventElem'\r\nimport Loading from 'components/Loading'\r\nimport SectionHeader from 'components/SectionHeader'\r\nimport { ThemeContext } from 'contexts/themeContext'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { useInfiniteSubgraphQuery } from 'hooks/SubgraphQuery'\r\nimport { DistributePayoutsEvent } from 'models/subgraph-entities/v2/distribute-payouts-event'\r\nimport { DistributeReservedTokensEvent } from 'models/subgraph-entities/v2/distribute-reserved-tokens-event'\r\nimport { DeployedERC20Event } from 'models/subgraph-entities/vX/deployed-erc20-event'\r\nimport { PayEvent } from 'models/subgraph-entities/vX/pay-event'\r\nimport { ProjectCreateEvent } from 'models/subgraph-entities/vX/project-create-event'\r\nimport { ProjectEvent } from 'models/subgraph-entities/vX/project-event'\r\nimport { RedeemEvent } from 'models/subgraph-entities/vX/redeem-event'\r\nimport { useContext, useMemo, useState } from 'react'\r\nimport { WhereConfig } from 'utils/graph'\r\n\r\nimport V2DownloadActivityModal from '../V2DownloadActivityModal'\r\nimport DistributePayoutsElem from './eventElems/DistributePayoutsElem'\r\nimport DistributeReservedTokensEventElem from './eventElems/DistributeReservedTokensElem'\r\n\r\ntype EventFilter =\r\n  | 'all'\r\n  | 'pay'\r\n  | 'mintTokens'\r\n  | 'redeem'\r\n  | 'deployERC20'\r\n  | 'projectCreate'\r\n  | 'distributePayouts'\r\n  | 'distributeTokens'\r\n  | 'distributeReservedTokens'\r\n// TODO | 'useAllowanceEvent'\r\n\r\nexport default function ProjectActivity() {\r\n  const [downloadModalVisible, setDownloadModalVisible] = useState<boolean>()\r\n  const [eventFilter, setEventFilter] = useState<EventFilter>('all')\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n\r\n  const { projectId } = useContext(V2ProjectContext)\r\n\r\n  const pageSize = 50\r\n\r\n  const where: WhereConfig<'projectEvent'>[] = useMemo(() => {\r\n    const _where: WhereConfig<'projectEvent'>[] = [\r\n      {\r\n        key: 'cv',\r\n        value: '2',\r\n      },\r\n      {\r\n        key: 'mintTokensEvent',\r\n        value: null, // Exclude all mintTokensEvents. One of these events is created for every Pay event, and showing both event types may lead to confusion\r\n      },\r\n      {\r\n        key: 'useAllowanceEvent',\r\n        value: null, // Exclude all useAllowanceEvents, no UI support yet\r\n      },\r\n    ]\r\n\r\n    if (projectId) {\r\n      _where.push({\r\n        key: 'projectId',\r\n        value: projectId,\r\n      })\r\n    }\r\n\r\n    let key: keyof ProjectEvent | undefined = undefined\r\n\r\n    switch (eventFilter) {\r\n      case 'deployERC20':\r\n        key = 'deployedERC20Event'\r\n        break\r\n      case 'pay':\r\n        key = 'payEvent'\r\n        break\r\n      case 'projectCreate':\r\n        key = 'projectCreateEvent'\r\n        break\r\n      case 'redeem':\r\n        key = 'redeemEvent'\r\n        break\r\n      case 'distributePayouts':\r\n        key = 'distributePayoutsEvent'\r\n        break\r\n      case 'distributeTokens':\r\n        key = 'distributeReservedTokensEvent'\r\n        break\r\n    }\r\n\r\n    if (key) {\r\n      _where.push({\r\n        key,\r\n        operator: 'not',\r\n        value: null,\r\n      })\r\n    }\r\n\r\n    return _where\r\n  }, [projectId, eventFilter])\r\n\r\n  const {\r\n    data: projectEvents,\r\n    fetchNextPage,\r\n    hasNextPage,\r\n    isLoading,\r\n    isFetchingNextPage,\r\n  } = useInfiniteSubgraphQuery({\r\n    pageSize,\r\n    entity: 'projectEvent',\r\n    keys: [\r\n      'id',\r\n      {\r\n        entity: 'payEvent',\r\n        keys: ['amount', 'timestamp', 'beneficiary', 'note', 'id', 'txHash'],\r\n      },\r\n      {\r\n        entity: 'deployedERC20Event',\r\n        keys: ['symbol', 'txHash', 'timestamp', 'id'],\r\n      },\r\n      {\r\n        entity: 'tapEvent',\r\n        keys: [\r\n          'id',\r\n          'timestamp',\r\n          'txHash',\r\n          'caller',\r\n          'beneficiary',\r\n          'beneficiaryTransferAmount',\r\n          'netTransferAmount',\r\n        ],\r\n      },\r\n      {\r\n        entity: 'redeemEvent',\r\n        keys: [\r\n          'id',\r\n          'amount',\r\n          'beneficiary',\r\n          'txHash',\r\n          'timestamp',\r\n          'returnAmount',\r\n        ],\r\n      },\r\n      {\r\n        entity: 'projectCreateEvent',\r\n        keys: ['id', 'txHash', 'timestamp', 'caller'],\r\n      },\r\n      {\r\n        entity: 'distributePayoutsEvent',\r\n        keys: [\r\n          'id',\r\n          'timestamp',\r\n          'txHash',\r\n          'caller',\r\n          'beneficiary',\r\n          'beneficiaryDistributionAmount',\r\n          'distributedAmount',\r\n          'memo',\r\n        ],\r\n      },\r\n      {\r\n        entity: 'distributeReservedTokensEvent',\r\n        keys: [\r\n          'id',\r\n          'timestamp',\r\n          'txHash',\r\n          'caller',\r\n          'beneficiary',\r\n          'beneficiaryTokenCount',\r\n          'tokenCount',\r\n        ],\r\n      },\r\n    ],\r\n    orderDirection: 'desc',\r\n    orderBy: 'timestamp',\r\n    where,\r\n  })\r\n\r\n  const list = useMemo(\r\n    () =>\r\n      projectEvents?.pages.map(group =>\r\n        group.map((e: ProjectEvent) => {\r\n          let elem: JSX.Element | undefined = undefined\r\n\r\n          if (e.payEvent) {\r\n            elem = <PayEventElem event={e.payEvent as PayEvent} />\r\n          }\r\n          if (e.redeemEvent) {\r\n            elem = <RedeemEventElem event={e.redeemEvent as RedeemEvent} />\r\n          }\r\n          if (e.projectCreateEvent) {\r\n            elem = (\r\n              <ProjectCreateEventElem\r\n                event={e.projectCreateEvent as ProjectCreateEvent}\r\n              />\r\n            )\r\n          }\r\n          if (e.deployedERC20Event) {\r\n            elem = (\r\n              <DeployedERC20EventElem\r\n                event={e.deployedERC20Event as DeployedERC20Event}\r\n              />\r\n            )\r\n          }\r\n          if (e.distributePayoutsEvent) {\r\n            elem = (\r\n              <DistributePayoutsElem\r\n                event={e.distributePayoutsEvent as DistributePayoutsEvent}\r\n              />\r\n            )\r\n          }\r\n          if (e.distributeReservedTokensEvent) {\r\n            elem = (\r\n              <DistributeReservedTokensEventElem\r\n                event={\r\n                  e.distributeReservedTokensEvent as DistributeReservedTokensEvent\r\n                }\r\n              />\r\n            )\r\n          }\r\n          if (e.useAllowanceEvent) {\r\n            // TODO\r\n            // elem = (\r\n            //   <DeployedERC20EventElem\r\n            //     event={e.deployedERC20Event as DeployedERC20Event}\r\n            //   />\r\n            // )\r\n          }\r\n\r\n          if (!elem) return null\r\n\r\n          return (\r\n            <div\r\n              key={e.id}\r\n              style={{\r\n                marginBottom: 20,\r\n                paddingBottom: 20,\r\n                borderBottom: '1px solid ' + colors.stroke.tertiary,\r\n              }}\r\n            >\r\n              {elem}\r\n            </div>\r\n          )\r\n        }),\r\n      ),\r\n    [colors, projectEvents],\r\n  )\r\n\r\n  const listStatus = useMemo(() => {\r\n    const count =\r\n      projectEvents?.pages?.reduce((prev, cur) => prev + cur.length, 0) ?? 0\r\n\r\n    if (isLoading || isFetchingNextPage) {\r\n      return (\r\n        <div>\r\n          <Loading />\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (count === 0 && !isLoading) {\r\n      return (\r\n        <div\r\n          style={{\r\n            color: colors.text.secondary,\r\n            paddingTop: 20,\r\n            borderTop: '1px solid ' + colors.stroke.tertiary,\r\n          }}\r\n        >\r\n          <Trans>No activity yet</Trans>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (hasNextPage) {\r\n      return (\r\n        <div\r\n          style={{\r\n            textAlign: 'center',\r\n            color: colors.text.secondary,\r\n            cursor: 'pointer',\r\n          }}\r\n          onClick={() => fetchNextPage()}\r\n        >\r\n          <Trans>Load more</Trans>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div\r\n        style={{\r\n          textAlign: 'center',\r\n          padding: 10,\r\n          color: colors.text.secondary,\r\n        }}\r\n      >\r\n        <Trans>{count} total</Trans>\r\n      </div>\r\n    )\r\n  }, [\r\n    projectEvents,\r\n    isLoading,\r\n    isFetchingNextPage,\r\n    hasNextPage,\r\n    fetchNextPage,\r\n    colors,\r\n  ])\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          alignItems: 'baseline',\r\n          justifyContent: 'space-between',\r\n          marginBottom: 20,\r\n        }}\r\n      >\r\n        <SectionHeader text={t`Activity`} style={{ margin: 0 }} />\r\n\r\n        <Space direction=\"horizontal\" align=\"center\" size=\"small\">\r\n          <Button\r\n            type=\"text\"\r\n            icon={<DownloadOutlined />}\r\n            onClick={() => setDownloadModalVisible(true)}\r\n          />\r\n\r\n          <Select\r\n            className=\"small\"\r\n            style={{\r\n              width: 200,\r\n            }}\r\n            value={eventFilter}\r\n            onChange={val => setEventFilter(val)}\r\n          >\r\n            <Select.Option value=\"all\">\r\n              <Trans>All events</Trans>\r\n            </Select.Option>\r\n            <Select.Option value=\"pay\">\r\n              <Trans>Paid</Trans>\r\n            </Select.Option>\r\n            <Select.Option value=\"redeem\">\r\n              <Trans>Redeemed</Trans>\r\n            </Select.Option>\r\n            <Select.Option value=\"distributePayouts\">\r\n              <Trans>Distributed Funds</Trans>\r\n            </Select.Option>\r\n            <Select.Option value=\"distributeTokens\">\r\n              <Trans>Distributed Tokens</Trans>\r\n            </Select.Option>\r\n            {/* TODO */}\r\n            {/* <Select.Option value=\"useAllowance\">\r\n              <Trans>Used Allowance</Trans>\r\n            </Select.Option> */}\r\n            <Select.Option value=\"deployERC20\">\r\n              <Trans>ERC20 Deployed</Trans>\r\n            </Select.Option>\r\n            <Select.Option value=\"projectCreate\">\r\n              <Trans>Project Created</Trans>\r\n            </Select.Option>\r\n          </Select>\r\n        </Space>\r\n      </div>\r\n\r\n      {list}\r\n\r\n      {listStatus}\r\n\r\n      <V2DownloadActivityModal\r\n        visible={downloadModalVisible}\r\n        onCancel={() => setDownloadModalVisible(false)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport ETHAmount from 'components/currency/ETHAmount'\r\nimport USDAmount from 'components/currency/USDAmount'\r\nimport {\r\n  NO_CURRENCY,\r\n  V2_CURRENCY_ETH,\r\n  V2_CURRENCY_USD,\r\n} from 'utils/v2/currency'\r\n\r\nexport default function V2CurrencyAmount({\r\n  amount,\r\n  currency,\r\n  precision = 2,\r\n}: {\r\n  amount: BigNumber | undefined\r\n  currency: BigNumber | undefined\r\n  precision?: number\r\n}) {\r\n  if (amount === undefined) return null\r\n\r\n  if (currency?.eq(NO_CURRENCY) || currency?.eq(V2_CURRENCY_ETH)) {\r\n    return <ETHAmount amount={amount} precision={precision} padEnd />\r\n  }\r\n\r\n  if (currency?.eq(V2_CURRENCY_USD)) {\r\n    return <USDAmount amount={amount} precision={precision} padEnd />\r\n  }\r\n\r\n  return null\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport StatLine from 'components/Project/StatLine'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { NO_CURRENCY, V2_CURRENCY_USD } from 'utils/v2/currency'\r\nimport { CSSProperties, useContext } from 'react'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { ThemeContext } from 'contexts/themeContext'\r\nimport ETHAmount from 'components/currency/ETHAmount'\r\n\r\nimport V2CurrencyAmount from 'components/v2/shared/V2CurrencyAmount'\r\n\r\nimport { textPrimary, textSecondary } from 'constants/styles/text'\r\n\r\nexport default function ProjectBalance({ style }: { style?: CSSProperties }) {\r\n  const { theme } = useContext(ThemeContext)\r\n  const { colors } = theme\r\n  const {\r\n    ETHBalance,\r\n    balanceInDistributionLimitCurrency,\r\n    distributionLimitCurrency,\r\n    loading: { balanceInDistributionLimitCurrencyLoading },\r\n  } = useContext(V2ProjectContext)\r\n\r\n  return (\r\n    <StatLine\r\n      loading={balanceInDistributionLimitCurrencyLoading}\r\n      statLabel={<Trans>In treasury</Trans>}\r\n      statLabelTip={\r\n        <Trans>This project's balance in the Juicebox contract.</Trans>\r\n      }\r\n      statValue={\r\n        <div\r\n          style={{\r\n            ...textPrimary,\r\n            color: colors.text.brand.primary,\r\n            marginLeft: 10,\r\n          }}\r\n        >\r\n          {distributionLimitCurrency?.eq(V2_CURRENCY_USD) && (\r\n            <span style={textSecondary(theme)}>\r\n              <ETHAmount amount={ETHBalance} precision={4} padEnd={true} />{' '}\r\n            </span>\r\n          )}\r\n          <V2CurrencyAmount\r\n            amount={balanceInDistributionLimitCurrency ?? BigNumber.from(0)}\r\n            currency={distributionLimitCurrency ?? BigNumber.from(NO_CURRENCY)}\r\n          />\r\n        </div>\r\n      }\r\n      style={style}\r\n    />\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport StatLine from 'components/Project/StatLine'\r\nimport TooltipLabel from 'components/TooltipLabel'\r\n\r\nimport { ThemeContext } from 'contexts/themeContext'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { CSSProperties, useContext } from 'react'\r\n\r\nimport V2CurrencyAmount from 'components/v2/shared/V2CurrencyAmount'\r\n\r\nimport { MAX_DISTRIBUTION_LIMIT } from 'utils/v2/math'\r\n\r\nimport { textSecondary } from 'constants/styles/text'\r\n\r\nexport default function DistributedRatio({ style }: { style?: CSSProperties }) {\r\n  const { theme } = useContext(ThemeContext)\r\n  const { colors } = theme\r\n  const {\r\n    distributionLimit,\r\n    usedDistributionLimit,\r\n    distributionLimitCurrency,\r\n    loading: { distributionLimitLoading },\r\n  } = useContext(V2ProjectContext)\r\n\r\n  const secondaryTextStyle = textSecondary(theme)\r\n\r\n  return (\r\n    <StatLine\r\n      style={style}\r\n      loading={distributionLimitLoading}\r\n      statLabel={<Trans>Distributed</Trans>}\r\n      statLabelTip={\r\n        <Trans>\r\n          The amount that has been distributed from the Juicebox balance in this\r\n          funding cycle, out of the current distribution limit. No more than the\r\n          distribution limit can be distributed in a single funding cycle—any\r\n          remaining ETH in Juicebox is overflow, until the next cycle begins.\r\n        </Trans>\r\n      }\r\n      statValue={\r\n        distributionLimit?.gt(0) ? (\r\n          <div\r\n            style={{\r\n              ...secondaryTextStyle,\r\n              color: colors.text.primary,\r\n            }}\r\n          >\r\n            <V2CurrencyAmount\r\n              amount={usedDistributionLimit}\r\n              currency={distributionLimitCurrency}\r\n            />{' '}\r\n            <>\r\n              /{' '}\r\n              {distributionLimit.eq(MAX_DISTRIBUTION_LIMIT) ? (\r\n                <Trans>NO LIMIT</Trans>\r\n              ) : (\r\n                <V2CurrencyAmount\r\n                  amount={distributionLimit}\r\n                  currency={distributionLimitCurrency}\r\n                />\r\n              )}\r\n            </>\r\n          </div>\r\n        ) : (\r\n          <div\r\n            style={{\r\n              ...secondaryTextStyle,\r\n              textAlign: 'right',\r\n            }}\r\n          >\r\n            <TooltipLabel\r\n              tip={\r\n                <Trans>\r\n                  The distribution limit for this funding cycle is 0, meaning\r\n                  all funds in Juicebox are currently considered overflow.\r\n                  Overflow can be redeemed by token holders, but not\r\n                  distributed.\r\n                </Trans>\r\n              }\r\n              label={<Trans>100% overflow</Trans>}\r\n            />\r\n          </div>\r\n        )\r\n      }\r\n    />\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport StatLine from 'components/Project/StatLine'\r\n\r\nimport { CSSProperties, useContext } from 'react'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport ETHAmount from 'components/currency/ETHAmount'\r\n\r\nimport EtherscanLink from 'components/EtherscanLink'\r\n\r\nimport { useEthBalanceQuery } from 'hooks/EthBalance'\r\n\r\nimport { textPrimary } from 'constants/styles/text'\r\n\r\nexport default function OwnerBalance({ style }: { style?: CSSProperties }) {\r\n  const { projectOwnerAddress } = useContext(V2ProjectContext)\r\n  const { data: projectOwnerWalletBalance, isLoading } =\r\n    useEthBalanceQuery(projectOwnerAddress)\r\n\r\n  return (\r\n    <StatLine\r\n      loading={isLoading}\r\n      statLabel={<Trans>In wallet</Trans>}\r\n      statLabelTip={\r\n        <>\r\n          <p>\r\n            <Trans>The balance of the project owner's wallet.</Trans>\r\n          </p>{' '}\r\n          <EtherscanLink value={projectOwnerAddress} type=\"address\" />\r\n        </>\r\n      }\r\n      statValue={\r\n        <span style={textPrimary}>\r\n          <ETHAmount amount={projectOwnerWalletBalance} precision={2} padEnd />\r\n        </span>\r\n      }\r\n      style={style}\r\n    />\r\n  )\r\n}\r\n","import { Skeleton, Space } from 'antd'\r\nimport FundingProgressBar from 'components/Project/FundingProgressBar'\r\nimport { useContext } from 'react'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport useTerminalCurrentOverflow from 'hooks/v2/contractReader/TerminalCurrentOverflow'\r\n\r\nimport { VolumeStatLine } from 'components/Project/VolumeStatLine'\r\n\r\nimport { ThemeContext } from 'contexts/themeContext'\r\n\r\nimport ProjectBalance from './ProjectBalance'\r\nimport DistributedRatio from './DistributedRatio'\r\nimport OwnerBalance from './OwnerBalance'\r\n\r\nexport default function TreasuryStats() {\r\n  const {\r\n    balanceInDistributionLimitCurrency,\r\n    distributionLimit,\r\n    projectId,\r\n    totalVolume,\r\n    isPreviewMode,\r\n    primaryTerminal,\r\n    loading: { distributionLimitLoading },\r\n  } = useContext(V2ProjectContext)\r\n\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n\r\n  const { data: overflow, loading: overflowLoading } =\r\n    useTerminalCurrentOverflow({\r\n      terminal: primaryTerminal,\r\n      projectId,\r\n    })\r\n\r\n  const fundingProgressBarLoading =\r\n    (!isPreviewMode && overflowLoading) || distributionLimitLoading\r\n\r\n  return (\r\n    <Space direction=\"vertical\" style={{ display: 'flex' }}>\r\n      <VolumeStatLine totalVolume={totalVolume} color={colors.text.primary} />\r\n      <ProjectBalance />\r\n      <DistributedRatio />\r\n      <Skeleton\r\n        loading={fundingProgressBarLoading}\r\n        title={false}\r\n        paragraph={{ rows: 1, width: ['100%'] }}\r\n        active\r\n      >\r\n        {!fundingProgressBarLoading && distributionLimit ? (\r\n          <FundingProgressBar\r\n            targetAmount={distributionLimit}\r\n            balanceInTargetCurrency={balanceInDistributionLimitCurrency}\r\n            overflowAmountInTargetCurrency={overflow}\r\n          />\r\n        ) : null}\r\n      </Skeleton>\r\n      <OwnerBalance />\r\n    </Space>\r\n  )\r\n}\r\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber'\r\nimport { V2ContractName } from 'models/v2/contracts'\r\nimport { bigNumbersDiff } from 'utils/bigNumbers'\r\n\r\nimport useContractReader from './V2ContractReader'\r\n\r\n/** Returns combined ERC20 + unclaimed balance of user with `userAddress`. */\r\nexport default function useTotalBalanceOf(\r\n  userAddress: string | undefined,\r\n  projectId: BigNumberish | undefined,\r\n) {\r\n  return useContractReader<BigNumber>({\r\n    contract: V2ContractName.JBTokenStore,\r\n    functionName: 'balanceOf',\r\n    args:\r\n      userAddress && projectId\r\n        ? [userAddress, BigNumber.from(projectId).toHexString()]\r\n        : null,\r\n    valueDidChange: bigNumbersDiff,\r\n    // TODO: updateOn: useShouldUpdateTokens(projectId, terminalName, userAddress),\r\n  })\r\n}\r\n","import V2ProjectHandle from 'components/v2/shared/V2ProjectHandle'\r\nimport { NetworkContext } from 'contexts/networkContext'\r\nimport { ThemeContext } from 'contexts/themeContext'\r\nimport useSymbolOfERC20 from 'hooks/SymbolOfERC20'\r\nimport useProjectToken from 'hooks/v2/contractReader/ProjectToken'\r\nimport useTotalBalanceOf from 'hooks/v2/contractReader/TotalBalanceOf'\r\nimport { CSSProperties, useContext } from 'react'\r\nimport { formatWad } from 'utils/formatNumber'\r\nimport { tokenSymbolText } from 'utils/tokenSymbolText'\r\n\r\nexport const V2ProjectTokenBalance = ({\r\n  projectId,\r\n  handle,\r\n  style,\r\n  precision,\r\n}: {\r\n  projectId: number\r\n  handle?: string\r\n  style?: CSSProperties\r\n  precision?: number\r\n}) => {\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n  const { data: tokenAddress } = useProjectToken({ projectId })\r\n  const tokenSymbol = useSymbolOfERC20(tokenAddress)\r\n  const { userAddress } = useContext(NetworkContext)\r\n  const { data: balance } = useTotalBalanceOf(userAddress, projectId)\r\n\r\n  return (\r\n    <div style={{ display: 'flex', justifyContent: 'space-between', ...style }}>\r\n      <span>\r\n        {tokenSymbol !== undefined ? (\r\n          <>\r\n            {formatWad(balance, { precision: precision ?? 0 })}{' '}\r\n            {tokenSymbolText({ tokenSymbol, plural: true })}\r\n          </>\r\n        ) : (\r\n          '--'\r\n        )}\r\n      </span>\r\n\r\n      {handle && (\r\n        <V2ProjectHandle\r\n          style={{ color: colors.text.tertiary }}\r\n          projectId={projectId}\r\n          handle={handle}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import {\r\n  CaretDownFilled,\r\n  PlusOutlined,\r\n  DeleteOutlined,\r\n} from '@ant-design/icons'\r\nimport * as constants from '@ethersproject/constants'\r\nimport { Button, Col, Form, Input, Row, Tooltip } from 'antd'\r\n\r\nimport { FormInstance } from 'antd/lib/form/Form'\r\n\r\nimport { useState } from 'react'\r\n\r\nimport { t, Trans } from '@lingui/macro'\r\n\r\nimport { EditTrackedAssetsForm } from './V2BalancesModal'\r\n\r\nexport type AssetInputType = 'project' | 'erc20'\r\n\r\nconst AssetTypeSwitcherButton = ({\r\n  type,\r\n  onClick,\r\n}: {\r\n  type?: AssetInputType\r\n  onClick: VoidFunction\r\n}) => {\r\n  const formattedType = type === 'project' ? 'Project' : 'ERC-20'\r\n  return (\r\n    <Button\r\n      style={{ marginRight: 20, width: 100 }}\r\n      type=\"text\"\r\n      icon={<CaretDownFilled />}\r\n      onClick={onClick}\r\n    >\r\n      {formattedType}\r\n    </Button>\r\n  )\r\n}\r\n\r\nconst AssetInput = ({\r\n  value,\r\n  onChange,\r\n}: {\r\n  value?: { input?: string; type?: AssetInputType }\r\n  onChange?: (props: { input: string; type: AssetInputType }) => void\r\n}) => {\r\n  const [input, setInput] = useState<string>(value?.input ?? '')\r\n  const [type, setType] = useState<AssetInputType>(value?.type ?? 'erc20')\r\n\r\n  const triggerChange = (changedValue: {\r\n    input?: string\r\n    type?: AssetInputType\r\n  }) => {\r\n    onChange?.({\r\n      input,\r\n      type,\r\n      ...value,\r\n      ...changedValue,\r\n    })\r\n  }\r\n  const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setInput(input)\r\n    triggerChange({\r\n      input: e.target.value,\r\n    })\r\n  }\r\n  const onTypeChange = (newType: AssetInputType) => {\r\n    setType(newType)\r\n    triggerChange({ type: newType, input: '' })\r\n  }\r\n\r\n  return (\r\n    <div style={{ display: 'inline-flex', width: '100%' }}>\r\n      <AssetTypeSwitcherButton\r\n        type={value?.type ?? type}\r\n        onClick={() => {\r\n          const toggleType = (type: AssetInputType) =>\r\n            type === 'erc20' ? 'project' : 'erc20'\r\n          if (value?.type) {\r\n            onTypeChange(toggleType(value.type))\r\n          } else {\r\n            onTypeChange(toggleType(type))\r\n          }\r\n        }}\r\n      />\r\n      <Input\r\n        type=\"text\"\r\n        placeholder={\r\n          (value?.type ?? type) === 'erc20'\r\n            ? constants.AddressZero\r\n            : 'Project ID'\r\n        }\r\n        value={value?.input ?? input}\r\n        onChange={onInputChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function V2TokenRefs({\r\n  form,\r\n}: {\r\n  form: FormInstance<EditTrackedAssetsForm>\r\n}) {\r\n  return (\r\n    <Form form={form}>\r\n      <Form.List name=\"tokenRefs\">\r\n        {(fields, { add, remove }) => (\r\n          <>\r\n            {fields.map(({ key, name }) => (\r\n              <Row key={key}>\r\n                <Col flex=\"auto\">\r\n                  <Form.Item\r\n                    name={[name, 'assetInput']}\r\n                    rules={[\r\n                      {\r\n                        validator: (_, value) => {\r\n                          if (!value?.input.length) {\r\n                            return Promise.reject('Value is ')\r\n                          }\r\n                          return Promise.resolve()\r\n                        },\r\n                        validateTrigger: 'onCreate',\r\n                        message: 'Value is required',\r\n                        required: true,\r\n                      },\r\n                    ]}\r\n                  >\r\n                    <AssetInput />\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col flex=\"none\">\r\n                  <Tooltip title={t`Untrack token`}>\r\n                    <Button\r\n                      type=\"text\"\r\n                      style={{ marginLeft: 10 }}\r\n                      icon={<DeleteOutlined />}\r\n                      block\r\n                      onClick={() => remove(name)}\r\n                    />\r\n                  </Tooltip>\r\n                </Col>\r\n              </Row>\r\n            ))}\r\n            <Form.Item>\r\n              <Button\r\n                type=\"dashed\"\r\n                onClick={() => add()}\r\n                block\r\n                icon={<PlusOutlined />}\r\n              >\r\n                <span>\r\n                  <Trans>Add token</Trans>\r\n                </span>\r\n              </Button>\r\n            </Form.Item>\r\n          </>\r\n        )}\r\n      </Form.List>\r\n    </Form>\r\n  )\r\n}\r\n","import { SettingOutlined } from '@ant-design/icons'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { Button, Modal, Space } from 'antd'\r\nimport { ProjectMetadataV4 } from 'models/project-metadata'\r\nimport { TokenRef } from 'models/token-ref'\r\nimport { useEffect, useState } from 'react'\r\nimport { uploadProjectMetadata } from 'utils/ipfs'\r\nimport { t, Trans } from '@lingui/macro'\r\nimport { TransactorInstance } from 'hooks/Transactor'\r\nimport { V2ProjectTokenBalance } from 'components/v2/shared/V2ProjectTokenBalance'\r\nimport ERC20TokenBalance from 'components/v1/shared/ERC20TokenBalance'\r\n\r\nimport { useForm } from 'antd/lib/form/Form'\r\n\r\nimport { V2_PROJECT_IDS } from 'constants/v2/projectIds'\r\nimport V2TokenRefs from './V2TokenRefs'\r\nimport { AssetInputType } from './V2TokenRefs'\r\n\r\nexport interface EditTrackedAssetsForm {\r\n  tokenRefs: { assetInput: { input: string; type: AssetInputType } }[]\r\n}\r\n\r\nexport function V2BalancesModal({\r\n  owner,\r\n  projectMetadata,\r\n  projectName,\r\n  hasEditPermissions,\r\n  visible,\r\n  onCancel,\r\n  storeCidTx,\r\n}: {\r\n  owner: string | undefined\r\n  projectMetadata: ProjectMetadataV4 | undefined\r\n  projectName: string | undefined\r\n  hasEditPermissions?: boolean\r\n  visible: boolean | undefined\r\n  onCancel: () => void\r\n  storeCidTx: TransactorInstance<{ cid: string }>\r\n}) {\r\n  const [editModalVisible, setEditModalVisible] = useState<boolean>()\r\n  const [loading, setLoading] = useState<boolean>()\r\n  const [form] = useForm<EditTrackedAssetsForm>()\r\n\r\n  useEffect(() => {\r\n    const initialTokens = (\r\n      projectMetadata?.tokens ?? [{ type: 'erc20', value: '' }]\r\n    ).map(r => ({ ...r }))\r\n    form.setFieldsValue({\r\n      tokenRefs: initialTokens.map(t => ({\r\n        assetInput: { input: t.value, type: t.type },\r\n      })),\r\n    })\r\n  }, [form, projectMetadata, editModalVisible])\r\n\r\n  async function updateTokenRefs() {\r\n    if (!projectName) return\r\n\r\n    await form.validateFields()\r\n\r\n    setLoading(true)\r\n\r\n    const editingTokenRefs: TokenRef[] = form\r\n      .getFieldsValue()\r\n      .tokenRefs.map(t => t.assetInput)\r\n      .map(a => ({ value: a.input, type: a.type }))\r\n\r\n    const uploadedMetadata = await uploadProjectMetadata(\r\n      {\r\n        ...projectMetadata,\r\n        tokens: editingTokenRefs.filter(t => t.type),\r\n      },\r\n      projectName,\r\n    )\r\n\r\n    if (!uploadedMetadata.IpfsHash) {\r\n      setLoading(false)\r\n      return\r\n    }\r\n\r\n    storeCidTx(\r\n      { cid: uploadedMetadata.IpfsHash },\r\n      {\r\n        onDone: () => {\r\n          setLoading(false)\r\n          setEditModalVisible(false)\r\n          form.resetFields()\r\n        },\r\n      },\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      visible={visible}\r\n      onCancel={onCancel}\r\n      footer={\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            marginTop: 20,\r\n          }}\r\n        >\r\n          {hasEditPermissions ? (\r\n            <Button\r\n              type=\"text\"\r\n              size=\"small\"\r\n              icon={<SettingOutlined />}\r\n              onClick={() => setEditModalVisible(true)}\r\n            >\r\n              <span>\r\n                <Trans>Edit tracked assets</Trans>\r\n              </span>\r\n            </Button>\r\n          ) : (\r\n            <div></div>\r\n          )}\r\n          <Button onClick={onCancel}>\r\n            <Trans>Done</Trans>\r\n          </Button>\r\n        </div>\r\n      }\r\n    >\r\n      <div>\r\n        <h2>\r\n          <Trans>Assets</Trans>\r\n        </h2>\r\n        <p>\r\n          <Trans>Other assets in this project's owner's wallet.</Trans>\r\n        </p>\r\n\r\n        <Space direction=\"vertical\" style={{ width: '100%', marginTop: 20 }}>\r\n          <V2ProjectTokenBalance projectId={V2_PROJECT_IDS.JUICEBOX_DAO} />\r\n\r\n          {(projectMetadata as ProjectMetadataV4)?.tokens?.map(t =>\r\n            t.type === 'erc20' ? (\r\n              <ERC20TokenBalance\r\n                key={t.value}\r\n                wallet={owner}\r\n                tokenAddress={t.value}\r\n              />\r\n            ) : (\r\n              <V2ProjectTokenBalance\r\n                projectId={BigNumber.from(t.value).toNumber()}\r\n              />\r\n            ),\r\n          )}\r\n        </Space>\r\n\r\n        <Modal\r\n          title={t`Edit tracked assets`}\r\n          visible={editModalVisible}\r\n          onCancel={() => setEditModalVisible(false)}\r\n          cancelText={t`Cancel`}\r\n          width={600}\r\n          confirmLoading={loading}\r\n          onOk={updateTokenRefs}\r\n          okText={t`Save tracked assets`}\r\n        >\r\n          <p style={{ marginBottom: 40 }}>\r\n            <Trans>\r\n              Display ERC-20 and other Juicebox project tokens that this project\r\n              owner holds.\r\n            </Trans>\r\n          </p>\r\n          <V2TokenRefs form={form} />\r\n        </Modal>\r\n      </div>\r\n    </Modal>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { Descriptions } from 'antd'\r\n\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { ThemeContext } from 'contexts/themeContext'\r\nimport { V2CurrencyOption } from 'models/v2/currencyOption'\r\nimport { V2FundingCycle, V2FundingCycleMetadata } from 'models/v2/fundingCycle'\r\nimport { useContext } from 'react'\r\nimport { formatDate } from 'utils/formatDate'\r\nimport { formattedNum } from 'utils/formatNumber'\r\nimport { tokenSymbolText } from 'utils/tokenSymbolText'\r\nimport { V2CurrencyName } from 'utils/v2/currency'\r\nimport TooltipLabel from 'components/TooltipLabel'\r\n\r\nimport FundingCycleDetailWarning from 'components/Project/FundingCycleDetailWarning'\r\nimport EtherscanLink from 'components/EtherscanLink'\r\n\r\nimport { getUnsafeV2FundingCycleProperties } from 'utils/v2/fundingCycle'\r\n\r\nimport { detailedTimeString } from 'utils/formatTime'\r\n\r\nimport {\r\n  formatDiscountRate,\r\n  formatIssuanceRate,\r\n  formatRedemptionRate,\r\n  formatReservedRate,\r\n  weightedAmount,\r\n} from 'utils/v2/math'\r\n\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { parseEther } from 'ethers/lib/utils'\r\n\r\nimport { getBallotStrategyByAddress } from 'constants/v2/ballotStrategies/getBallotStrategiesByAddress'\r\nimport { FUNDING_CYCLE_WARNING_TEXT } from 'constants/fundingWarningText'\r\nimport {\r\n  DISCOUNT_RATE_EXPLANATION,\r\n  REDEMPTION_RATE_EXPLANATION,\r\n} from './settingExplanations'\r\nimport DistributionLimit from '../DistributionLimit'\r\n\r\nexport default function FundingCycleDetails({\r\n  fundingCycle,\r\n  fundingCycleMetadata,\r\n  distributionLimit,\r\n  distributionLimitCurrency,\r\n}: {\r\n  fundingCycle: V2FundingCycle | undefined\r\n  fundingCycleMetadata: V2FundingCycleMetadata | undefined\r\n  distributionLimit: BigNumber | undefined\r\n  distributionLimitCurrency: BigNumber | undefined\r\n}) {\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n\r\n  const { tokenSymbol } = useContext(V2ProjectContext)\r\n\r\n  if (!fundingCycle) return null\r\n\r\n  const formattedDuration = detailedTimeString({\r\n    timeSeconds: fundingCycle.duration.toNumber(),\r\n    fullWords: true,\r\n  })\r\n  const formattedStartTime = formatDate(fundingCycle.start.mul(1000))\r\n  const formattedEndTime = formatDate(\r\n    fundingCycle.start.add(fundingCycle.duration).mul(1000),\r\n  )\r\n  const ballotStrategy = getBallotStrategyByAddress(fundingCycle.ballot)\r\n  const unsafeFundingCycleProperties =\r\n    getUnsafeV2FundingCycleProperties(fundingCycle)\r\n\r\n  const tokenSymbolPlural = tokenSymbolText({\r\n    tokenSymbol,\r\n    capitalize: false,\r\n    plural: true,\r\n  })\r\n\r\n  const ReservedTokensText = () => {\r\n    const reservedRate = formattedNum(\r\n      formatIssuanceRate(\r\n        weightedAmount(\r\n          fundingCycle?.weight,\r\n          fundingCycleMetadata?.reservedRate.toNumber(),\r\n          parseEther('1'),\r\n          'reserved',\r\n        ) ?? '',\r\n      ),\r\n    )\r\n\r\n    return (\r\n      <span>\r\n        <Trans>\r\n          {reservedRate} {tokenSymbolPlural}/ETH (\r\n          {formatReservedRate(fundingCycleMetadata?.reservedRate)}%)\r\n        </Trans>\r\n      </span>\r\n    )\r\n  }\r\n\r\n  const IssuanceRateText = () => {\r\n    const payerRate = formattedNum(\r\n      formatIssuanceRate(\r\n        weightedAmount(\r\n          fundingCycle?.weight,\r\n          fundingCycleMetadata?.reservedRate.toNumber(),\r\n          parseEther('1'),\r\n          'payer',\r\n        ) ?? '',\r\n      ),\r\n    )\r\n\r\n    return (\r\n      <span>\r\n        <Trans>\r\n          {payerRate} {tokenSymbolPlural}/ETH\r\n        </Trans>\r\n      </span>\r\n    )\r\n  }\r\n\r\n  const riskWarningText = FUNDING_CYCLE_WARNING_TEXT()\r\n\r\n  return (\r\n    <div>\r\n      <Descriptions\r\n        labelStyle={{ fontWeight: 600 }}\r\n        size=\"small\"\r\n        column={{ xs: 1, sm: 1, md: 1, lg: 1, xl: 1, xxl: 2 }}\r\n        contentStyle={{ marginRight: '0.5rem' }}\r\n      >\r\n        <Descriptions.Item label={<Trans>Distribution limit</Trans>}>\r\n          <span style={{ whiteSpace: 'nowrap' }}>\r\n            <DistributionLimit\r\n              distributionLimit={distributionLimit}\r\n              currencyName={V2CurrencyName(\r\n                distributionLimitCurrency?.toNumber() as\r\n                  | V2CurrencyOption\r\n                  | undefined,\r\n              )}\r\n            />\r\n          </span>\r\n        </Descriptions.Item>\r\n\r\n        <Descriptions.Item label={<Trans>Duration</Trans>}>\r\n          {fundingCycle.duration.gt(0) ? (\r\n            formattedDuration\r\n          ) : (\r\n            <FundingCycleDetailWarning\r\n              showWarning={true}\r\n              tooltipTitle={riskWarningText.duration}\r\n            >\r\n              <Trans>Not set</Trans>\r\n            </FundingCycleDetailWarning>\r\n          )}\r\n        </Descriptions.Item>\r\n\r\n        {fundingCycle.duration.gt(0) && (\r\n          <Descriptions.Item label={<Trans>Start</Trans>}>\r\n            {formattedStartTime}\r\n          </Descriptions.Item>\r\n        )}\r\n\r\n        {fundingCycle.duration.gt(0) && (\r\n          <Descriptions.Item label={<Trans>End</Trans>}>\r\n            {formattedEndTime}\r\n          </Descriptions.Item>\r\n        )}\r\n\r\n        <Descriptions.Item\r\n          label={\r\n            <TooltipLabel\r\n              label={<Trans>Discount rate</Trans>}\r\n              tip={DISCOUNT_RATE_EXPLANATION}\r\n            />\r\n          }\r\n        >\r\n          {formatDiscountRate(fundingCycle.discountRate)}%\r\n        </Descriptions.Item>\r\n\r\n        <Descriptions.Item\r\n          span={2}\r\n          label={\r\n            <TooltipLabel\r\n              label={<Trans>Redemption rate</Trans>}\r\n              tip={REDEMPTION_RATE_EXPLANATION}\r\n            />\r\n          }\r\n        >\r\n          {fundingCycleMetadata?.redemptionRate ? (\r\n            <span>\r\n              {formatRedemptionRate(fundingCycleMetadata?.redemptionRate)}%\r\n            </span>\r\n          ) : null}\r\n        </Descriptions.Item>\r\n\r\n        <Descriptions.Item\r\n          label={\r\n            <TooltipLabel\r\n              label={<Trans>Mint rate</Trans>}\r\n              tip={\r\n                <Trans>\r\n                  <strong>Total project tokens minted</strong> when 1 ETH is\r\n                  contributed. This can change over time according to the\r\n                  discount rate and reserved tokens amount of future funding\r\n                  cycles.\r\n                </Trans>\r\n              }\r\n            />\r\n          }\r\n          span={2}\r\n          contentStyle={{ minWidth: '10em' }}\r\n        >\r\n          <Trans>\r\n            {formattedNum(formatIssuanceRate(fundingCycle?.weight.toString()))}{' '}\r\n            tokens/ETH\r\n          </Trans>\r\n        </Descriptions.Item>\r\n\r\n        <Descriptions.Item\r\n          label={\r\n            <TooltipLabel\r\n              label={<Trans>Contributor rate</Trans>}\r\n              tip={\r\n                <Trans>\r\n                  Newly minted {tokenSymbolPlural}{' '}\r\n                  <strong>received by contributors</strong> per ETH they\r\n                  contribute to the treasury.\r\n                </Trans>\r\n              }\r\n            />\r\n          }\r\n          span={2}\r\n          contentStyle={{ minWidth: '10em' }}\r\n        >\r\n          <IssuanceRateText />\r\n        </Descriptions.Item>\r\n\r\n        <Descriptions.Item\r\n          span={2}\r\n          label={\r\n            <TooltipLabel\r\n              label={<Trans>Reserved {tokenSymbolPlural}</Trans>}\r\n              tip={\r\n                <Trans>\r\n                  Amount of newly minted project tokens{' '}\r\n                  <strong>reserved for the project</strong> when 1 ETH is\r\n                  contributed. The project owner is allocated all reserved\r\n                  tokens by default, but they can also be allocated to other\r\n                  wallet addresses.\r\n                </Trans>\r\n              }\r\n            />\r\n          }\r\n        >\r\n          <FundingCycleDetailWarning\r\n            showWarning={unsafeFundingCycleProperties.metadataReservedRate}\r\n            tooltipTitle={riskWarningText.metadataReservedRate}\r\n          >\r\n            <ReservedTokensText />\r\n          </FundingCycleDetailWarning>\r\n        </Descriptions.Item>\r\n\r\n        <Descriptions.Item\r\n          span={2}\r\n          label={<TooltipLabel label={<Trans>Payments</Trans>} />}\r\n        >\r\n          {fundingCycleMetadata?.pausePay ? (\r\n            <Trans>Paused</Trans>\r\n          ) : (\r\n            <Trans>Enabled</Trans>\r\n          )}\r\n        </Descriptions.Item>\r\n        <Descriptions.Item\r\n          span={2}\r\n          label={\r\n            <TooltipLabel\r\n              label={<Trans>Owner token minting</Trans>}\r\n              tip={\r\n                <Trans>\r\n                  Token minting allows the project owner to mint project tokens\r\n                  at any time.\r\n                </Trans>\r\n              }\r\n            />\r\n          }\r\n        >\r\n          <FundingCycleDetailWarning\r\n            showWarning={fundingCycleMetadata?.allowMinting}\r\n            tooltipTitle={FUNDING_CYCLE_WARNING_TEXT().allowMinting}\r\n          >\r\n            {fundingCycleMetadata?.allowMinting ? (\r\n              <Trans>Allowed</Trans>\r\n            ) : (\r\n              <Trans>Disabled</Trans>\r\n            )}\r\n          </FundingCycleDetailWarning>\r\n        </Descriptions.Item>\r\n      </Descriptions>\r\n\r\n      <div>\r\n        <span style={{ fontWeight: 600, color: colors.text.secondary }}>\r\n          <TooltipLabel\r\n            label={<Trans>Reconfiguration strategy</Trans>}\r\n            tip={\r\n              <Trans>\r\n                Rules for determining how funding cycles can be reconfigured\r\n              </Trans>\r\n            }\r\n          />\r\n          :\r\n        </span>{' '}\r\n        <FundingCycleDetailWarning\r\n          showWarning={unsafeFundingCycleProperties.ballot}\r\n          tooltipTitle={riskWarningText.ballot}\r\n        >\r\n          {ballotStrategy.name}\r\n        </FundingCycleDetailWarning>\r\n        <div style={{ color: colors.text.secondary }}>\r\n          <div style={{ fontSize: '0.7rem' }}>\r\n            <Trans>\r\n              Address:{' '}\r\n              <EtherscanLink value={ballotStrategy.address} type=\"address\" />\r\n            </Trans>\r\n            <br />\r\n            {ballotStrategy.description}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { ExclamationCircleOutlined } from '@ant-design/icons'\r\nimport { Form, Space } from 'antd'\r\nimport { t, Trans } from '@lingui/macro'\r\nimport CurrencySymbol from 'components/CurrencySymbol'\r\nimport InputAccessoryButton from 'components/InputAccessoryButton'\r\nimport FormattedNumberInput from 'components/inputs/FormattedNumberInput'\r\nimport { ThemeContext } from 'contexts/themeContext'\r\nimport { useCurrencyConverter } from 'hooks/CurrencyConverter'\r\nimport { useContext, useEffect, useState } from 'react'\r\nimport { formatWad, fromWad, parseWad } from 'utils/formatNumber'\r\nimport { amountSubFee, feeForAmount } from 'utils/v2/math'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport SplitList from 'components/v2/shared/SplitList'\r\nimport { V2CurrencyName, V2_CURRENCY_USD } from 'utils/v2/currency'\r\nimport { V2CurrencyOption } from 'models/v2/currencyOption'\r\nimport { useDistributePayoutsTx } from 'hooks/v2/transactor/DistributePayouts'\r\nimport { useETHPaymentTerminalFee } from 'hooks/v2/contractReader/ETHPaymentTerminalFee'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\n\r\nimport { formatFee } from 'utils/v2/math'\r\nimport TransactionModal from 'components/TransactionModal'\r\n\r\nexport default function DistributePayoutsModal({\r\n  visible,\r\n  onCancel,\r\n  onConfirmed,\r\n}: {\r\n  visible?: boolean\r\n  onCancel?: VoidFunction\r\n  onConfirmed?: VoidFunction\r\n}) {\r\n  const [loading, setLoading] = useState<boolean>()\r\n  const [distributionAmount, setDistributionAmount] = useState<string>()\r\n  const {\r\n    balanceInDistributionLimitCurrency,\r\n    distributionLimit,\r\n    usedDistributionLimit,\r\n    distributionLimitCurrency,\r\n    payoutSplits,\r\n    projectOwnerAddress,\r\n  } = useContext(V2ProjectContext)\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n  const [transactionPending, setTransactionPending] = useState<boolean>()\r\n\r\n  const distributePayoutsTx = useDistributePayoutsTx()\r\n  const ETHPaymentTerminalFee = useETHPaymentTerminalFee()\r\n  const converter = useCurrencyConverter()\r\n\r\n  useEffect(() => {\r\n    if (!distributionLimit) return\r\n\r\n    const unusedFunds = distributionLimit?.sub(usedDistributionLimit ?? 0) ?? 0\r\n    const distributable = balanceInDistributionLimitCurrency?.gt(unusedFunds)\r\n      ? unusedFunds\r\n      : balanceInDistributionLimitCurrency\r\n\r\n    setDistributionAmount(fromWad(distributable))\r\n  }, [\r\n    balanceInDistributionLimitCurrency,\r\n    distributionLimit,\r\n    usedDistributionLimit,\r\n  ])\r\n\r\n  async function executeDistributePayoutsTx() {\r\n    if (!distributionLimitCurrency || !distributionAmount) return\r\n\r\n    const minAmount = (\r\n      distributionLimitCurrency.eq(V2_CURRENCY_USD)\r\n        ? converter.usdToWei(distributionAmount)\r\n        : parseWad(distributionAmount)\r\n    )?.sub(1e12) // Arbitrary value subtracted\r\n    if (!minAmount) return\r\n\r\n    setLoading(true)\r\n\r\n    const txSuccessful = await distributePayoutsTx(\r\n      {\r\n        amount: parseWad(distributionAmount), // TODO use terminal.decimals() to parse amount\r\n        currency: distributionLimitCurrency.toNumber() as V2CurrencyOption,\r\n      },\r\n      {\r\n        onDone: () => {\r\n          setTransactionPending(true)\r\n        },\r\n        onConfirmed: () => {\r\n          setLoading(false)\r\n          setTransactionPending(false)\r\n          onConfirmed?.()\r\n        },\r\n      },\r\n    )\r\n\r\n    if (!txSuccessful) {\r\n      setLoading(false)\r\n      setTransactionPending(false)\r\n    }\r\n  }\r\n\r\n  if (!ETHPaymentTerminalFee) return null\r\n\r\n  const distributionCurrencyName = V2CurrencyName(\r\n    distributionLimitCurrency?.toNumber() as V2CurrencyOption,\r\n  )\r\n\r\n  const unusedFunds =\r\n    distributionLimit?.sub(usedDistributionLimit ?? 0) ?? BigNumber.from(0)\r\n\r\n  const distributable = balanceInDistributionLimitCurrency?.gt(unusedFunds)\r\n    ? unusedFunds\r\n    : balanceInDistributionLimitCurrency\r\n\r\n  const feePercentage = formatFee(ETHPaymentTerminalFee)\r\n  const grossAvailableAmount = formatWad(distributable, { precision: 4 })\r\n  const feeAmount = formatWad(\r\n    feeForAmount(distributable, ETHPaymentTerminalFee) ?? 0,\r\n    {\r\n      precision: 4,\r\n    },\r\n  )\r\n  const netAvailableAmount =\r\n    amountSubFee(distributable, ETHPaymentTerminalFee) ?? BigNumber.from(0)\r\n\r\n  const netAvailableAmountFormatted = formatWad(netAvailableAmount, {\r\n    precision: 4,\r\n  })\r\n  const netDistributionAmount = formatWad(\r\n    distributionAmount\r\n      ? amountSubFee(parseWad(distributionAmount), ETHPaymentTerminalFee)\r\n      : BigNumber.from(0),\r\n  )\r\n\r\n  return (\r\n    <TransactionModal\r\n      title={<Trans>Distribute funds</Trans>}\r\n      visible={visible}\r\n      onOk={executeDistributePayoutsTx}\r\n      onCancel={() => {\r\n        setDistributionAmount(undefined)\r\n        onCancel?.()\r\n      }}\r\n      okButtonProps={{\r\n        disabled: !distributionAmount || distributionAmount === '0',\r\n      }}\r\n      confirmLoading={loading}\r\n      transactionPending={transactionPending}\r\n      okText={t`Distribute funds`}\r\n      connectWalletText={t`Connect wallet to distribute`}\r\n      width={640}\r\n    >\r\n      <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\r\n        <div>\r\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n            <Trans>Total funds:</Trans>{' '}\r\n            <div>\r\n              <CurrencySymbol currency={distributionCurrencyName} />\r\n              {grossAvailableAmount}\r\n            </div>\r\n          </div>\r\n\r\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n            <div>\r\n              <Trans>JBX Fee ({feePercentage}%):</Trans>\r\n            </div>\r\n            <div>\r\n              - <CurrencySymbol currency={distributionCurrencyName} />\r\n              {feeAmount}\r\n            </div>\r\n          </div>\r\n\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              fontWeight: 500,\r\n              borderTop: `1px solid ${colors.stroke.tertiary}`,\r\n            }}\r\n          >\r\n            <div>\r\n              <Trans>Available after fee:</Trans>\r\n            </div>\r\n            <div>\r\n              <CurrencySymbol currency={distributionCurrencyName} />\r\n              {netAvailableAmountFormatted}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Form layout=\"vertical\">\r\n          <Form.Item\r\n            label={<Trans>Amount to distribute</Trans>}\r\n            style={{ marginBottom: 0 }}\r\n            extra={\r\n              <div style={{ color: colors.text.primary, marginBottom: 10 }}>\r\n                <Trans>\r\n                  <span style={{ fontWeight: 500 }}>\r\n                    <CurrencySymbol currency={distributionCurrencyName} />\r\n                    {netDistributionAmount}\r\n                  </span>{' '}\r\n                  after {feePercentage}% JBX fee\r\n                </Trans>\r\n              </div>\r\n            }\r\n          >\r\n            <FormattedNumberInput\r\n              placeholder=\"0\"\r\n              value={distributionAmount}\r\n              onChange={value => setDistributionAmount(value)}\r\n              accessory={\r\n                <div\r\n                  style={{\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                  }}\r\n                >\r\n                  <span\r\n                    style={{\r\n                      marginRight: 8,\r\n                      color: colors.text.primary,\r\n                    }}\r\n                  >\r\n                    {V2CurrencyName(\r\n                      distributionLimitCurrency?.toNumber() as V2CurrencyOption,\r\n                    )}\r\n                  </span>\r\n                  <InputAccessoryButton\r\n                    content={<Trans>MAX</Trans>}\r\n                    onClick={() =>\r\n                      setDistributionAmount(fromWad(distributable))\r\n                    }\r\n                  />\r\n                </div>\r\n              }\r\n            />\r\n          </Form.Item>\r\n        </Form>\r\n        <div>\r\n          <h4>\r\n            <Trans>Payout recipients</Trans>\r\n          </h4>\r\n\r\n          {payoutSplits?.length === 0 ? (\r\n            <p>\r\n              <Trans>\r\n                There are no payouts defined for this funding cycle. The project\r\n                owner will receive all available funds.\r\n              </Trans>\r\n            </p>\r\n          ) : null}\r\n\r\n          <SplitList\r\n            totalValue={netAvailableAmount}\r\n            currency={distributionLimitCurrency}\r\n            splits={payoutSplits ?? []}\r\n            projectOwnerAddress={projectOwnerAddress}\r\n            showSplitValues\r\n          />\r\n        </div>\r\n        <p style={{ fontSize: '0.8rem' }}>\r\n          <ExclamationCircleOutlined />{' '}\r\n          <Trans>Recipients will receive payouts in ETH.</Trans>\r\n        </p>\r\n      </Space>\r\n    </TransactionModal>\r\n  )\r\n}\r\n","import { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { V2UserContext } from 'contexts/v2/userContext'\r\nimport { useContext } from 'react'\r\n\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\n\r\nimport { V2CurrencyOption } from 'models/v2/currencyOption'\r\n\r\nimport { TransactorInstance } from '../../Transactor'\r\nimport { ETH_TOKEN_ADDRESS } from 'constants/v2/juiceboxTokens'\r\n\r\ntype DistributePayoutsTx = TransactorInstance<{\r\n  memo?: string\r\n  amount: BigNumber | undefined\r\n  currency: V2CurrencyOption | undefined\r\n}>\r\n\r\nconst minReturnedTokens = 0 // TODO will need a field for this in WithdrawModal for v2\r\n\r\nexport function useDistributePayoutsTx(): DistributePayoutsTx {\r\n  const { transactor, contracts } = useContext(V2UserContext)\r\n  const { projectId } = useContext(V2ProjectContext)\r\n\r\n  return ({ amount, currency, memo = '' }, txOpts) => {\r\n    if (\r\n      !transactor ||\r\n      !projectId ||\r\n      !contracts?.JBETHPaymentTerminal ||\r\n      !amount ||\r\n      !currency\r\n    ) {\r\n      txOpts?.onDone?.()\r\n      return Promise.resolve(false)\r\n    }\r\n\r\n    return transactor(\r\n      contracts.JBETHPaymentTerminal,\r\n      'distributePayoutsOf',\r\n      [projectId, amount, currency, ETH_TOKEN_ADDRESS, minReturnedTokens, memo],\r\n      txOpts,\r\n    )\r\n  }\r\n}\r\n","export type Split = {\r\n  beneficiary: string | undefined // address\r\n  percent: number\r\n  preferClaimed: boolean | undefined\r\n  lockedUntil: number | undefined\r\n  projectId: string | undefined\r\n  allocator: string | undefined // address, If an allocator is specified, funds will be sent to the allocator contract along with the projectId, beneficiary, preferClaimed properties.\r\n}\r\n\r\nexport const defaultSplit = {\r\n  beneficiary: undefined,\r\n  percent: 0,\r\n  preferClaimed: undefined,\r\n  lockedUntil: undefined,\r\n  projectId: undefined,\r\n  allocator: undefined,\r\n}\r\n\r\nexport type ETHPayoutSplitGroup = 1\r\nexport type ReservedTokensSplitGroup = 2\r\nexport type SplitGroup = ETHPayoutSplitGroup | ReservedTokensSplitGroup\r\n\r\nexport interface GroupedSplits<G> {\r\n  group: G\r\n  splits: Split[]\r\n}\r\n\r\nexport type ETHPayoutGroupedSplits = GroupedSplits<ETHPayoutSplitGroup>\r\nexport type ReservedTokensGroupedSplits =\r\n  GroupedSplits<ReservedTokensSplitGroup>\r\n","import { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { V2UserContext } from 'contexts/v2/userContext'\r\nimport { TransactorInstance } from 'hooks/Transactor'\r\nimport { GroupedSplits } from 'models/v2/splits'\r\nimport { useContext } from 'react'\r\nimport { sanitizeSplit } from 'utils/v2/splits'\r\n\r\nexport const useSetProjectSplits = <G>({\r\n  domain,\r\n}: {\r\n  domain: string | undefined\r\n}): TransactorInstance<{\r\n  groupedSplits: GroupedSplits<G>\r\n}> => {\r\n  const { transactor, contracts } = useContext(V2UserContext)\r\n  const { projectId } = useContext(V2ProjectContext)\r\n  return ({ groupedSplits }, txOpts) => {\r\n    const txGroupedSplits = {\r\n      group: groupedSplits.group,\r\n      splits: groupedSplits.splits.map(sanitizeSplit),\r\n    }\r\n    if (!transactor || !projectId || !contracts?.JBSplitsStore || !domain) {\r\n      txOpts?.onDone?.()\r\n      return Promise.resolve(false)\r\n    }\r\n\r\n    return transactor(\r\n      contracts.JBSplitsStore,\r\n      'set',\r\n      [projectId, domain, [txGroupedSplits]],\r\n      txOpts,\r\n    )\r\n  }\r\n}\r\n","import { t, Trans } from '@lingui/macro'\r\nimport { Button, Modal, Skeleton, Space } from 'antd'\r\nimport DistributionSplitCard from 'components/v2/shared/DistributionSplitsSection/DistributionSplitCard'\r\nimport { defaultSplit, Split } from 'models/v2/splits'\r\nimport React, {\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n} from 'react'\r\nimport { getTotalSplitsPercentage } from 'utils/v2/distributions'\r\nimport { ThemeContext } from 'contexts/themeContext'\r\nimport DistributionSplitModal from 'components/v2/shared/DistributionSplitsSection/DistributionSplitModal'\r\nimport { filter, isEqual } from 'lodash'\r\nimport { V2CurrencyOption } from 'models/v2/currencyOption'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { V2CurrencyName } from 'utils/v2/currency'\r\nimport { useSetProjectSplits } from 'hooks/v2/transactor/SetProjectSplits'\r\nimport { NetworkContext } from 'contexts/networkContext'\r\nimport { MAX_DISTRIBUTION_LIMIT, splitPercentFrom } from 'utils/v2/math'\r\nimport { formatWad } from 'utils/formatNumber'\r\n\r\nimport { ExclamationCircleOutlined, SettingOutlined } from '@ant-design/icons'\r\n\r\nimport CurrencySymbol from 'components/CurrencySymbol'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport { ETH_PAYOUT_SPLIT_GROUP } from 'constants/v2/splits'\r\n\r\nconst OwnerSplitCard = ({ splits }: { splits: Split[] }) => {\r\n  const { userAddress } = useContext(NetworkContext)\r\n  const { distributionLimit, distributionLimitCurrency } =\r\n    useContext(V2ProjectContext)\r\n  const remainingSplitsPercentage = 100 - getTotalSplitsPercentage(splits)\r\n  const ownerSplit = useMemo<Split>(\r\n    () => ({\r\n      ...defaultSplit,\r\n      beneficiary: userAddress,\r\n      percent: splitPercentFrom(remainingSplitsPercentage).toNumber(),\r\n    }),\r\n    [remainingSplitsPercentage, userAddress],\r\n  )\r\n  const currencyName =\r\n    V2CurrencyName(\r\n      distributionLimitCurrency?.toNumber() as V2CurrencyOption | undefined,\r\n    ) ?? 'ETH'\r\n  const distributionLimitIsInfinite = distributionLimit?.eq(\r\n    MAX_DISTRIBUTION_LIMIT,\r\n  ) // hack to work around rounding error in parseWad in `DistributionSplitCard\r\n  return (\r\n    <DistributionSplitCard\r\n      split={ownerSplit}\r\n      splits={splits}\r\n      distributionLimit={\r\n        distributionLimitIsInfinite\r\n          ? undefined\r\n          : formatWad(distributionLimit, { thousandsSeparator: '' })\r\n      }\r\n      currencyName={currencyName}\r\n      isLocked\r\n      isProjectOwner\r\n    />\r\n  )\r\n}\r\n\r\nconst isLockedSplit = (split: Split) => {\r\n  const now = new Date().valueOf() / 1000\r\n  const { payoutSplits } = useContext(V2ProjectContext)\r\n  // Checks if the given split exists in the projectContext splits.\r\n  // If it doesn't, then it means it was just added or edited is which case\r\n  // we want to still be able to edit it\r\n  const confirmedSplitsIncludesSplit =\r\n    payoutSplits?.find(confirmedSplit => isEqual(confirmedSplit, split)) !==\r\n    undefined\r\n  return (\r\n    split.lockedUntil && split.lockedUntil > now && confirmedSplitsIncludesSplit\r\n  )\r\n}\r\n\r\nconst getLockedSplits = (splits: Split[]) => {\r\n  const lockedSplits = splits.filter(split => isLockedSplit(split))\r\n  return lockedSplits\r\n}\r\n\r\nconst getEditableSplits = (splits: Split[]) => {\r\n  const editableSplits = splits.filter(split => !isLockedSplit(split))\r\n  return editableSplits\r\n}\r\n\r\nconst DescriptionParagraphOne = () => (\r\n  <p>\r\n    <Trans>\r\n      Reconfigure payouts as percentages of your distribution limit.\r\n    </Trans>\r\n  </p>\r\n)\r\nconst DescriptionParagraphTwo = () => {\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n  return (\r\n    <p>\r\n      <Space size=\"small\">\r\n        <ExclamationCircleOutlined\r\n          style={{\r\n            color: colors.text.warn,\r\n          }}\r\n        />\r\n        <Trans>Changes to payouts will take effect immediately.</Trans>\r\n      </Space>\r\n    </p>\r\n  )\r\n}\r\n\r\nconst DistributionLimitHeader = ({\r\n  style,\r\n}: {\r\n  style?: React.CSSProperties\r\n}) => {\r\n  const {\r\n    fundingCycle,\r\n    distributionLimit,\r\n    distributionLimitCurrency,\r\n    loading: { distributionLimitLoading, fundingCycleLoading },\r\n  } = useContext(V2ProjectContext)\r\n\r\n  const history = useHistory()\r\n  const currency = V2CurrencyName(\r\n    distributionLimitCurrency?.toNumber() as V2CurrencyOption,\r\n  )\r\n  const distributionLimitIsInfinite = distributionLimit?.eq(\r\n    MAX_DISTRIBUTION_LIMIT,\r\n  )\r\n  const projectLoading = distributionLimitLoading && fundingCycleLoading\r\n\r\n  const relocateToFundingDrawer = () => {\r\n    history.push({\r\n      search: '?reconfigModalOpen=true&fundingDrawerOpen=true',\r\n    })\r\n    history.go(0)\r\n  }\r\n\r\n  return (\r\n    <div style={{ display: 'flex', justifyContent: 'space-between', ...style }}>\r\n      <Skeleton\r\n        loading={projectLoading}\r\n        paragraph={{ rows: 1, width: ['80%'] }}\r\n        title={false}\r\n        active\r\n      >\r\n        <b>\r\n          <Trans>Cycle #{fundingCycle?.number.toString()} -</Trans>{' '}\r\n          {distributionLimitIsInfinite ? (\r\n            t`No limit (infinite)`\r\n          ) : (\r\n            <>\r\n              <Trans>\r\n                Distribution limit: <CurrencySymbol currency={currency} />\r\n                {formatWad(distributionLimit)}\r\n              </Trans>\r\n            </>\r\n          )}\r\n        </b>\r\n      </Skeleton>\r\n      <Button\r\n        size=\"small\"\r\n        icon={<SettingOutlined />}\r\n        onClick={relocateToFundingDrawer}\r\n      >\r\n        <span>\r\n          <Trans>Reconfigure payouts and limit</Trans>\r\n        </span>\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const EditPayoutsModal = ({\r\n  visible,\r\n  onOk,\r\n  onCancel,\r\n}: {\r\n  visible: boolean\r\n  onOk: VoidFunction\r\n  onCancel: VoidFunction\r\n}) => {\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n\r\n  const {\r\n    payoutSplits: contextPayoutSplits,\r\n    fundingCycle,\r\n    distributionLimitCurrency,\r\n    distributionLimit,\r\n  } = useContext(V2ProjectContext)\r\n  const setProjectSplits = useSetProjectSplits({\r\n    domain: fundingCycle?.configuration?.toString(),\r\n  })\r\n  const [modalLoading, setModalLoading] = useState<boolean>(false)\r\n\r\n  const currencyName =\r\n    V2CurrencyName(\r\n      distributionLimitCurrency?.toNumber() as V2CurrencyOption | undefined,\r\n    ) ?? 'ETH'\r\n\r\n  // Must differentiate between splits loaded from redux and\r\n  // ones just added to be able to still edit splits you've\r\n  // added with a lockedUntil\r\n  const [editingSplits, setEditingSplits] = useState<Split[]>([])\r\n\r\n  // Load original splits from context into editing splits.\r\n  useEffect(() => {\r\n    setEditingSplits(contextPayoutSplits ?? [])\r\n  }, [contextPayoutSplits, visible])\r\n\r\n  const lockedSplits = useMemo(\r\n    () => getLockedSplits(editingSplits),\r\n    [editingSplits],\r\n  )\r\n\r\n  const editableSplits = useMemo(\r\n    () => getEditableSplits(editingSplits),\r\n    [editingSplits],\r\n  )\r\n\r\n  const [addSplitModalVisible, setAddSplitModalVisible] =\r\n    useState<boolean>(false)\r\n\r\n  const totalSplitsPercentage = useMemo(\r\n    () => getTotalSplitsPercentage(editingSplits),\r\n    [editingSplits],\r\n  )\r\n  const totalSplitsPercentageInvalid = totalSplitsPercentage > 100\r\n  const remainingSplitsPercentage = 100 - totalSplitsPercentage\r\n  const ownerSplitCardVisible =\r\n    remainingSplitsPercentage > 0 && distributionLimit?.gt(0)\r\n\r\n  const onSplitsConfirmed = useCallback(\r\n    async (splits: Split[]) => {\r\n      if (totalSplitsPercentageInvalid) return\r\n      setModalLoading(true)\r\n      const tx = await setProjectSplits(\r\n        {\r\n          groupedSplits: {\r\n            group: ETH_PAYOUT_SPLIT_GROUP,\r\n            splits,\r\n          },\r\n        },\r\n        {\r\n          onConfirmed: () => {\r\n            setModalLoading(false)\r\n            onOk()\r\n          },\r\n          onError: () => setModalLoading(false),\r\n        },\r\n      )\r\n      if (!tx) {\r\n        setModalLoading(false)\r\n      }\r\n    },\r\n    [onOk, setProjectSplits, totalSplitsPercentageInvalid],\r\n  )\r\n\r\n  const onSplitsChanged = useCallback((newSplits: Split[]) => {\r\n    setEditingSplits(newSplits)\r\n  }, [])\r\n\r\n  const renderSplitCard = useCallback(\r\n    (split: Split, index: number, isLocked?: boolean) => {\r\n      const distributionLimitIsInfinite = distributionLimit?.eq(\r\n        MAX_DISTRIBUTION_LIMIT,\r\n      ) // hack to work around rounding error in parseWad in `DistributionSplitCard\r\n      return (\r\n        <DistributionSplitCard\r\n          key={split.beneficiary ?? index}\r\n          editInputMode=\"Percentage\" // Required for edit payouts\r\n          split={split}\r\n          splits={editingSplits}\r\n          distributionLimit={\r\n            distributionLimitIsInfinite\r\n              ? undefined\r\n              : formatWad(distributionLimit, { thousandsSeparator: '' })\r\n          }\r\n          currencyName={currencyName}\r\n          isLocked={isLocked}\r\n          onSplitsChanged={onSplitsChanged}\r\n          onSplitDelete={deletedSplit => {\r\n            const newEdited = filter(\r\n              editableSplits,\r\n              s => s.beneficiary !== deletedSplit.beneficiary,\r\n            )\r\n            onSplitsChanged(newEdited.concat(lockedSplits))\r\n          }}\r\n        />\r\n      )\r\n    },\r\n    [\r\n      distributionLimit,\r\n      editingSplits,\r\n      currencyName,\r\n      onSplitsChanged,\r\n      editableSplits,\r\n      lockedSplits,\r\n    ],\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        visible={visible}\r\n        confirmLoading={modalLoading}\r\n        title=\"Edit payouts\"\r\n        okText=\"Save payouts\"\r\n        cancelText={modalLoading ? 'Close' : 'Cancel'}\r\n        onOk={() => onSplitsConfirmed(editingSplits)}\r\n        onCancel={onCancel}\r\n        width={720}\r\n      >\r\n        <div>\r\n          <DescriptionParagraphOne />\r\n          <DescriptionParagraphTwo />\r\n        </div>\r\n        <DistributionLimitHeader style={{ marginTop: 32, marginBottom: 16 }} />\r\n        <Space\r\n          direction=\"vertical\"\r\n          style={{ width: '100%', minHeight: 0 }}\r\n          size=\"large\"\r\n        >\r\n          <Space style={{ width: '100%' }} direction=\"vertical\" size=\"small\">\r\n            {editableSplits.map((split, index) =>\r\n              renderSplitCard(split, index),\r\n            )}\r\n          </Space>\r\n          {lockedSplits ? (\r\n            <Space style={{ width: '100%' }} direction=\"vertical\" size=\"small\">\r\n              {lockedSplits.map((split, index) =>\r\n                renderSplitCard(split, index, true),\r\n              )}\r\n            </Space>\r\n          ) : null}\r\n          {ownerSplitCardVisible ? (\r\n            <OwnerSplitCard splits={editingSplits} />\r\n          ) : null}\r\n          {totalSplitsPercentageInvalid && (\r\n            <span style={{ color: colors.text.failure }}>\r\n              <Trans>Sum of percentages cannot exceed 100%.</Trans>\r\n            </span>\r\n          )}\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              color: colors.text.secondary,\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                color:\r\n                  totalSplitsPercentage > 100\r\n                    ? colors.text.warn\r\n                    : colors.text.secondary,\r\n              }}\r\n            >\r\n              <Trans>Total: {totalSplitsPercentage.toFixed(2)}%</Trans>\r\n            </div>\r\n          </div>\r\n          <Button\r\n            type=\"dashed\"\r\n            onClick={() => {\r\n              setAddSplitModalVisible(true)\r\n            }}\r\n            block\r\n          >\r\n            <Trans>Add payout</Trans>\r\n          </Button>\r\n        </Space>\r\n      </Modal>\r\n      <DistributionSplitModal\r\n        visible={addSplitModalVisible}\r\n        onSplitsChanged={onSplitsChanged}\r\n        mode={'Add'}\r\n        splits={editingSplits}\r\n        currencyName={currencyName}\r\n        onClose={() => setAddSplitModalVisible(false)}\r\n      />\r\n    </>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { Button, Skeleton, Space } from 'antd'\r\nimport { CardSection } from 'components/CardSection'\r\nimport TooltipLabel from 'components/TooltipLabel'\r\nimport SpendingStats from 'components/Project/SpendingStats'\r\nimport SplitList from 'components/v2/shared/SplitList'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { V2CurrencyOption } from 'models/v2/currencyOption'\r\nimport { useContext, useState } from 'react'\r\nimport { SettingOutlined } from '@ant-design/icons'\r\n\r\nimport { V2CurrencyName } from 'utils/v2/currency'\r\n\r\nimport { formatFee, MAX_DISTRIBUTION_LIMIT } from 'utils/v2/math'\r\n\r\nimport { useETHPaymentTerminalFee } from 'hooks/v2/contractReader/ETHPaymentTerminalFee'\r\nimport { Split } from 'models/v2/splits'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { detailedTimeString } from 'utils/formatTime'\r\nimport {\r\n  useHasPermission,\r\n  V2OperatorPermission,\r\n} from 'hooks/v2/contractReader/HasPermission'\r\n\r\nimport DistributePayoutsModal from './modals/DistributePayoutsModal'\r\nimport { EditPayoutsModal } from './modals/EditPayoutsModal'\r\n\r\nexport default function PayoutSplitsCard({\r\n  hideDistributeButton,\r\n  payoutSplits,\r\n  distributionLimitCurrency,\r\n  distributionLimit,\r\n  fundingCycleDuration,\r\n}: {\r\n  hideDistributeButton?: boolean\r\n  payoutSplits: Split[] | undefined\r\n  distributionLimitCurrency: BigNumber | undefined\r\n  distributionLimit: BigNumber | undefined\r\n  fundingCycleDuration: BigNumber | undefined\r\n}) {\r\n  const {\r\n    usedDistributionLimit,\r\n    projectOwnerAddress,\r\n    balanceInDistributionLimitCurrency,\r\n    isPreviewMode,\r\n    loading,\r\n  } = useContext(V2ProjectContext)\r\n  const ETHPaymentTerminalFee = useETHPaymentTerminalFee()\r\n\r\n  const [distributePayoutsModalVisible, setDistributePayoutsModalVisible] =\r\n    useState<boolean>()\r\n  const [editPayoutModalVisible, setEditPayoutModalVisible] =\r\n    useState<boolean>(false)\r\n  const isLoadingStats =\r\n    loading.ETHBalanceLoading ||\r\n    loading.distributionLimitLoading ||\r\n    loading.balanceInDistributionLimitCurrencyLoading ||\r\n    loading.usedDistributionLimitLoading\r\n\r\n  const formattedDuration = detailedTimeString({\r\n    timeSeconds: fundingCycleDuration?.toNumber(),\r\n    fullWords: true,\r\n  })\r\n  const hasDuration = fundingCycleDuration?.gt(0)\r\n  const canEditPayouts = useHasPermission(V2OperatorPermission.SET_SPLITS)\r\n\r\n  return (\r\n    <CardSection>\r\n      <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\r\n        {hideDistributeButton ? null : (\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              gap: 10,\r\n              flexWrap: 'wrap',\r\n            }}\r\n          >\r\n            <Skeleton\r\n              loading={isLoadingStats}\r\n              active\r\n              title={false}\r\n              paragraph={{ rows: 2, width: ['60%', '60%'] }}\r\n            >\r\n              <SpendingStats\r\n                hasFundingTarget={distributionLimit?.gt(0)}\r\n                currency={V2CurrencyName(\r\n                  distributionLimitCurrency?.toNumber() as V2CurrencyOption,\r\n                )}\r\n                projectBalanceInCurrency={balanceInDistributionLimitCurrency}\r\n                targetAmount={distributionLimit ?? BigNumber.from(0)}\r\n                distributedAmount={usedDistributionLimit ?? BigNumber.from(0)}\r\n                feePercentage={\r\n                  ETHPaymentTerminalFee\r\n                    ? formatFee(ETHPaymentTerminalFee)\r\n                    : undefined\r\n                }\r\n                ownerAddress={projectOwnerAddress}\r\n              />\r\n            </Skeleton>\r\n\r\n            <Button\r\n              type=\"ghost\"\r\n              size=\"small\"\r\n              onClick={() => setDistributePayoutsModalVisible(true)}\r\n              disabled={isPreviewMode}\r\n            >\r\n              <Trans>Distribute funds</Trans>\r\n            </Button>\r\n          </div>\r\n        )}\r\n\r\n        <div>\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              gap: 10,\r\n              flexWrap: 'wrap',\r\n            }}\r\n          >\r\n            <TooltipLabel\r\n              label={\r\n                <h4 style={{ display: 'inline-block' }}>\r\n                  <Trans>Funding distribution</Trans>\r\n                </h4>\r\n              }\r\n              tip={\r\n                <Trans>\r\n                  Available funds can be distributed according to the payouts\r\n                  below\r\n                  {hasDuration ? ` every ${formattedDuration}` : null}.\r\n                </Trans>\r\n              }\r\n            />\r\n            {canEditPayouts && (\r\n              <Button\r\n                size=\"small\"\r\n                onClick={() => setEditPayoutModalVisible(true)}\r\n                icon={<SettingOutlined />}\r\n                style={{ marginBottom: '1rem' }}\r\n              >\r\n                <span>\r\n                  <Trans>Edit payouts</Trans>\r\n                </span>\r\n              </Button>\r\n            )}\r\n          </div>\r\n          {payoutSplits ? (\r\n            <SplitList\r\n              splits={payoutSplits}\r\n              currency={distributionLimitCurrency}\r\n              totalValue={distributionLimit}\r\n              projectOwnerAddress={projectOwnerAddress}\r\n              showSplitValues={!distributionLimit?.eq(MAX_DISTRIBUTION_LIMIT)}\r\n              valueFormatProps={{ precision: 4 }}\r\n            />\r\n          ) : null}\r\n        </div>\r\n      </Space>\r\n\r\n      <DistributePayoutsModal\r\n        visible={distributePayoutsModalVisible}\r\n        onCancel={() => setDistributePayoutsModalVisible(false)}\r\n        onConfirmed={() => window.location.reload()}\r\n      />\r\n      <EditPayoutsModal\r\n        visible={editPayoutModalVisible}\r\n        onCancel={() => setEditPayoutModalVisible(false)}\r\n        onOk={() => setEditPayoutModalVisible(false)}\r\n      />\r\n    </CardSection>\r\n  )\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { V2ContractName } from 'models/v2/contracts'\r\n\r\nimport useContractReader from './V2ContractReader'\r\n\r\nexport default function useProjectReservedTokens({\r\n  projectId,\r\n  reservedRate,\r\n}: {\r\n  projectId: number | undefined\r\n  reservedRate: BigNumber | undefined\r\n}) {\r\n  return useContractReader<BigNumber>({\r\n    contract: V2ContractName.JBController,\r\n    functionName: 'reservedTokenBalanceOf',\r\n    args: projectId && reservedRate ? [projectId, reservedRate] : null,\r\n  })\r\n}\r\n","import { t, Trans } from '@lingui/macro'\r\nimport { Space } from 'antd'\r\nimport { useDistributeReservedTokens } from 'hooks/v2/transactor/DistributeReservedTokensTx'\r\nimport { useContext, useState } from 'react'\r\nimport { formatWad } from 'utils/formatNumber'\r\nimport { tokenSymbolText } from 'utils/tokenSymbolText'\r\nimport SplitList from 'components/v2/shared/SplitList'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport useProjectReservedTokens from 'hooks/v2/contractReader/ProjectReservedTokens'\r\nimport TransactionModal from 'components/TransactionModal'\r\n\r\nexport default function DistributeReservedTokensModal({\r\n  visible,\r\n  onCancel,\r\n  onConfirmed,\r\n}: {\r\n  visible?: boolean\r\n  onCancel?: VoidFunction\r\n  onConfirmed?: VoidFunction\r\n}) {\r\n  const {\r\n    tokenSymbol,\r\n    reservedTokensSplits,\r\n    projectOwnerAddress,\r\n    fundingCycleMetadata,\r\n    projectId,\r\n  } = useContext(V2ProjectContext)\r\n\r\n  const [loading, setLoading] = useState<boolean>()\r\n  const [transactionPending, setTransactionPending] = useState<boolean>()\r\n\r\n  const distributeReservedTokensTx = useDistributeReservedTokens()\r\n  const { data: reservedTokens } = useProjectReservedTokens({\r\n    projectId,\r\n    reservedRate: fundingCycleMetadata?.reservedRate,\r\n  })\r\n\r\n  async function distributeReservedTokens() {\r\n    setLoading(true)\r\n\r\n    const txSuccessful = await distributeReservedTokensTx(\r\n      {},\r\n      {\r\n        onDone: () => {\r\n          setTransactionPending(true)\r\n        },\r\n        onConfirmed: () => {\r\n          setLoading(false)\r\n          setTransactionPending(false)\r\n          onConfirmed?.()\r\n        },\r\n      },\r\n    )\r\n\r\n    if (!txSuccessful) {\r\n      setLoading(false)\r\n      setTransactionPending(false)\r\n    }\r\n  }\r\n\r\n  const reservedTokensFormatted = formatWad(reservedTokens, { precision: 0 })\r\n  const tokenTextPlural = tokenSymbolText({\r\n    tokenSymbol: tokenSymbol,\r\n    capitalize: false,\r\n    plural: true,\r\n  })\r\n\r\n  const tokenTextSingular = tokenSymbolText({\r\n    tokenSymbol: tokenSymbol,\r\n    capitalize: true,\r\n    plural: false,\r\n  })\r\n\r\n  return (\r\n    <TransactionModal\r\n      title={<Trans>Distribute reserved {tokenTextPlural}</Trans>}\r\n      visible={visible}\r\n      onOk={() => distributeReservedTokens()}\r\n      okText={t`Distribute ${tokenTextPlural}`}\r\n      connectWalletText={t`Connect wallet to distribute`}\r\n      confirmLoading={loading}\r\n      transactionPending={transactionPending}\r\n      onCancel={onCancel}\r\n      okButtonProps={{ disabled: !reservedTokens?.gt(0) }}\r\n      width={640}\r\n      centered={true}\r\n    >\r\n      <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\r\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n          <Trans>\r\n            Reserved {tokenTextPlural}:{' '}\r\n            <span>\r\n              {reservedTokensFormatted} {tokenTextPlural}\r\n            </span>\r\n          </Trans>\r\n        </div>\r\n        <div>\r\n          <h4>\r\n            <Trans>{tokenTextSingular} recipients</Trans>\r\n          </h4>\r\n\r\n          {reservedTokensSplits?.length === 0 ? (\r\n            <p>\r\n              <Trans>\r\n                There are no reserved token recipients defined for this funding\r\n                cycle. The project owner will receive all available tokens.\r\n              </Trans>\r\n            </p>\r\n          ) : null}\r\n\r\n          <SplitList\r\n            splits={reservedTokensSplits ?? []}\r\n            projectOwnerAddress={projectOwnerAddress}\r\n            totalValue={reservedTokens}\r\n            valueSuffix={tokenTextPlural}\r\n            showSplitValues\r\n            valueFormatProps={{ precision: 0 }}\r\n          />\r\n        </div>\r\n      </Space>\r\n    </TransactionModal>\r\n  )\r\n}\r\n","import { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { V2UserContext } from 'contexts/v2/userContext'\r\nimport { useContext } from 'react'\r\n\r\nimport { TransactorInstance } from '../../Transactor'\r\n\r\ntype DistributeReserveTokensTx = TransactorInstance<{\r\n  memo?: string\r\n}>\r\n\r\nexport function useDistributeReservedTokens(): DistributeReserveTokensTx {\r\n  const { transactor, contracts } = useContext(V2UserContext)\r\n  const { projectId } = useContext(V2ProjectContext)\r\n\r\n  return ({ memo = '' }, txOpts) => {\r\n    if (!transactor || !projectId || !contracts?.JBController) {\r\n      txOpts?.onDone?.()\r\n      return Promise.resolve(false)\r\n    }\r\n    // eslint-disable-next-line no-console\r\n    console.log(contracts.JBController,222222222222)\r\n    return transactor(\r\n      contracts.JBController,\r\n      'distributeReservedTokensOf',\r\n      [projectId, memo],\r\n      txOpts,\r\n    )\r\n  }\r\n}\r\n","import { t, Trans } from '@lingui/macro'\r\nimport { Form, Modal } from 'antd'\r\nimport Callout from 'components/Callout'\r\nimport { FormItems } from 'components/formItems'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { useSetProjectSplits } from 'hooks/v2/transactor/SetProjectSplits'\r\nimport { Split } from 'models/v2/splits'\r\nimport { useCallback, useContext, useEffect, useMemo, useState } from 'react'\r\nimport { emitErrorNotification } from 'utils/notifications'\r\nimport { preciseFormatSplitPercent } from 'utils/v2/math'\r\nimport { toMod, toSplit } from 'utils/v2/splits'\r\n\r\nimport { RESERVED_TOKEN_SPLIT_GROUP } from 'constants/v2/splits'\r\n\r\nexport const EditTokenAllocationModal = ({\r\n  visible,\r\n  onOk,\r\n  onCancel,\r\n}: {\r\n  visible: boolean\r\n  onOk: VoidFunction\r\n  onCancel: VoidFunction\r\n}) => {\r\n  const { reservedTokensSplits, fundingCycleMetadata, fundingCycle } =\r\n    useContext(V2ProjectContext)\r\n  const reservedRate = fundingCycleMetadata?.reservedRate\r\n\r\n  const setProjectSplits = useSetProjectSplits({\r\n    domain: fundingCycle?.configuration?.toString(),\r\n  })\r\n\r\n  const [editingReservedTokensSplits, setEditingReservedTokensSplits] =\r\n    useState<Split[]>([])\r\n  const [modalLoading, setModalLoading] = useState<boolean>(false)\r\n\r\n  useEffect(() => {\r\n    if (!reservedTokensSplits) return\r\n    setEditingReservedTokensSplits(reservedTokensSplits)\r\n  }, [reservedTokensSplits])\r\n\r\n  const totalPercentage = useMemo(\r\n    () =>\r\n      editingReservedTokensSplits\r\n        ?.map(s => preciseFormatSplitPercent(s.percent))\r\n        .reduce((a, b) => a + b, 0) ?? 0,\r\n    [editingReservedTokensSplits],\r\n  )\r\n  const totalPercentagesInvalid = totalPercentage > 100\r\n\r\n  const onSaveTokenAllocation = useCallback(async () => {\r\n    if (totalPercentagesInvalid) return\r\n    setModalLoading(true)\r\n    const tx = await setProjectSplits(\r\n      {\r\n        groupedSplits: {\r\n          group: RESERVED_TOKEN_SPLIT_GROUP,\r\n          splits: editingReservedTokensSplits ?? [],\r\n        },\r\n      },\r\n      {\r\n        onConfirmed: () => {\r\n          setModalLoading(false)\r\n          onOk()\r\n        },\r\n        onError: () => setModalLoading(false),\r\n      },\r\n    )\r\n    if (!tx) {\r\n      emitErrorNotification('Token allocation edit failed')\r\n      setModalLoading(false)\r\n    }\r\n  }, [\r\n    editingReservedTokensSplits,\r\n    onOk,\r\n    setProjectSplits,\r\n    totalPercentagesInvalid,\r\n  ])\r\n\r\n  return (\r\n    <Modal\r\n      visible={visible}\r\n      confirmLoading={modalLoading}\r\n      title={t`Edit reserved token allocation`}\r\n      okText={t`Save token allocation`}\r\n      cancelText={modalLoading ? t`Close` : t`Cancel`}\r\n      width={720}\r\n      onOk={() => onSaveTokenAllocation()}\r\n      onCancel={onCancel}\r\n      okButtonProps={{ disabled: totalPercentagesInvalid }}\r\n    >\r\n      <Callout style={{ marginBottom: '1rem' }}>\r\n        <Trans>\r\n          Changes to your reserved token allocation will take effect\r\n          immediately.\r\n        </Trans>\r\n      </Callout>\r\n      <Form layout=\"vertical\">\r\n        <FormItems.ProjectTicketMods\r\n          mods={editingReservedTokensSplits.map(toMod)}\r\n          onModsChanged={mods =>\r\n            setEditingReservedTokensSplits(mods.map(toSplit))\r\n          }\r\n          formItemProps={{\r\n            label: <Trans>Reserved token allocation</Trans>,\r\n            extra: (\r\n              <Trans>\r\n                Allocate a portion of your project's reserved tokens to other\r\n                Ethereum wallets or Juicebox projects.\r\n              </Trans>\r\n            ),\r\n          }}\r\n          reservedRate={reservedRate?.toNumber() ?? 0}\r\n        />\r\n      </Form>\r\n    </Modal>\r\n  )\r\n}\r\n","import { SettingOutlined } from '@ant-design/icons'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport * as constants from '@ethersproject/constants'\r\nimport { Trans } from '@lingui/macro'\r\nimport { Button, Skeleton, Space } from 'antd'\r\nimport { CardSection } from 'components/CardSection'\r\nimport FormattedAddress from 'components/FormattedAddress'\r\nimport TooltipLabel from 'components/TooltipLabel'\r\nimport SplitList from 'components/v2/shared/SplitList'\r\nimport { ThemeContext } from 'contexts/themeContext'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport {\r\n  useHasPermission,\r\n  V2OperatorPermission,\r\n} from 'hooks/v2/contractReader/HasPermission'\r\nimport useProjectReservedTokens from 'hooks/v2/contractReader/ProjectReservedTokens'\r\nimport { Split } from 'models/v2/splits'\r\nimport { CSSProperties, useContext, useState } from 'react'\r\nimport { formatWad } from 'utils/formatNumber'\r\nimport { tokenSymbolText } from 'utils/tokenSymbolText'\r\nimport { formatReservedRate } from 'utils/v2/math'\r\n\r\nimport DistributeReservedTokensModal from './modals/DistributeReservedTokensModal'\r\nimport { EditTokenAllocationModal } from './modals/EditTokenAllocationModal'\r\n\r\nexport default function ReservedTokensSplitsCard({\r\n  hideDistributeButton,\r\n  reservedTokensSplits,\r\n  reservedRate,\r\n}: {\r\n  hideDistributeButton?: boolean\r\n  reservedTokensSplits: Split[] | undefined\r\n  reservedRate: BigNumber | undefined\r\n}) {\r\n  const {\r\n    tokenSymbol,\r\n    tokenAddress,\r\n    projectOwnerAddress,\r\n    projectId,\r\n    isPreviewMode,\r\n  } = useContext(V2ProjectContext)\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n\r\n  const [\r\n    distributeReservedTokensModalVisible,\r\n    setDistributeReservedTokensModalVisible,\r\n  ] = useState<boolean>()\r\n  const [editTokenAllocationModalVisible, setEditTokenAllocationModalVisible] =\r\n    useState<boolean>(false)\r\n  const { data: reservedTokens, loading: loadingReservedTokens } =\r\n    useProjectReservedTokens({\r\n      projectId,\r\n      reservedRate: reservedRate,\r\n    })\r\n  const canEditTokens = useHasPermission(V2OperatorPermission.SET_SPLITS)\r\n\r\n  const smallHeaderStyle: CSSProperties = {\r\n    fontSize: '.7rem',\r\n    fontWeight: 500,\r\n    cursor: 'default',\r\n    color: colors.text.secondary,\r\n  }\r\n\r\n  const tokensText = tokenSymbolText({\r\n    tokenSymbol,\r\n    capitalize: false,\r\n    plural: true,\r\n  })\r\n\r\n  const tokensTextSingular = tokenSymbolText({\r\n    tokenSymbol,\r\n    capitalize: true,\r\n    plural: false,\r\n  })\r\n\r\n  return (\r\n    <CardSection>\r\n      <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\r\n        {hideDistributeButton ? null : (\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              flexWrap: 'wrap',\r\n              gap: '10px',\r\n            }}\r\n          >\r\n            <div style={{ marginRight: '3rem' }}>\r\n              <Skeleton\r\n                active\r\n                loading={!isPreviewMode && loadingReservedTokens}\r\n                paragraph={{ rows: 1, width: 20 }}\r\n                title={false}\r\n                style={{ display: 'inline' }}\r\n              >\r\n                <span\r\n                  style={{\r\n                    fontSize: '1rem',\r\n                    fontWeight: 500,\r\n                  }}\r\n                >\r\n                  {formatWad(reservedTokens, { precision: 0 })}\r\n                </span>\r\n              </Skeleton>{' '}\r\n              <TooltipLabel\r\n                style={{\r\n                  ...smallHeaderStyle,\r\n                  whiteSpace: 'nowrap',\r\n                }}\r\n                label={\r\n                  <span style={{ textTransform: 'uppercase' }}>\r\n                    <Trans>{tokensText} reserved</Trans>\r\n                  </span>\r\n                }\r\n                tip={\r\n                  <Trans>\r\n                    The amount of tokens this project has reserved. These tokens\r\n                    can be distributed to reserved token beneficiaries.\r\n                  </Trans>\r\n                }\r\n              />\r\n              {tokenAddress && tokenAddress !== constants.AddressZero ? (\r\n                <div style={smallHeaderStyle}>\r\n                  {tokensTextSingular} contract address:{' '}\r\n                  <FormattedAddress address={tokenAddress} />\r\n                </div>\r\n              ) : null}\r\n            </div>\r\n            <Button\r\n              type=\"ghost\"\r\n              size=\"small\"\r\n              onClick={() => setDistributeReservedTokensModalVisible(true)}\r\n              disabled={isPreviewMode}\r\n            >\r\n              <Trans>Distribute {tokensText}</Trans>\r\n            </Button>\r\n          </div>\r\n        )}\r\n\r\n        <div>\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              gap: 10,\r\n              flexWrap: 'wrap',\r\n            }}\r\n          >\r\n            <TooltipLabel\r\n              label={\r\n                <h4 style={{ display: 'inline-block' }}>\r\n                  <Trans>Reserved {tokensText}</Trans> (\r\n                  {formatReservedRate(reservedRate)}%)\r\n                </h4>\r\n              }\r\n              tip={\r\n                <Trans>\r\n                  A project can reserve a percentage of tokens minted from every\r\n                  payment it receives. Reserved tokens can be distributed\r\n                  according to the allocation below at any time.\r\n                </Trans>\r\n              }\r\n            />\r\n            {canEditTokens && reservedRate?.gt(0) ? (\r\n              <Button\r\n                size=\"small\"\r\n                onClick={() => setEditTokenAllocationModalVisible(true)}\r\n                icon={<SettingOutlined />}\r\n                style={{ marginBottom: '1rem' }}\r\n              >\r\n                <span>\r\n                  <Trans>Edit allocation</Trans>\r\n                </span>\r\n              </Button>\r\n            ) : null}\r\n          </div>\r\n          {reservedTokensSplits ? (\r\n            <SplitList\r\n              splits={reservedTokensSplits}\r\n              projectOwnerAddress={projectOwnerAddress}\r\n              totalValue={undefined}\r\n              reservedRate={parseFloat(formatReservedRate(reservedRate))}\r\n            />\r\n          ) : null}\r\n        </div>\r\n      </Space>\r\n\r\n      <DistributeReservedTokensModal\r\n        visible={distributeReservedTokensModalVisible}\r\n        onCancel={() => setDistributeReservedTokensModalVisible(false)}\r\n        onConfirmed={() => window.location.reload()}\r\n      />\r\n      <EditTokenAllocationModal\r\n        visible={editTokenAllocationModalVisible}\r\n        onOk={() => setEditTokenAllocationModalVisible(false)}\r\n        onCancel={() => setEditTokenAllocationModalVisible(false)}\r\n      />\r\n    </CardSection>\r\n  )\r\n}\r\n","import { CardSection } from 'components/CardSection'\r\nimport FundingCycleDetailsCard from 'components/Project/FundingCycleDetailsCard'\r\nimport { LoadingOutlined } from '@ant-design/icons'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { useContext } from 'react'\r\nimport { V2FundingCycleRiskCount } from 'utils/v2/fundingCycle'\r\n\r\nimport FundingCycleDetails from './FundingCycleDetails'\r\nimport PayoutSplitsCard from './PayoutSplitsCard'\r\nimport ReservedTokensSplitsCard from './ReservedTokensSplitsCard'\r\n\r\nexport default function CurrentFundingCycle({\r\n  expandCard,\r\n}: {\r\n  expandCard?: boolean\r\n}) {\r\n  const {\r\n    fundingCycle,\r\n    payoutSplits,\r\n    distributionLimitCurrency,\r\n    distributionLimit,\r\n    reservedTokensSplits,\r\n    fundingCycleMetadata,\r\n  } = useContext(V2ProjectContext)\r\n\r\n  if (!fundingCycle) return <LoadingOutlined />\r\n\r\n  const reservedRate = fundingCycleMetadata?.reservedRate\r\n\r\n  return (\r\n    <div>\r\n      <CardSection>\r\n        <FundingCycleDetailsCard\r\n          fundingCycleNumber={fundingCycle.number}\r\n          fundingCycleDetails={\r\n            <FundingCycleDetails\r\n              fundingCycle={fundingCycle}\r\n              fundingCycleMetadata={fundingCycleMetadata}\r\n              distributionLimit={distributionLimit}\r\n              distributionLimitCurrency={distributionLimitCurrency}\r\n            />\r\n          }\r\n          fundingCycleDurationSeconds={fundingCycle.duration}\r\n          fundingCycleStartTime={fundingCycle.start}\r\n          isFundingCycleRecurring={true}\r\n          fundingCycleRiskCount={V2FundingCycleRiskCount(fundingCycle)}\r\n          expand={expandCard}\r\n        />\r\n      </CardSection>\r\n\r\n      <PayoutSplitsCard\r\n        payoutSplits={payoutSplits}\r\n        distributionLimitCurrency={distributionLimitCurrency}\r\n        distributionLimit={distributionLimit}\r\n        fundingCycleDuration={fundingCycle.duration}\r\n      />\r\n      <ReservedTokensSplitsCard\r\n        reservedTokensSplits={reservedTokensSplits}\r\n        reservedRate={reservedRate}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { Drawer } from 'antd'\r\nimport { useForm } from 'antd/lib/form/Form'\r\nimport ProjectDetailsForm, {\r\n  ProjectDetailsFormFields,\r\n} from 'components/forms/ProjectDetailsForm'\r\nimport { ThemeContext } from 'contexts/themeContext'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\n\r\nimport { useCallback, useContext, useEffect, useState } from 'react'\r\n\r\nimport { uploadProjectMetadata } from 'utils/ipfs'\r\nimport { useEditV2ProjectDetailsTx } from 'hooks/v2/transactor/EditV2ProjectDetailsTx'\r\n\r\nimport { drawerStyle } from 'constants/styles/drawerStyle'\r\nimport { PROJECT_PAY_CHARACTER_LIMIT } from 'constants/numbers'\r\n\r\nexport function V2ReconfigureProjectDetailsDrawer({\r\n  visible,\r\n  onFinish,\r\n}: {\r\n  visible: boolean\r\n  onFinish?: () => void\r\n}) {\r\n  const [projectForm] = useForm<ProjectDetailsFormFields>()\r\n\r\n  const [loadingSaveChanges, setLoadingSaveChanges] = useState<boolean>()\r\n  const { projectMetadata } = useContext(V2ProjectContext)\r\n\r\n  const { colors } = useContext(ThemeContext).theme\r\n\r\n  const EditV2ProjectDetailsTx = useEditV2ProjectDetailsTx()\r\n\r\n  async function onProjectFormSaved() {\r\n    setLoadingSaveChanges(true)\r\n\r\n    const fields = projectForm.getFieldsValue(true)\r\n\r\n    const uploadedMetadata = await uploadProjectMetadata({\r\n      name: fields.name,\r\n      description: fields.description,\r\n      logoUri: fields.logoUri,\r\n      infoUri: fields.infoUri,\r\n      twitter: fields.twitter,\r\n      discord: fields.discord,\r\n      payButton: fields.payButton.substring(0, PROJECT_PAY_CHARACTER_LIMIT), // Enforce limit\r\n      payDisclosure: fields.payDisclosure,\r\n    })\r\n\r\n    if (!uploadedMetadata.IpfsHash) {\r\n      setLoadingSaveChanges(false)\r\n      return\r\n    }\r\n\r\n    EditV2ProjectDetailsTx(\r\n      { cid: uploadedMetadata.IpfsHash },\r\n      {\r\n        onDone: () => setLoadingSaveChanges(false),\r\n        onConfirmed: () => {\r\n          if (onFinish) onFinish()\r\n          projectForm.resetFields()\r\n        },\r\n      },\r\n    )\r\n  }\r\n\r\n  const resetProjectForm = useCallback(() => {\r\n    projectForm.setFieldsValue({\r\n      name: projectMetadata?.name ?? '',\r\n      infoUri: projectMetadata?.infoUri ?? '',\r\n      logoUri: projectMetadata?.logoUri ?? '',\r\n      description: projectMetadata?.description ?? '',\r\n      twitter: projectMetadata?.twitter ?? '',\r\n      discord: projectMetadata?.discord ?? '',\r\n      payButton: projectMetadata?.payButton ?? '',\r\n      payDisclosure: projectMetadata?.payDisclosure ?? '',\r\n    })\r\n  }, [\r\n    projectMetadata?.name,\r\n    projectMetadata?.infoUri,\r\n    projectMetadata?.logoUri,\r\n    projectMetadata?.description,\r\n    projectMetadata?.twitter,\r\n    projectMetadata?.discord,\r\n    projectMetadata?.payDisclosure,\r\n    projectMetadata?.payButton,\r\n    projectForm,\r\n  ])\r\n\r\n  // initially fill form with any existing redux state\r\n  useEffect(() => {\r\n    resetProjectForm()\r\n  }, [resetProjectForm])\r\n\r\n  return (\r\n    <Drawer visible={visible} {...drawerStyle} onClose={onFinish}>\r\n      <h3>\r\n        <Trans>Reconfigure project details</Trans>\r\n      </h3>\r\n      <p style={{ color: colors.text.primary }}>\r\n        <Trans>\r\n          Project details reconfigurations will create a separate transaction.\r\n        </Trans>\r\n      </p>\r\n      <br />\r\n      <ProjectDetailsForm\r\n        form={projectForm}\r\n        onFinish={onProjectFormSaved}\r\n        hideProjectHandle\r\n        loading={loadingSaveChanges}\r\n      />\r\n    </Drawer>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { useContext } from 'react'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\n\r\nimport { detailedTimeString, secondsUntil } from 'utils/formatTime'\r\n\r\nimport { getBallotStrategyByAddress } from 'constants/v2/ballotStrategies/getBallotStrategiesByAddress'\r\n\r\nexport default function V2ReconfigureUpcomingMessage() {\r\n  const { fundingCycle } = useContext(V2ProjectContext)\r\n  if (!fundingCycle) return null\r\n\r\n  const currentFCNumber = fundingCycle.number.toNumber()\r\n\r\n  const ballotStrategy = getBallotStrategyByAddress(fundingCycle.ballot)\r\n  const ballotStrategyLength = ballotStrategy.durationSeconds\r\n\r\n  const duration = fundingCycle.duration.toNumber()\r\n\r\n  const secondsUntilNextFC = secondsUntil(fundingCycle.start.add(duration))\r\n\r\n  // Separating the full message out like this for translation purposes\r\n  // (they need full sentences, can't chop and change)\r\n  if (!duration || duration === 0) {\r\n    // If duration is unset/0, changes take effect immediately to current FC\r\n    return (\r\n      <Trans>\r\n        You don't have a funding cycle duration. Changes you make will take\r\n        effect immediately.\r\n      </Trans>\r\n    )\r\n  } else if (ballotStrategyLength === undefined) {\r\n    return (\r\n      <Trans>\r\n        Changes will take effect according to the project's custom ballot\r\n        contract.\r\n      </Trans>\r\n    )\r\n  } else if (ballotStrategyLength > secondsUntilNextFC) {\r\n    return (\r\n      <Trans>\r\n        Changes you make will take effect according to your{' '}\r\n        <strong>{ballotStrategy.name}</strong> reconfiguration rule (the first\r\n        funding cycle following{' '}\r\n        <strong>\r\n          {detailedTimeString({\r\n            timeSeconds: BigNumber.from(ballotStrategyLength),\r\n            fullWords: true,\r\n          })}\r\n        </strong>{' '}\r\n        from now).\r\n      </Trans>\r\n    )\r\n  } else {\r\n    return (\r\n      <Trans>\r\n        Any changes you make will take effect in{' '}\r\n        <strong>funding cycle #{currentFCNumber + 1}</strong>. The current\r\n        funding cycle (#{currentFCNumber}) won't be altered.\r\n      </Trans>\r\n    )\r\n  }\r\n}\r\n","import { useReconfigureV2FundingCycleTx } from 'hooks/v2/transactor/ReconfigureV2FundingCycleTx'\r\nimport { useCallback, useState } from 'react'\r\n\r\nimport { EditingProjectData } from './editingProjectData'\r\n\r\nexport const useReconfigureFundingCycle = ({\r\n  editingProjectData,\r\n  exit,\r\n}: {\r\n  editingProjectData: EditingProjectData\r\n  exit: VoidFunction\r\n}) => {\r\n  const {\r\n    editingPayoutGroupedSplits,\r\n    editingReservedTokensGroupedSplits,\r\n    editingFundingCycleMetadata,\r\n    editingFundingCycleData,\r\n    editingFundAccessConstraints,\r\n  } = editingProjectData\r\n  const reconfigureV2FundingCycleTx = useReconfigureV2FundingCycleTx()\r\n  const [reconfigureTxLoading, setReconfigureTxLoading] =\r\n    useState<boolean>(false)\r\n\r\n  const reconfigureFundingCycle = useCallback(async () => {\r\n    setReconfigureTxLoading(true)\r\n    if (\r\n      !(\r\n        editingFundingCycleData &&\r\n        editingFundingCycleMetadata &&\r\n        editingFundAccessConstraints\r\n      )\r\n    ) {\r\n      setReconfigureTxLoading(false)\r\n      throw new Error('Error deploying project.')\r\n    }\r\n\r\n    const txSuccessful = await reconfigureV2FundingCycleTx(\r\n      {\r\n        fundingCycleData: editingFundingCycleData,\r\n        fundingCycleMetadata: editingFundingCycleMetadata,\r\n        fundAccessConstraints: editingFundAccessConstraints,\r\n        groupedSplits: [\r\n          editingPayoutGroupedSplits,\r\n          editingReservedTokensGroupedSplits,\r\n        ],\r\n      },\r\n      {\r\n        onDone() {\r\n          console.info(\r\n            'Reconfigure transaction executed. Awaiting confirmation...',\r\n          )\r\n        },\r\n        onConfirmed() {\r\n          setReconfigureTxLoading(false)\r\n          exit()\r\n        },\r\n      },\r\n    )\r\n\r\n    if (!txSuccessful) {\r\n      setReconfigureTxLoading(false)\r\n    }\r\n  }, [\r\n    editingFundAccessConstraints,\r\n    editingFundingCycleData,\r\n    editingFundingCycleMetadata,\r\n    editingPayoutGroupedSplits,\r\n    editingReservedTokensGroupedSplits,\r\n    exit,\r\n    reconfigureV2FundingCycleTx,\r\n  ])\r\n\r\n  return { reconfigureLoading: reconfigureTxLoading, reconfigureFundingCycle }\r\n}\r\n","import { useContext } from 'react'\r\n\r\nimport {\r\n  V2FundAccessConstraint,\r\n  V2FundingCycleData,\r\n  V2FundingCycleMetadata,\r\n} from 'models/v2/fundingCycle'\r\nimport { GroupedSplits, SplitGroup } from 'models/v2/splits'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { V2UserContext } from 'contexts/v2/userContext'\r\nimport { TransactorInstance } from 'hooks/Transactor'\r\n\r\nconst DEFAULT_MUST_START_AT_OR_AFTER = '1'\r\nconst DEFAULT_MEMO = ''\r\n\r\nexport function useReconfigureV2FundingCycleTx(): TransactorInstance<{\r\n  fundingCycleData: V2FundingCycleData\r\n  fundingCycleMetadata: V2FundingCycleMetadata\r\n  fundAccessConstraints: V2FundAccessConstraint[]\r\n  groupedSplits?: GroupedSplits<SplitGroup>[]\r\n  mustStartAtOrAfter?: string // epoch seconds. anything less than \"now\" will start immediately.\r\n}> {\r\n  const { transactor, contracts } = useContext(V2UserContext)\r\n  const { projectId } = useContext(V2ProjectContext)\r\n\r\n  return (\r\n    {\r\n      fundingCycleData,\r\n      fundingCycleMetadata,\r\n      fundAccessConstraints,\r\n      groupedSplits = [],\r\n      mustStartAtOrAfter = DEFAULT_MUST_START_AT_OR_AFTER,\r\n    },\r\n    txOpts,\r\n  ) => {\r\n    if (!transactor || !projectId || !contracts?.JBController) {\r\n      txOpts?.onDone?.()\r\n      return Promise.resolve(false)\r\n    }\r\n\r\n    return transactor(\r\n      contracts.JBController,\r\n      'reconfigureFundingCyclesOf',\r\n      [\r\n        projectId,\r\n        fundingCycleData,\r\n        fundingCycleMetadata,\r\n        mustStartAtOrAfter,\r\n        groupedSplits,\r\n        fundAccessConstraints,\r\n        DEFAULT_MEMO,\r\n      ],\r\n      txOpts,\r\n    )\r\n  }\r\n}\r\n","import { t, Trans } from '@lingui/macro'\r\nimport { Divider, Modal, Space } from 'antd'\r\nimport { ThemeContext } from 'contexts/themeContext'\r\nimport { useCallback, useContext, useState } from 'react'\r\nimport { CaretRightFilled } from '@ant-design/icons'\r\n\r\nimport UnsavedChangesModal from 'components/v2/shared/UnsavedChangesModal'\r\n\r\nimport FundingDrawer from 'components/v2/shared/FundingCycleConfigurationDrawers/FundingDrawer'\r\n\r\nimport TokenDrawer from 'components/v2/shared/FundingCycleConfigurationDrawers/TokenDrawer'\r\n\r\nimport RulesDrawer from 'components/v2/shared/FundingCycleConfigurationDrawers/RulesDrawer'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\nimport { V2ReconfigureProjectDetailsDrawer } from './drawers/V2ReconfigureProjectDetailsDrawer'\r\nimport V2ReconfigureUpcomingMessage from './V2ReconfigureUpcomingMessage'\r\nimport ReconfigurePreview from './ReconfigurePreview'\r\nimport { useEditingProjectData } from './hooks/editingProjectData'\r\nimport { useFundingHasSavedChanges } from './hooks/fundingHasSavedChanges'\r\nimport { useReconfigureFundingCycle } from './hooks/reconfigureFundingCycle'\r\nimport { useInitialEditingData } from './hooks/initialEditingData'\r\nimport { V2ReconfigureProjectHandleDrawer } from '../V2ReconfigureProjectHandleDrawer'\r\n\r\nfunction ReconfigureButton({\r\n  title,\r\n  reconfigureHasChanges,\r\n  onClick,\r\n}: {\r\n  title: string\r\n  reconfigureHasChanges: boolean\r\n  onClick: () => void\r\n}) {\r\n  const { colors, radii } = useContext(ThemeContext).theme\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        cursor: 'pointer',\r\n        padding: 10,\r\n        fontWeight: 500,\r\n        borderRadius: radii.sm,\r\n        border:\r\n          '1px solid ' +\r\n          (reconfigureHasChanges\r\n            ? colors.stroke.action.primary\r\n            : colors.stroke.action.secondary),\r\n      }}\r\n      onClick={onClick}\r\n    >\r\n      <div>{title}</div>\r\n      <div>\r\n        <CaretRightFilled />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const FundingDrawersSubtitles = (\r\n  <p>\r\n    <Trans>\r\n      Updates you make to this section will only be applied to <i>upcoming</i>{' '}\r\n      funding cycles.\r\n    </Trans>\r\n  </p>\r\n)\r\n\r\nexport default function V2ProjectReconfigureModal({\r\n  visible,\r\n  onOk: exit,\r\n  onCancel,\r\n  hideProjectDetails,\r\n}: {\r\n  visible: boolean\r\n  onOk: VoidFunction\r\n  onCancel: VoidFunction\r\n  hideProjectDetails?: boolean\r\n}) {\r\n  // Checks URL to see if fundingDrawer is already opened\r\n  const location = useLocation()\r\n  const params = new URLSearchParams(location.search)\r\n  const initialFundingDrawerVisible = Boolean(params.get('fundingDrawerOpen'))\r\n\r\n  const { initialEditingData } = useInitialEditingData(visible)\r\n  const editingProjectData = useEditingProjectData()\r\n  const {\r\n    fundingHasSavedChanges,\r\n    fundingDrawerHasSavedChanges,\r\n    tokenDrawerHasSavedChanges,\r\n    rulesDrawerHasSavedChanges,\r\n  } = useFundingHasSavedChanges({\r\n    editingProjectData,\r\n    initialEditingData,\r\n  })\r\n  const { reconfigureLoading, reconfigureFundingCycle } =\r\n    useReconfigureFundingCycle({ editingProjectData, exit })\r\n\r\n  const [projectHandleDrawerVisible, setProjectHandleDrawerVisible] =\r\n    useState<boolean>(false)\r\n  const [projectDetailsDrawerVisible, setProjectDetailsDrawerVisible] =\r\n    useState<boolean>(false)\r\n  const [fundingDrawerVisible, setFundingDrawerVisible] = useState<boolean>(\r\n    initialFundingDrawerVisible,\r\n  )\r\n  const [tokenDrawerVisible, setTokenDrawerVisible] = useState<boolean>(false)\r\n  const [rulesDrawerVisible, setRulesDrawerVisible] = useState<boolean>(false)\r\n\r\n  const closeReconfigureDrawer = () => {\r\n    setFundingDrawerVisible(false)\r\n    setTokenDrawerVisible(false)\r\n    setRulesDrawerVisible(false)\r\n  }\r\n\r\n  const [unsavedChangesModalVisibile, setUnsavedChangesModalVisible] =\r\n    useState<boolean>(false)\r\n\r\n  const openUnsavedChangesModal = () => setUnsavedChangesModalVisible(true)\r\n  const closeUnsavedChangesModal = () => setUnsavedChangesModalVisible(false)\r\n\r\n  const closeUnsavedChangesModalAndExit = () => {\r\n    closeUnsavedChangesModal()\r\n    onCancel()\r\n  }\r\n\r\n  const handleGlobalModalClose = useCallback(() => {\r\n    if (!fundingHasSavedChanges) {\r\n      return onCancel()\r\n    }\r\n    openUnsavedChangesModal()\r\n  }, [fundingHasSavedChanges, onCancel])\r\n\r\n  return (\r\n    <Modal\r\n      title={<Trans>Project configuration</Trans>}\r\n      visible={visible}\r\n      onOk={reconfigureFundingCycle}\r\n      onCancel={handleGlobalModalClose}\r\n      okText={t`Deploy funding cycle configuration`}\r\n      okButtonProps={{\r\n        disabled: !fundingHasSavedChanges,\r\n        style: { marginBottom: '15px' },\r\n      }}\r\n      confirmLoading={reconfigureLoading}\r\n      width={650}\r\n      style={{ paddingBottom: 20, paddingTop: 20 }}\r\n      centered\r\n      destroyOnClose\r\n    >\r\n      <Space\r\n        direction=\"vertical\"\r\n        size=\"middle\"\r\n        style={{ width: '100%', marginBottom: 40 }}\r\n      >\r\n        {!hideProjectDetails && (\r\n          <>\r\n            <h4 style={{ marginBottom: 0 }}>\r\n              <Trans>Edit project details</Trans>\r\n            </h4>\r\n            <p>\r\n              <Trans>\r\n                Changes to project details will take effect immediately.\r\n              </Trans>\r\n            </p>\r\n          </>\r\n        )}\r\n        {!hideProjectDetails && (\r\n          <ReconfigureButton\r\n            reconfigureHasChanges={false}\r\n            title={t`Project handle`}\r\n            onClick={() => setProjectHandleDrawerVisible(true)}\r\n          />\r\n        )}\r\n        {!hideProjectDetails && (\r\n          <ReconfigureButton\r\n            reconfigureHasChanges={false}\r\n            title={t`Other details`}\r\n            onClick={() => setProjectDetailsDrawerVisible(true)}\r\n          />\r\n        )}\r\n\r\n        <Divider />\r\n\r\n        <h4 style={{ marginBottom: 0 }}>\r\n          <Trans>Reconfigure upcoming funding cycles</Trans>\r\n        </h4>\r\n        <p>\r\n          <V2ReconfigureUpcomingMessage />\r\n        </p>\r\n        <ReconfigureButton\r\n          title={t`Distribution limit, duration and payouts`}\r\n          reconfigureHasChanges={fundingDrawerHasSavedChanges}\r\n          onClick={() => setFundingDrawerVisible(true)}\r\n        />\r\n        <ReconfigureButton\r\n          title={t`Token`}\r\n          reconfigureHasChanges={tokenDrawerHasSavedChanges}\r\n          onClick={() => setTokenDrawerVisible(true)}\r\n        />\r\n        <ReconfigureButton\r\n          title={t`Rules`}\r\n          reconfigureHasChanges={rulesDrawerHasSavedChanges}\r\n          onClick={() => setRulesDrawerVisible(true)}\r\n        />\r\n      </Space>\r\n      <ReconfigurePreview\r\n        payoutSplits={editingProjectData.editingPayoutGroupedSplits.splits}\r\n        reserveSplits={\r\n          editingProjectData.editingReservedTokensGroupedSplits.splits\r\n        }\r\n        fundingCycleMetadata={editingProjectData.editingFundingCycleMetadata}\r\n        fundingCycleData={editingProjectData.editingFundingCycleData}\r\n        fundAccessConstraints={editingProjectData.editingFundAccessConstraints}\r\n      />\r\n      {hideProjectDetails ? null : (\r\n        <V2ReconfigureProjectDetailsDrawer\r\n          visible={projectDetailsDrawerVisible}\r\n          onFinish={() => setProjectDetailsDrawerVisible(false)}\r\n        />\r\n      )}\r\n      {hideProjectDetails ? null : (\r\n        <V2ReconfigureProjectHandleDrawer\r\n          visible={projectHandleDrawerVisible}\r\n          onFinish={() => setProjectHandleDrawerVisible(false)}\r\n        />\r\n      )}\r\n      <FundingDrawer\r\n        visible={fundingDrawerVisible}\r\n        onClose={closeReconfigureDrawer}\r\n      />\r\n      <TokenDrawer\r\n        visible={tokenDrawerVisible}\r\n        onClose={closeReconfigureDrawer}\r\n      />\r\n      <RulesDrawer\r\n        visible={rulesDrawerVisible}\r\n        onClose={closeReconfigureDrawer}\r\n      />\r\n      <UnsavedChangesModal\r\n        visible={unsavedChangesModalVisibile}\r\n        onOk={closeUnsavedChangesModalAndExit}\r\n        onCancel={closeUnsavedChangesModal}\r\n      />\r\n    </Modal>\r\n  )\r\n}\r\n","import useProjectDistributionLimit from 'hooks/v2/contractReader/ProjectDistributionLimit'\r\nimport useProjectSplits from 'hooks/v2/contractReader/ProjectSplits'\r\nimport { Split } from 'models/v2/splits'\r\nimport { useContext, useEffect, useState } from 'react'\r\nimport {\r\n  editingV2ProjectActions,\r\n  defaultFundingCycleMetadata,\r\n} from 'redux/slices/editingV2Project'\r\nimport { fromWad } from 'utils/formatNumber'\r\nimport { V2_CURRENCY_ETH, NO_CURRENCY } from 'utils/v2/currency'\r\nimport { decodeV2FundingCycleMetadata } from 'utils/v2/fundingCycle'\r\nimport {\r\n  SerializedV2FundAccessConstraint,\r\n  SerializedV2FundingCycleData,\r\n  SerializedV2FundingCycleMetadata,\r\n  serializeV2FundingCycleData,\r\n  serializeV2FundingCycleMetadata,\r\n} from 'utils/v2/serializers'\r\n\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\n\r\nimport useProjectQueuedFundingCycle from 'hooks/v2/contractReader/ProjectQueuedFundingCycle'\r\n\r\nimport { V2UserContext } from 'contexts/v2/userContext'\r\n\r\nimport { useAppDispatch } from 'hooks/AppDispatch'\r\n\r\nimport {\r\n  ETH_PAYOUT_SPLIT_GROUP,\r\n  RESERVED_TOKEN_SPLIT_GROUP,\r\n} from 'constants/v2/splits'\r\nimport { ETH_TOKEN_ADDRESS } from 'constants/v2/juiceboxTokens'\r\n\r\nexport interface InitialEditingData {\r\n  fundAccessConstraints: SerializedV2FundAccessConstraint[]\r\n  fundingCycleData: SerializedV2FundingCycleData\r\n  fundingCycleMetadata: SerializedV2FundingCycleMetadata\r\n  payoutGroupedSplits: {\r\n    payoutGroupedSplits: Split[]\r\n    reservedTokensGroupedSplits: Split[]\r\n  }\r\n}\r\n\r\nexport const useInitialEditingData = (visible: boolean) => {\r\n  const [initialEditingData, setInitialEditingData] = useState<{\r\n    fundAccessConstraints: SerializedV2FundAccessConstraint[]\r\n    fundingCycleData: SerializedV2FundingCycleData\r\n    fundingCycleMetadata: SerializedV2FundingCycleMetadata\r\n    payoutGroupedSplits: {\r\n      payoutGroupedSplits: Split[]\r\n      reservedTokensGroupedSplits: Split[]\r\n    }\r\n  }>()\r\n\r\n  const { contracts } = useContext(V2UserContext)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const {\r\n    projectId,\r\n    primaryTerminal,\r\n    fundingCycle,\r\n    payoutSplits,\r\n    reservedTokensSplits,\r\n    distributionLimit,\r\n    distributionLimitCurrency,\r\n  } = useContext(V2ProjectContext)\r\n\r\n  const { data: queuedFundingCycleResponse } = useProjectQueuedFundingCycle({\r\n    projectId,\r\n  })\r\n\r\n  const [queuedFundingCycle] = queuedFundingCycleResponse ?? []\r\n  const { data: queuedPayoutSplits } = useProjectSplits({\r\n    projectId,\r\n    splitGroup: ETH_PAYOUT_SPLIT_GROUP,\r\n    domain: queuedFundingCycle?.configuration?.toString(),\r\n  })\r\n\r\n  const { data: queuedReservedTokensSplits } = useProjectSplits({\r\n    projectId,\r\n    splitGroup: RESERVED_TOKEN_SPLIT_GROUP,\r\n    domain: queuedFundingCycle?.configuration?.toString(),\r\n  })\r\n\r\n  const { data: queuedDistributionLimitData } = useProjectDistributionLimit({\r\n    projectId,\r\n    configuration: queuedFundingCycle?.configuration.toString(),\r\n    terminal: primaryTerminal,\r\n  })\r\n\r\n  const [queuedDistributionLimit, queuedDistributionLimitCurrency] =\r\n    queuedDistributionLimitData ?? []\r\n\r\n  const effectiveFundingCycle = queuedFundingCycle?.number.gt(0)\r\n    ? queuedFundingCycle\r\n    : fundingCycle\r\n\r\n  const effectivePayoutSplits = queuedFundingCycle?.number.gt(0)\r\n    ? queuedPayoutSplits\r\n    : payoutSplits\r\n\r\n  const effectiveReservedTokensSplits = queuedFundingCycle?.number.gt(0)\r\n    ? queuedReservedTokensSplits\r\n    : reservedTokensSplits\r\n\r\n  let effectiveDistributionLimit = distributionLimit\r\n  if (effectiveFundingCycle?.duration.gt(0) && queuedDistributionLimit) {\r\n    effectiveDistributionLimit = queuedDistributionLimit\r\n  }\r\n\r\n  let effectiveDistributionLimitCurrency = distributionLimitCurrency\r\n  if (\r\n    effectiveFundingCycle?.duration.gt(0) &&\r\n    queuedDistributionLimitCurrency\r\n  ) {\r\n    effectiveDistributionLimitCurrency = queuedDistributionLimitCurrency\r\n  }\r\n\r\n  // Creates the local redux state from V2ProjectContext values\r\n  useEffect(() => {\r\n    if (!visible || !effectiveFundingCycle) return\r\n\r\n    // Build fundAccessConstraint\r\n    let fundAccessConstraint: SerializedV2FundAccessConstraint | undefined =\r\n      undefined\r\n    if (effectiveDistributionLimit) {\r\n      const distributionLimitCurrency =\r\n        effectiveDistributionLimitCurrency?.toNumber() ?? V2_CURRENCY_ETH\r\n\r\n      fundAccessConstraint = {\r\n        terminal: contracts?.JBETHPaymentTerminal.address ?? '',\r\n        token: ETH_TOKEN_ADDRESS,\r\n        distributionLimit: fromWad(effectiveDistributionLimit),\r\n        distributionLimitCurrency:\r\n          distributionLimitCurrency === NO_CURRENCY\r\n            ? V2_CURRENCY_ETH.toString()\r\n            : distributionLimitCurrency.toString(),\r\n        overflowAllowance: '0', // nothing for the time being.\r\n        overflowAllowanceCurrency: '0',\r\n      }\r\n    }\r\n    const editingFundAccessConstraints = fundAccessConstraint\r\n      ? [fundAccessConstraint]\r\n      : []\r\n    dispatch(\r\n      editingV2ProjectActions.setFundAccessConstraints(\r\n        fundAccessConstraint ? [fundAccessConstraint] : [],\r\n      ),\r\n    )\r\n\r\n    // Set editing funding cycle\r\n    const editingFundingCycleData = serializeV2FundingCycleData(\r\n      effectiveFundingCycle,\r\n    )\r\n    dispatch(\r\n      editingV2ProjectActions.setFundingCycleData(\r\n        serializeV2FundingCycleData(effectiveFundingCycle),\r\n      ),\r\n    )\r\n\r\n    // Set editing funding metadata\r\n    const editingFundingCycleMetadata = effectiveFundingCycle.metadata\r\n      ? serializeV2FundingCycleMetadata(\r\n          decodeV2FundingCycleMetadata(effectiveFundingCycle.metadata),\r\n        )\r\n      : defaultFundingCycleMetadata\r\n    if (effectiveFundingCycle?.metadata) {\r\n      dispatch(\r\n        editingV2ProjectActions.setFundingCycleMetadata(\r\n          serializeV2FundingCycleMetadata(\r\n            decodeV2FundingCycleMetadata(effectiveFundingCycle.metadata),\r\n          ),\r\n        ),\r\n      )\r\n    }\r\n\r\n    // Set editing payout splits\r\n    dispatch(\r\n      editingV2ProjectActions.setPayoutSplits(effectivePayoutSplits ?? []),\r\n    )\r\n\r\n    // Set reserve token splits\r\n    dispatch(\r\n      editingV2ProjectActions.setReservedTokensSplits(\r\n        effectiveReservedTokensSplits ?? [],\r\n      ),\r\n    )\r\n\r\n    setInitialEditingData({\r\n      fundAccessConstraints: editingFundAccessConstraints,\r\n      fundingCycleData: editingFundingCycleData,\r\n      fundingCycleMetadata: editingFundingCycleMetadata,\r\n      payoutGroupedSplits: {\r\n        payoutGroupedSplits: effectivePayoutSplits ?? [],\r\n        reservedTokensGroupedSplits: effectiveReservedTokensSplits ?? [],\r\n      },\r\n    })\r\n  }, [\r\n    contracts,\r\n    effectiveFundingCycle,\r\n    effectivePayoutSplits,\r\n    effectiveReservedTokensSplits,\r\n    effectiveDistributionLimit,\r\n    effectiveDistributionLimitCurrency,\r\n    fundingCycle,\r\n    visible,\r\n    dispatch,\r\n  ])\r\n\r\n  return { initialEditingData }\r\n}\r\n","import {\r\n  useAppSelector,\r\n  useEditingV2FundAccessConstraintsSelector,\r\n  useEditingV2FundingCycleDataSelector,\r\n  useEditingV2FundingCycleMetadataSelector,\r\n} from 'hooks/AppSelector'\r\nimport {\r\n  V2FundingCycleMetadata,\r\n  V2FundingCycleData,\r\n  V2FundAccessConstraint,\r\n} from 'models/v2/fundingCycle'\r\nimport {\r\n  ETHPayoutGroupedSplits,\r\n  ReservedTokensGroupedSplits,\r\n} from 'models/v2/splits'\r\n\r\nexport interface EditingProjectData {\r\n  editingPayoutGroupedSplits: ETHPayoutGroupedSplits\r\n  editingReservedTokensGroupedSplits: ReservedTokensGroupedSplits\r\n  editingFundingCycleMetadata: Omit<V2FundingCycleMetadata, 'version'>\r\n  editingFundingCycleData: V2FundingCycleData\r\n  editingFundAccessConstraints: V2FundAccessConstraint[]\r\n}\r\n\r\nexport const useEditingProjectData = () => {\r\n  // Gets values from the redux state to be used in the modal drawer fields\r\n  const {\r\n    payoutGroupedSplits: editingPayoutGroupedSplits,\r\n    reservedTokensGroupedSplits: editingReservedTokensGroupedSplits,\r\n  } = useAppSelector(state => state.editingV2Project)\r\n  const editingFundingCycleMetadata = useEditingV2FundingCycleMetadataSelector()\r\n  const editingFundingCycleData = useEditingV2FundingCycleDataSelector()\r\n  const editingFundAccessConstraints =\r\n    useEditingV2FundAccessConstraintsSelector()\r\n\r\n  return {\r\n    editingPayoutGroupedSplits,\r\n    editingReservedTokensGroupedSplits,\r\n    editingFundingCycleMetadata,\r\n    editingFundingCycleData,\r\n    editingFundAccessConstraints,\r\n  }\r\n}\r\n","import { isEqual } from 'lodash'\r\nimport { useMemo } from 'react'\r\nimport {\r\n  serializeFundAccessConstraint,\r\n  serializeV2FundingCycleMetadata,\r\n  serializeV2FundingCycleData,\r\n} from 'utils/v2/serializers'\r\n\r\nimport { EditingProjectData } from './editingProjectData'\r\nimport { InitialEditingData } from './initialEditingData'\r\n\r\nexport const useFundingHasSavedChanges = ({\r\n  editingProjectData,\r\n  initialEditingData,\r\n}: {\r\n  editingProjectData: EditingProjectData\r\n  initialEditingData: InitialEditingData | undefined\r\n}) => {\r\n  const {\r\n    editingPayoutGroupedSplits,\r\n    editingReservedTokensGroupedSplits,\r\n    editingFundingCycleMetadata,\r\n    editingFundingCycleData,\r\n    editingFundAccessConstraints,\r\n  } = editingProjectData\r\n\r\n  const fundingHasSavedChanges = useMemo(() => {\r\n    if (!initialEditingData) {\r\n      // Nothing to compare so return false\r\n      return false\r\n    }\r\n    const editedChanges: InitialEditingData = {\r\n      fundAccessConstraints: editingFundAccessConstraints.map(\r\n        serializeFundAccessConstraint,\r\n      ),\r\n      fundingCycleMetadata: serializeV2FundingCycleMetadata(\r\n        editingFundingCycleMetadata,\r\n      ),\r\n      fundingCycleData: serializeV2FundingCycleData(editingFundingCycleData),\r\n      payoutGroupedSplits: {\r\n        payoutGroupedSplits: editingPayoutGroupedSplits.splits,\r\n        reservedTokensGroupedSplits: editingReservedTokensGroupedSplits.splits,\r\n      },\r\n    }\r\n    return !isEqual(initialEditingData, editedChanges)\r\n  }, [\r\n    editingFundAccessConstraints,\r\n    editingFundingCycleData,\r\n    editingFundingCycleMetadata,\r\n    editingPayoutGroupedSplits,\r\n    editingReservedTokensGroupedSplits,\r\n    initialEditingData,\r\n  ])\r\n\r\n  const fundingDrawerHasSavedChanges = useMemo(() => {\r\n    const fundingCycleData = serializeV2FundingCycleData(\r\n      editingFundingCycleData,\r\n    )\r\n    const fundAccessConstraints = editingFundAccessConstraints.length\r\n      ? serializeFundAccessConstraint(editingFundAccessConstraints?.[0])\r\n      : undefined\r\n    const payoutGroupedSplits = editingPayoutGroupedSplits.splits\r\n\r\n    if (!fundAccessConstraints || !initialEditingData) {\r\n      return false\r\n    }\r\n    const durationUpdated =\r\n      fundingCycleData.duration !== initialEditingData.fundingCycleData.duration\r\n    const distributionLimitUpdated =\r\n      fundAccessConstraints.distributionLimit !==\r\n      initialEditingData.fundAccessConstraints?.[0].distributionLimit\r\n    const distributionLimitCurrencyUpdated =\r\n      fundAccessConstraints.distributionLimitCurrency !==\r\n      initialEditingData.fundAccessConstraints?.[0].distributionLimitCurrency\r\n    const payoutGroupedSplitsUpdated = !isEqual(\r\n      payoutGroupedSplits,\r\n      initialEditingData.payoutGroupedSplits?.payoutGroupedSplits ?? [],\r\n    )\r\n    return (\r\n      durationUpdated ||\r\n      distributionLimitUpdated ||\r\n      distributionLimitCurrencyUpdated ||\r\n      payoutGroupedSplitsUpdated\r\n    )\r\n  }, [\r\n    editingFundAccessConstraints,\r\n    editingFundingCycleData,\r\n    editingPayoutGroupedSplits.splits,\r\n    initialEditingData,\r\n  ])\r\n\r\n  const tokenDrawerHasSavedChanges = useMemo(() => {\r\n    const fundingCycleData = serializeV2FundingCycleData(\r\n      editingFundingCycleData,\r\n    )\r\n    const fundingCycleMetadata = serializeV2FundingCycleMetadata(\r\n      editingFundingCycleMetadata,\r\n    )\r\n    const fundAccessConstraints = editingFundAccessConstraints.length\r\n      ? serializeFundAccessConstraint(editingFundAccessConstraints?.[0])\r\n      : undefined\r\n    const reservedTokensGroupedSplits =\r\n      editingReservedTokensGroupedSplits.splits\r\n\r\n    if (!fundAccessConstraints || !initialEditingData) {\r\n      return false\r\n    }\r\n\r\n    const reservedRateUpdated =\r\n      fundingCycleMetadata.reservedRate !==\r\n      initialEditingData.fundingCycleMetadata.reservedRate\r\n    const reservedTokensGroupedSplitsUpdated = !isEqual(\r\n      reservedTokensGroupedSplits,\r\n      initialEditingData.payoutGroupedSplits.reservedTokensGroupedSplits ?? [],\r\n    )\r\n    const discountRateUpdated =\r\n      fundingCycleData.discountRate !==\r\n      initialEditingData.fundingCycleData.discountRate\r\n    const redemptionRateUpdated =\r\n      fundingCycleMetadata.redemptionRate !==\r\n      initialEditingData.fundingCycleMetadata.redemptionRate\r\n\r\n    return (\r\n      reservedRateUpdated ||\r\n      reservedTokensGroupedSplitsUpdated ||\r\n      discountRateUpdated ||\r\n      redemptionRateUpdated\r\n    )\r\n  }, [\r\n    editingFundAccessConstraints,\r\n    editingFundingCycleData,\r\n    editingFundingCycleMetadata,\r\n    editingReservedTokensGroupedSplits.splits,\r\n    initialEditingData,\r\n  ])\r\n\r\n  const rulesDrawerHasSavedChanges = useMemo(() => {\r\n    const fundingCycleData = serializeV2FundingCycleData(\r\n      editingFundingCycleData,\r\n    )\r\n    const fundingCycleMetadata = serializeV2FundingCycleMetadata(\r\n      editingFundingCycleMetadata,\r\n    )\r\n    const fundAccessConstraints = editingFundAccessConstraints.length\r\n      ? serializeFundAccessConstraint(editingFundAccessConstraints?.[0])\r\n      : undefined\r\n\r\n    if (!fundAccessConstraints || !initialEditingData) {\r\n      return false\r\n    }\r\n\r\n    const pausePaymentsUpdated =\r\n      fundingCycleMetadata.pausePay !==\r\n      initialEditingData.fundingCycleMetadata.pausePay\r\n    const allowMintingUpdated =\r\n      fundingCycleMetadata.allowMinting !==\r\n      initialEditingData.fundingCycleMetadata.allowMinting\r\n    const ballotUpdated =\r\n      fundingCycleData.ballot !== initialEditingData.fundingCycleData.ballot\r\n\r\n    return pausePaymentsUpdated || allowMintingUpdated || ballotUpdated\r\n  }, [\r\n    editingFundAccessConstraints,\r\n    editingFundingCycleData,\r\n    editingFundingCycleMetadata,\r\n    initialEditingData,\r\n  ])\r\n\r\n  return {\r\n    fundingHasSavedChanges,\r\n    fundingDrawerHasSavedChanges,\r\n    tokenDrawerHasSavedChanges,\r\n    rulesDrawerHasSavedChanges,\r\n  }\r\n}\r\n","import { Button, Tooltip } from 'antd'\r\nimport { useContext, useEffect, useRef, useState } from 'react'\r\nimport { Provider, useDispatch } from 'react-redux'\r\nimport store, { createStore } from 'redux/store'\r\n\r\nimport { SettingOutlined } from '@ant-design/icons'\r\n\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport useProjectQueuedFundingCycle from 'hooks/v2/contractReader/ProjectQueuedFundingCycle'\r\nimport { V2FundingCycle } from 'models/v2/fundingCycle'\r\nimport useProjectDistributionLimit from 'hooks/v2/contractReader/ProjectDistributionLimit'\r\nimport useProjectSplits from 'hooks/v2/contractReader/ProjectSplits'\r\nimport { editingV2ProjectActions } from 'redux/slices/editingV2Project'\r\nimport { fromWad } from 'utils/formatNumber'\r\n\r\nimport { t } from '@lingui/macro'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\n\r\nimport { v2ProjectRoute } from 'utils/routes'\r\n\r\nimport { ETH_PAYOUT_SPLIT_GROUP } from 'constants/v2/splits'\r\nimport V2ProjectReconfigureModal from './index'\r\n\r\n// This component uses a local version of the entire Redux store\r\n// so editing within the Reconfigure Funding modal does not\r\n// conflict with existing Redux state. This is so editing a\r\n// persisted Redux state and the Reconfigure Funding modal\r\n// are independent.\r\nexport default function V2ReconfigureFundingModalTrigger({\r\n  hideProjectDetails,\r\n  triggerButton,\r\n}: {\r\n  hideProjectDetails?: boolean\r\n  triggerButton?: (onClick: VoidFunction) => JSX.Element\r\n}) {\r\n  // Checks URL to see if Modal is already opened\r\n  const location = useLocation()\r\n  const params = new URLSearchParams(location.search)\r\n  const initialReconfigureModalVisible = Boolean(\r\n    params.get('reconfigModalOpen'),\r\n  )\r\n\r\n  const history = useHistory()\r\n\r\n  const dispatch = useDispatch()\r\n  const { projectId, fundingCycle, primaryTerminal } =\r\n    useContext(V2ProjectContext)\r\n\r\n  const [reconfigureModalVisible, setReconfigureModalVisible] =\r\n    useState<boolean>(false)\r\n\r\n  const localStoreRef = useRef<typeof store>()\r\n\r\n  if (initialReconfigureModalVisible && localStoreRef.current === undefined) {\r\n    // Change URL without refreshing page\r\n    history.replace(v2ProjectRoute({ projectId }))\r\n    handleModalOpen()\r\n  }\r\n\r\n  function handleModalOpen() {\r\n    localStoreRef.current = createStore()\r\n    setReconfigureModalVisible(true)\r\n  }\r\n\r\n  function handleOk() {\r\n    setReconfigureModalVisible(false)\r\n    window.location.reload()\r\n  }\r\n\r\n  // Load queued FC data of project\r\n  const { data: queuedFundingCycleResponse } = useProjectQueuedFundingCycle({\r\n    projectId,\r\n  })\r\n\r\n  const [queuedFundingCycle] = queuedFundingCycleResponse ?? []\r\n\r\n  let effectiveFundingCycle: V2FundingCycle | undefined\r\n  // If duration is 0, use current FC (not queued)\r\n  if (!fundingCycle?.duration || fundingCycle?.duration.eq(0)) {\r\n    effectiveFundingCycle = fundingCycle\r\n  } else {\r\n    effectiveFundingCycle = queuedFundingCycle\r\n  }\r\n\r\n  const { data: queuedDistributionLimitData } = useProjectDistributionLimit({\r\n    projectId,\r\n    configuration: effectiveFundingCycle?.configuration.toString(),\r\n    terminal: primaryTerminal,\r\n  })\r\n  const [queuedDistributionLimit, queuedDistributionLimitCurrency] =\r\n    queuedDistributionLimitData ?? []\r\n\r\n  const { data: queuedPayoutSplits } = useProjectSplits({\r\n    projectId,\r\n    splitGroup: ETH_PAYOUT_SPLIT_GROUP,\r\n    domain: effectiveFundingCycle?.configuration?.toString(),\r\n  })\r\n\r\n  // Load queued FC data (if it exists) into redux\r\n  useEffect(() => {\r\n    if (queuedDistributionLimitData) {\r\n      dispatch(\r\n        editingV2ProjectActions.setDistributionLimit(\r\n          fromWad(queuedDistributionLimit),\r\n        ),\r\n      )\r\n      dispatch(\r\n        editingV2ProjectActions.setDistributionLimitCurrency(\r\n          queuedDistributionLimitCurrency.toNumber().toString(),\r\n        ),\r\n      )\r\n    }\r\n    if (effectiveFundingCycle?.duration) {\r\n      dispatch(\r\n        editingV2ProjectActions.setDuration(\r\n          effectiveFundingCycle?.duration.toNumber().toString(),\r\n        ),\r\n      )\r\n    }\r\n    if (queuedPayoutSplits) {\r\n      dispatch(editingV2ProjectActions.setPayoutSplits(queuedPayoutSplits))\r\n    }\r\n  }, [\r\n    queuedDistributionLimitData,\r\n    dispatch,\r\n    effectiveFundingCycle,\r\n    queuedDistributionLimit,\r\n    queuedDistributionLimitCurrency,\r\n    queuedPayoutSplits,\r\n  ])\r\n\r\n  return (\r\n    <div style={{ textAlign: 'right' }}>\r\n      {triggerButton ? (\r\n        triggerButton(handleModalOpen)\r\n      ) : (\r\n        <Tooltip\r\n          title={t`Reconfigure project and funding details`}\r\n          placement=\"bottom\"\r\n        >\r\n          <Button\r\n            onClick={handleModalOpen}\r\n            icon={<SettingOutlined />}\r\n            type=\"text\"\r\n          />\r\n        </Tooltip>\r\n      )}\r\n      {localStoreRef.current && (\r\n        <Provider store={localStoreRef.current}>\r\n          <V2ProjectReconfigureModal\r\n            visible={reconfigureModalVisible}\r\n            onOk={handleOk}\r\n            onCancel={() => setReconfigureModalVisible(false)}\r\n            hideProjectDetails={hideProjectDetails}\r\n          />\r\n        </Provider>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\n\r\nexport type V2FundingCycleData = {\r\n  duration: BigNumber\r\n  weight: BigNumber\r\n  discountRate: BigNumber\r\n  ballot: string // hex, contract address\r\n}\r\n\r\nexport type V2FundingCycleMetadataGlobal = {\r\n  allowSetController: boolean\r\n  allowSetTerminals: boolean\r\n}\r\n\r\nexport type V2FundingCycleMetadata = {\r\n  version?: number\r\n  global: V2FundingCycleMetadataGlobal\r\n  reservedRate: BigNumber\r\n  redemptionRate: BigNumber\r\n  ballotRedemptionRate: BigNumber\r\n  pausePay: boolean\r\n  pauseDistributions: boolean\r\n  pauseRedeem: boolean\r\n  pauseBurn: boolean\r\n  allowMinting: boolean\r\n  allowChangeToken: boolean\r\n  allowTerminalMigration: boolean\r\n  allowControllerMigration: boolean\r\n  holdFees: boolean\r\n  useTotalOverflowForRedemptions: boolean\r\n  useDataSourceForPay: boolean\r\n  useDataSourceForRedeem: boolean\r\n  dataSource: string // hex, contract address\r\n}\r\n\r\nexport type V2FundAccessConstraint = {\r\n  terminal: string // address probably\r\n  token: string // address\r\n  distributionLimit: BigNumber\r\n  distributionLimitCurrency: BigNumber\r\n  overflowAllowance: BigNumber\r\n  overflowAllowanceCurrency: BigNumber\r\n}\r\n\r\nexport type V2FundingCycle = V2FundingCycleData & {\r\n  number: BigNumber\r\n  configuration: BigNumber\r\n  basedOn: BigNumber\r\n  start: BigNumber\r\n  metadata: BigNumber // encoded FundingCycleMetadata\r\n}\r\n\r\nexport enum BallotState {\r\n  'active',\r\n  'approved',\r\n  'failed',\r\n}\r\n","import { CardSection } from 'components/CardSection'\r\nimport FundingCycleDetailsCard from 'components/Project/FundingCycleDetailsCard'\r\nimport { LoadingOutlined } from '@ant-design/icons'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { useContext } from 'react'\r\nimport { V2FundingCycleRiskCount } from 'utils/v2/fundingCycle'\r\nimport useProjectDistributionLimit from 'hooks/v2/contractReader/ProjectDistributionLimit'\r\nimport { useProjectLatestConfiguredFundingCycle } from 'hooks/v2/contractReader/ProjectLatestConfiguredFundingCycle'\r\nimport useProjectSplits from 'hooks/v2/contractReader/ProjectSplits'\r\nimport useProjectQueuedFundingCycle from 'hooks/v2/contractReader/ProjectQueuedFundingCycle'\r\nimport {\r\n  BallotState,\r\n  V2FundingCycle,\r\n  V2FundingCycleMetadata,\r\n} from 'models/v2/fundingCycle'\r\n\r\nimport FundingCycleDetails from './FundingCycleDetails'\r\nimport PayoutSplitsCard from './PayoutSplitsCard'\r\nimport ReservedTokensSplitsCard from './ReservedTokensSplitsCard'\r\n\r\nimport {\r\n  ETH_PAYOUT_SPLIT_GROUP,\r\n  RESERVED_TOKEN_SPLIT_GROUP,\r\n} from 'constants/v2/splits'\r\n\r\nconst useUpcomingFundingCycle = (): [\r\n  V2FundingCycle | undefined,\r\n  V2FundingCycleMetadata | undefined,\r\n  BallotState?,\r\n] => {\r\n  const { projectId, fundingCycle } = useContext(V2ProjectContext)\r\n\r\n  const { data: latestConfiguredFundingCycleResponse } =\r\n    useProjectLatestConfiguredFundingCycle({\r\n      projectId,\r\n    })\r\n  const [\r\n    latestConfiguredFundingCycle,\r\n    latestConfiguredFundingCycleMetadata,\r\n    latestConfiguredFundingCycleBallotState,\r\n  ] = latestConfiguredFundingCycleResponse ?? []\r\n\r\n  const isCurrentFundingCycleLatest =\r\n    latestConfiguredFundingCycle &&\r\n    fundingCycle &&\r\n    fundingCycle.number.eq(latestConfiguredFundingCycle.number)\r\n\r\n  const { data: queuedFundingCycleResponse } = useProjectQueuedFundingCycle({\r\n    projectId: isCurrentFundingCycleLatest ? projectId : undefined,\r\n  })\r\n  const [queuedFundingCycle, queuedFundingCycleMetadata] =\r\n    queuedFundingCycleResponse ?? []\r\n\r\n  const hasLatestBallotFailed =\r\n    latestConfiguredFundingCycleBallotState === BallotState.failed\r\n\r\n  if (\r\n    (isCurrentFundingCycleLatest || hasLatestBallotFailed) &&\r\n    queuedFundingCycle\r\n  ) {\r\n    return [queuedFundingCycle, queuedFundingCycleMetadata]\r\n  }\r\n\r\n  return [\r\n    latestConfiguredFundingCycle,\r\n    latestConfiguredFundingCycleMetadata,\r\n    latestConfiguredFundingCycleBallotState,\r\n  ]\r\n}\r\n\r\nexport default function UpcomingFundingCycle({\r\n  expandCard,\r\n}: {\r\n  expandCard?: boolean\r\n}) {\r\n  const { projectId, primaryTerminal } = useContext(V2ProjectContext)\r\n\r\n  const [upcomingFundingCycle, upcomingFundingCycleMetadata, ballotState] =\r\n    useUpcomingFundingCycle()\r\n\r\n  const { data: queuedPayoutSplits } = useProjectSplits({\r\n    projectId,\r\n    splitGroup: ETH_PAYOUT_SPLIT_GROUP,\r\n    domain: upcomingFundingCycle?.configuration?.toString(),\r\n  })\r\n\r\n  const { data: queuedReservedTokensSplits } = useProjectSplits({\r\n    projectId,\r\n    splitGroup: RESERVED_TOKEN_SPLIT_GROUP,\r\n    domain: upcomingFundingCycle?.configuration?.toString(),\r\n  })\r\n\r\n  const { data: queuedDistributionLimitData } = useProjectDistributionLimit({\r\n    projectId,\r\n    configuration: upcomingFundingCycle?.configuration.toString(),\r\n    terminal: primaryTerminal,\r\n  })\r\n  const [queuedDistributionLimit, queuedDistributionLimitCurrency] =\r\n    queuedDistributionLimitData ?? []\r\n\r\n  if (!upcomingFundingCycle) return <LoadingOutlined />\r\n\r\n  const queuedReservedRate = upcomingFundingCycleMetadata?.reservedRate\r\n\r\n  return (\r\n    <div>\r\n      <CardSection>\r\n        <FundingCycleDetailsCard\r\n          fundingCycleNumber={upcomingFundingCycle.number}\r\n          fundingCycleDetails={\r\n            <FundingCycleDetails\r\n              fundingCycle={upcomingFundingCycle}\r\n              fundingCycleMetadata={upcomingFundingCycleMetadata}\r\n              distributionLimit={queuedDistributionLimit}\r\n              distributionLimitCurrency={queuedDistributionLimitCurrency}\r\n            />\r\n          }\r\n          fundingCycleDurationSeconds={upcomingFundingCycle.duration}\r\n          fundingCycleStartTime={upcomingFundingCycle.start}\r\n          isFundingCycleRecurring\r\n          fundingCycleRiskCount={V2FundingCycleRiskCount(upcomingFundingCycle)}\r\n          expand={expandCard}\r\n          ballotState={ballotState}\r\n          ballotStrategyAddress={upcomingFundingCycle.ballot}\r\n        />\r\n      </CardSection>\r\n\r\n      <PayoutSplitsCard\r\n        payoutSplits={queuedPayoutSplits}\r\n        distributionLimitCurrency={queuedDistributionLimitCurrency}\r\n        distributionLimit={queuedDistributionLimit}\r\n        fundingCycleDuration={upcomingFundingCycle.duration}\r\n        hideDistributeButton\r\n      />\r\n      <ReservedTokensSplitsCard\r\n        reservedTokensSplits={queuedReservedTokensSplits}\r\n        reservedRate={queuedReservedRate}\r\n        hideDistributeButton\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import { V2ContractName } from 'models/v2/contracts'\r\nimport {\r\n  BallotState,\r\n  V2FundingCycle,\r\n  V2FundingCycleMetadata,\r\n} from 'models/v2/fundingCycle'\r\n\r\nimport useV2ContractReader from './V2ContractReader'\r\n\r\nexport function useProjectLatestConfiguredFundingCycle({\r\n  projectId,\r\n}: {\r\n  projectId?: number\r\n}) {\r\n  return useV2ContractReader<\r\n    [V2FundingCycle, V2FundingCycleMetadata, BallotState]\r\n  >({\r\n    contract: V2ContractName.JBController,\r\n    functionName: 'latestConfiguredFundingCycleOf',\r\n    args: projectId ? [projectId] : null,\r\n  })\r\n}\r\n","import { CaretRightOutlined } from '@ant-design/icons'\r\nimport { t, Trans } from '@lingui/macro'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\n\r\nimport { Space } from 'antd'\r\nimport Modal from 'antd/lib/modal/Modal'\r\nimport CurrencySymbol from 'components/CurrencySymbol'\r\nimport Loading from 'components/Loading'\r\nimport { ThemeContext } from 'contexts/themeContext'\r\n\r\nimport { useContext, useEffect, useState } from 'react'\r\nimport { formatHistoricalDate } from 'utils/formatDate'\r\nimport { formatWad } from 'utils/formatNumber'\r\n\r\nimport FundingCycleDetails from 'components/v2/V2Project/V2FundingCycleSection/FundingCycleDetails'\r\nimport { V2FundingCycle } from 'models/v2/fundingCycle'\r\nimport { V2CurrencyName } from 'utils/v2/currency'\r\nimport { V2CurrencyOption } from 'models/v2/currencyOption'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport useProjectDistributionLimit from 'hooks/v2/contractReader/ProjectDistributionLimit'\r\nimport useUsedDistributionLimit from 'hooks/v2/contractReader/UsedDistributionLimit'\r\nimport { V2UserContext } from 'contexts/v2/userContext'\r\nimport { formatDiscountRate, MAX_DISTRIBUTION_LIMIT } from 'utils/v2/math'\r\nimport { decodeV2FundingCycleMetadata } from 'utils/v2/fundingCycle'\r\n\r\n// Fill in gaps between first funding cycle of each configuration:\r\n//     - derives starts from duration and start time of the first FC of that configuration\r\n//     - derives weights from discount rate and weight of the first FC of the configuration\r\n//     - derives number by incrementing\r\n//     - everything else the same as the first FC of the configuration\r\nconst deriveFundingCyclesBetweenEachConfiguration = ({\r\n  firstFCOfEachConfiguration,\r\n  currentFundingCycle,\r\n}: {\r\n  firstFCOfEachConfiguration: V2FundingCycle[]\r\n  currentFundingCycle: V2FundingCycle\r\n}) => {\r\n  const allFundingCycles: V2FundingCycle[] = []\r\n\r\n  firstFCOfEachConfiguration.forEach(\r\n    (firstFundingCycleOfConfiguration, configurationIndex) => {\r\n      allFundingCycles.push(firstFundingCycleOfConfiguration)\r\n\r\n      const currentReconfigurationStart = firstFundingCycleOfConfiguration.start\r\n      const nextConfigurationStart =\r\n        configurationIndex < firstFCOfEachConfiguration.length - 1\r\n          ? firstFCOfEachConfiguration[configurationIndex + 1].start\r\n          : currentFundingCycle.start\r\n      const currentDuration = firstFundingCycleOfConfiguration.duration\r\n      const currentDiscountRate = firstFundingCycleOfConfiguration.discountRate\r\n\r\n      let numInterimFundingCycles: number\r\n\r\n      if (currentDuration && !currentDuration.eq(0)) {\r\n        numInterimFundingCycles = nextConfigurationStart\r\n          .sub(currentReconfigurationStart)\r\n          .div(currentDuration)\r\n          .toNumber()\r\n      } else {\r\n        numInterimFundingCycles = 0\r\n      }\r\n\r\n      const isLastConfiguration =\r\n        configurationIndex === firstFCOfEachConfiguration.length - 1\r\n\r\n      let interimIndex = 0\r\n\r\n      // Initially set to first of the reconfiguration\r\n      let interimWeight: BigNumber = firstFundingCycleOfConfiguration.weight\r\n      let interimStart: BigNumber = firstFundingCycleOfConfiguration.start\r\n      let interimNumber: BigNumber = firstFundingCycleOfConfiguration.number\r\n\r\n      const interimFundingCycle: V2FundingCycle =\r\n        firstFundingCycleOfConfiguration\r\n\r\n      while (interimIndex < numInterimFundingCycles) {\r\n        // This is to prevent doubling up of an extrapolated FC and the first FC\r\n        // of the next configuration.\r\n        if (\r\n          !isLastConfiguration &&\r\n          interimIndex === numInterimFundingCycles - 1\r\n        ) {\r\n          break\r\n        }\r\n        const nextInterimWeight = interimWeight.sub(\r\n          interimWeight.mul(formatDiscountRate(currentDiscountRate)).div(100),\r\n        )\r\n        const nextInterimStart = interimStart.add(currentDuration)\r\n        const nextInterimNumber = interimNumber.add(1)\r\n\r\n        const nextFundingCycle = {\r\n          duration: interimFundingCycle.duration,\r\n          weight: nextInterimWeight,\r\n          discountRate: interimFundingCycle.discountRate,\r\n          ballot: interimFundingCycle.ballot,\r\n          number: nextInterimNumber,\r\n          configuration: interimFundingCycle.configuration,\r\n          start: nextInterimStart,\r\n          metadata: interimFundingCycle.metadata,\r\n        } as V2FundingCycle\r\n\r\n        interimWeight = nextInterimWeight\r\n        interimStart = nextInterimStart\r\n        interimNumber = nextInterimNumber\r\n        interimIndex++\r\n\r\n        allFundingCycles.push(nextFundingCycle)\r\n      }\r\n    },\r\n  )\r\n\r\n  return allFundingCycles\r\n}\r\n\r\nfunction HistoricalFundingCycle({\r\n  fundingCycle,\r\n  numFundingCycles,\r\n  index,\r\n  onClick,\r\n}: {\r\n  fundingCycle: V2FundingCycle\r\n  numFundingCycles: number\r\n  index: number\r\n  onClick: VoidFunction\r\n}) {\r\n  const { projectId, primaryTerminal } = useContext(V2ProjectContext)\r\n\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n\r\n  const { data: distributionLimitData } = useProjectDistributionLimit({\r\n    projectId,\r\n    configuration: fundingCycle?.configuration?.toString(),\r\n    terminal: primaryTerminal,\r\n  })\r\n\r\n  const { data: usedDistributionLimit } = useUsedDistributionLimit({\r\n    projectId,\r\n    terminal: primaryTerminal,\r\n    fundingCycleNumber: fundingCycle?.number,\r\n  })\r\n\r\n  const [distributionLimit, distributionLimitCurrency] =\r\n    distributionLimitData ?? []\r\n\r\n  const distributionLimitIsInfinite = distributionLimit?.eq(\r\n    MAX_DISTRIBUTION_LIMIT,\r\n  )\r\n  const distributionLimitIsZero = !distributionLimit || distributionLimit?.eq(0)\r\n\r\n  const isLastFundingCycle = index < numFundingCycles - 1\r\n\r\n  return (\r\n    <div\r\n      key={fundingCycle.number.toString()}\r\n      role=\"button\"\r\n      onClick={onClick}\r\n      style={{\r\n        display: 'flex',\r\n        alignItems: 'baseline',\r\n        justifyContent: 'space-between',\r\n        cursor: 'pointer',\r\n        ...(isLastFundingCycle\r\n          ? {\r\n              paddingBottom: 20,\r\n              borderBottom: '1px solid ' + colors.stroke.tertiary,\r\n            }\r\n          : {}),\r\n      }}\r\n    >\r\n      <Space align=\"baseline\">\r\n        <h3>#{fundingCycle.number.toString()}</h3>\r\n\r\n        <div style={{ fontSize: '.8rem', marginLeft: 10 }}>\r\n          <CurrencySymbol\r\n            currency={V2CurrencyName(\r\n              distributionLimitCurrency?.toNumber() as V2CurrencyOption,\r\n            )}\r\n          />\r\n          {!(distributionLimitIsInfinite || distributionLimitIsZero) ? (\r\n            <>\r\n              <Trans>\r\n                {formatWad(usedDistributionLimit, { precision: 2 })}/\r\n                {formatWad(distributionLimit, { precision: 2 })} withdrawn\r\n              </Trans>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Trans>\r\n                {formatWad(usedDistributionLimit, { precision: 2 })} withdrawn\r\n              </Trans>\r\n            </>\r\n          )}\r\n        </div>\r\n      </Space>\r\n\r\n      <Space align=\"baseline\" style={{ fontSize: '.8rem' }}>\r\n        {formatHistoricalDate(\r\n          fundingCycle.start.add(fundingCycle.duration).mul(1000).toNumber(),\r\n        )}\r\n        <CaretRightOutlined />\r\n      </Space>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function FundingCycleHistory() {\r\n  const {\r\n    projectId,\r\n    fundingCycle: currentFundingCycle,\r\n    primaryTerminal,\r\n  } = useContext(V2ProjectContext)\r\n  const { contracts } = useContext(V2UserContext)\r\n\r\n  const [selectedIndex, setSelectedIndex] = useState<number>()\r\n  const [pastFundingCycles, setPastFundingCycles] = useState<V2FundingCycle[]>(\r\n    [],\r\n  )\r\n\r\n  const selectedFundingCycle =\r\n    selectedIndex !== undefined ? pastFundingCycles[selectedIndex] : undefined\r\n\r\n  const { data: distributionLimitData } = useProjectDistributionLimit({\r\n    projectId,\r\n    configuration: selectedFundingCycle?.configuration?.toString(),\r\n    terminal: primaryTerminal,\r\n  })\r\n\r\n  const [distributionLimit, distributionLimitCurrency] =\r\n    distributionLimitData ?? []\r\n\r\n  useEffect(() => {\r\n    const loadPastFundingCycles = async () => {\r\n      if (!(projectId && currentFundingCycle)) return []\r\n\r\n      const firstFCOfCurrentConfiguration =\r\n        await contracts?.JBFundingCycleStore.get(\r\n          projectId,\r\n          currentFundingCycle.configuration,\r\n        )\r\n\r\n      let firstFCOfEachConfiguration: V2FundingCycle[] = [\r\n        firstFCOfCurrentConfiguration,\r\n      ]\r\n\r\n      let previousReconfiguration = currentFundingCycle.basedOn\r\n\r\n      // Get first funding cycle of each configuration using basedOn\r\n      while (!previousReconfiguration.eq(BigNumber.from(0))) {\r\n        const previousReconfigurationFirstFundingCycle: V2FundingCycle =\r\n          (await contracts?.JBFundingCycleStore.get(\r\n            projectId,\r\n            previousReconfiguration,\r\n          )) as V2FundingCycle\r\n\r\n        if (previousReconfigurationFirstFundingCycle) {\r\n          // Add it to the start of list\r\n          firstFCOfEachConfiguration = [\r\n            previousReconfigurationFirstFundingCycle,\r\n          ].concat(firstFCOfEachConfiguration)\r\n          previousReconfiguration =\r\n            previousReconfigurationFirstFundingCycle.basedOn\r\n        }\r\n      }\r\n\r\n      const allFundingCycles = deriveFundingCyclesBetweenEachConfiguration({\r\n        firstFCOfEachConfiguration,\r\n        currentFundingCycle,\r\n      })\r\n\r\n      // Cut off the current funding cycle\r\n      const allPastFundingCycles = allFundingCycles.slice(0, -1)\r\n\r\n      return allPastFundingCycles.reverse()\r\n    }\r\n\r\n    loadPastFundingCycles().then(pastFundingCycles => {\r\n      setPastFundingCycles(pastFundingCycles)\r\n    })\r\n  }, [contracts, projectId, currentFundingCycle])\r\n\r\n  if (!projectId || !currentFundingCycle || !currentFundingCycle?.number)\r\n    return null\r\n\r\n  const allCyclesLoaded =\r\n    pastFundingCycles.length >= currentFundingCycle.number.toNumber() - 1\r\n\r\n  const FundingCycles = () => (\r\n    <Space\r\n      direction=\"vertical\"\r\n      size=\"large\"\r\n      style={{ width: '100%', maxHeight: '80vh', overflow: 'scroll' }}\r\n    >\r\n      {pastFundingCycles.length ? (\r\n        pastFundingCycles.map((fundingCycle: V2FundingCycle, i) => (\r\n          <HistoricalFundingCycle\r\n            key={fundingCycle.configuration.toString()}\r\n            fundingCycle={fundingCycle}\r\n            numFundingCycles={pastFundingCycles.length}\r\n            index={i}\r\n            onClick={() => setSelectedIndex(i)}\r\n          />\r\n        ))\r\n      ) : (\r\n        <div>\r\n          <Trans>No past funding cycles</Trans>\r\n        </div>\r\n      )}\r\n    </Space>\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <FundingCycles />\r\n\r\n      {allCyclesLoaded ? null : <Loading />}\r\n\r\n      {selectedFundingCycle && (\r\n        <Modal\r\n          visible={Boolean(selectedFundingCycle)}\r\n          width={600}\r\n          title={`Cycle #${selectedFundingCycle.number.toString()}`}\r\n          onCancel={() => setSelectedIndex(undefined)}\r\n          onOk={() => setSelectedIndex(undefined)}\r\n          cancelButtonProps={{ hidden: true }}\r\n          okText={t`Done`}\r\n        >\r\n          <FundingCycleDetails\r\n            fundingCycle={selectedFundingCycle}\r\n            fundingCycleMetadata={decodeV2FundingCycleMetadata(\r\n              selectedFundingCycle.metadata,\r\n            )}\r\n            distributionLimit={distributionLimit}\r\n            distributionLimitCurrency={distributionLimitCurrency}\r\n          />\r\n        </Modal>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { Space } from 'antd'\r\nimport { CardSection } from 'components/CardSection'\r\nimport SectionHeader from 'components/SectionHeader'\r\n\r\nexport default function NoFundingCycle() {\r\n  return (\r\n    <Space direction=\"vertical\" style={{ width: '100%' }}>\r\n      <SectionHeader\r\n        text={<Trans>Funding cycle</Trans>}\r\n        tip={\r\n          <Trans>\r\n            A project's lifetime is defined in funding cycles. If a funding\r\n            target is set, the project can withdraw no more than the target for\r\n            the duration of the cycle.\r\n          </Trans>\r\n        }\r\n        style={{\r\n          marginBottom: 10,\r\n        }}\r\n      />\r\n      <CardSection>\r\n        <Trans>No active funding cycle.</Trans>\r\n      </CardSection>\r\n    </Space>\r\n  )\r\n}\r\n","import { Button, Tooltip } from 'antd'\r\nimport { SettingOutlined } from '@ant-design/icons'\r\n\r\nimport { t, Trans } from '@lingui/macro'\r\nimport { ExclamationCircleOutlined } from '@ant-design/icons'\r\nimport { ThemeContext } from 'contexts/themeContext'\r\nimport {\r\n  useHasPermission,\r\n  V2OperatorPermission,\r\n} from 'hooks/v2/contractReader/HasPermission'\r\nimport { useContext } from 'react'\r\n\r\nimport {\r\n  hasFundingDuration,\r\n  V2FundingCycleRiskCount,\r\n} from 'utils/v2/fundingCycle'\r\nimport { serializeV2FundingCycleData } from 'utils/v2/serializers'\r\nimport Loading from 'components/Loading'\r\n\r\nimport FundingCycleSection, {\r\n  TabType,\r\n} from 'components/Project/FundingCycleSection'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { CardSection } from 'components/CardSection'\r\n\r\nimport useProjectQueuedFundingCycle from 'hooks/v2/contractReader/ProjectQueuedFundingCycle'\r\n\r\nimport CurrentFundingCycle from './CurrentFundingCycle'\r\nimport V2ReconfigureFundingModalTrigger from '../V2ProjectReconfigureModal/V2ReconfigureModalTrigger'\r\nimport UpcomingFundingCycle from './UpcomingFundingCycle'\r\nimport FundingCycleHistory from './FundingCycleHistory'\r\nimport NoFundingCycle from './NoFundingCycle'\r\n\r\nexport default function V2FundingCycleSection({\r\n  expandCard,\r\n}: {\r\n  expandCard?: boolean\r\n}) {\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n  const {\r\n    fundingCycle,\r\n    isPreviewMode,\r\n    loading: { fundingCycleLoading },\r\n    projectId,\r\n  } = useContext(V2ProjectContext)\r\n\r\n  const canReconfigure = useHasPermission(V2OperatorPermission.RECONFIGURE)\r\n\r\n  const {\r\n    data: queuedFundingCycleResponse,\r\n    loading: queuedFundingCycleLoading,\r\n  } = useProjectQueuedFundingCycle({\r\n    projectId,\r\n  })\r\n\r\n  const [queuedFundingCycle] = queuedFundingCycleResponse || []\r\n\r\n  if (\r\n    fundingCycleLoading ||\r\n    (queuedFundingCycleLoading && !isPreviewMode) ||\r\n    !fundingCycle ||\r\n    (!queuedFundingCycle && !isPreviewMode)\r\n  ) {\r\n    return <Loading />\r\n  }\r\n\r\n  if (fundingCycle.number.eq(0) && queuedFundingCycle?.number.eq(0)) {\r\n    return <NoFundingCycle />\r\n  }\r\n\r\n  const tabText = ({ text }: { text: string }) => {\r\n    const hasRisks = fundingCycle && V2FundingCycleRiskCount(fundingCycle)\r\n    if (!hasRisks) {\r\n      return text\r\n    }\r\n\r\n    return (\r\n      <Tooltip\r\n        title={\r\n          <Trans>\r\n            This funding cycle may pose risks to contributors. Check the funding\r\n            cycle details before paying this project.\r\n          </Trans>\r\n        }\r\n      >\r\n        <span>\r\n          {text}\r\n          <ExclamationCircleOutlined\r\n            style={{\r\n              color: colors.text.warn,\r\n              marginLeft: 4,\r\n            }}\r\n          />\r\n        </span>\r\n      </Tooltip>\r\n    )\r\n  }\r\n\r\n  const fundingCycleData = serializeV2FundingCycleData(fundingCycle)\r\n\r\n  const tabs = [\r\n    fundingCycle.number.gt(0) && {\r\n      key: 'current',\r\n      label: tabText({ text: t`Current` }),\r\n      content: <CurrentFundingCycle expandCard={expandCard} />,\r\n    },\r\n    !isPreviewMode &&\r\n      (hasFundingDuration(fundingCycleData) || fundingCycle.number.eq(0)) && {\r\n        key: 'upcoming',\r\n        label: tabText({ text: t`Upcoming` }),\r\n        content: <UpcomingFundingCycle expandCard={expandCard} />,\r\n      },\r\n    {\r\n      key: 'history',\r\n      label: tabText({ text: t`History` }),\r\n      content: (\r\n        <CardSection>\r\n          <FundingCycleHistory />\r\n        </CardSection>\r\n      ),\r\n    },\r\n  ].filter(Boolean) as TabType[]\r\n\r\n  return (\r\n    <FundingCycleSection\r\n      tabs={tabs}\r\n      reconfigureButton={\r\n        canReconfigure ? (\r\n          <V2ReconfigureFundingModalTrigger\r\n            hideProjectDetails\r\n            triggerButton={(onClick: VoidFunction) => (\r\n              <Button size=\"small\" onClick={onClick} icon={<SettingOutlined />}>\r\n                <span>\r\n                  {hasFundingDuration(fundingCycleData) ? (\r\n                    <Trans>Reconfigure upcoming</Trans>\r\n                  ) : (\r\n                    <Trans>Reconfigure</Trans>\r\n                  )}\r\n                </span>\r\n              </Button>\r\n            )}\r\n          />\r\n        ) : null\r\n      }\r\n    />\r\n  )\r\n}\r\n","import { NetworkContext } from 'contexts/networkContext'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { useContext } from 'react'\r\nimport { bigNumbersDiff } from 'utils/bigNumbers'\r\n\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\n\r\nimport { V2ContractName } from 'models/v2/contracts'\r\n\r\nimport useContractReader from './V2ContractReader'\r\n\r\n/** Returns unclaimed balance of user with `userAddress`. */\r\nexport default function useUserUnclaimedTokenBalance() {\r\n  const { userAddress } = useContext(NetworkContext)\r\n  const { projectId } = useContext(V2ProjectContext)\r\n\r\n  return useContractReader<BigNumber>({\r\n    contract: V2ContractName.JBTokenStore,\r\n    functionName: 'unclaimedBalanceOf',\r\n    args:\r\n      userAddress && projectId\r\n        ? [userAddress, BigNumber.from(projectId).toHexString()]\r\n        : null,\r\n    valueDidChange: bigNumbersDiff,\r\n    // updateOn: TODO: useShouldUpdateTokens(projectId, terminal?.name, userAddress),\r\n  })\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { V2BallotState } from 'models/ballot'\r\nimport { useContext } from 'react'\r\nimport { parseWad } from 'utils/formatNumber'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\n\r\nimport { MAX_REDEMPTION_RATE } from 'utils/v2/math'\r\n\r\nimport useProjectReservedTokens from './ProjectReservedTokens'\r\n\r\n/**\r\n * Returns the value in ETH that an amount of tokens can be redeemed for\r\n * Formula: https://www.desmos.com/calculator/sp9ru6zbpk\r\n *\r\n * y = ox/s * ( r + (x(1 - r)/s) )\r\n *\r\n * Where:\r\n * y = redeemable amount\r\n *\r\n * o = overflow (primaryTerminalCurrentOverflow)\r\n * x = tokenAmount\r\n * s = total supply of token (realTotalTokenSupply)\r\n * r = redemptionRate\r\n *\r\n * @param param0\r\n * @returns amount in ETH\r\n */\r\nexport function useETHReceivedFromTokens({\r\n  tokenAmount,\r\n}: {\r\n  tokenAmount: string | undefined\r\n}): BigNumber | undefined {\r\n  const {\r\n    projectId,\r\n    fundingCycle,\r\n    fundingCycleMetadata,\r\n    primaryTerminalCurrentOverflow,\r\n    totalTokenSupply,\r\n    ballotState,\r\n  } = useContext(V2ProjectContext)\r\n\r\n  const { data: undistributedReservedTokens } = useProjectReservedTokens({\r\n    projectId,\r\n    reservedRate: fundingCycleMetadata?.reservedRate,\r\n  })\r\n\r\n  if (!fundingCycle) return\r\n\r\n  const realTotalTokenSupply = undistributedReservedTokens\r\n    ? totalTokenSupply?.add(undistributedReservedTokens)\r\n    : totalTokenSupply\r\n\r\n  if (!fundingCycleMetadata || !realTotalTokenSupply?.gt(0) || !tokenAmount)\r\n    return BigNumber.from(0)\r\n\r\n  const redemptionRate =\r\n    ballotState === V2BallotState.Active\r\n      ? fundingCycleMetadata.ballotRedemptionRate\r\n      : fundingCycleMetadata.redemptionRate\r\n\r\n  const tokenAmountWad = parseWad(tokenAmount)\r\n\r\n  // base = ox/s\r\n  const base =\r\n    realTotalTokenSupply && primaryTerminalCurrentOverflow\r\n      ? primaryTerminalCurrentOverflow\r\n          .mul(tokenAmountWad)\r\n          .div(realTotalTokenSupply)\r\n      : BigNumber.from(0)\r\n\r\n  // numerator = r + (x(1 - r)/s)\r\n  const numerator = redemptionRate.add(\r\n    tokenAmountWad\r\n      .mul(BigNumber.from(MAX_REDEMPTION_RATE).sub(redemptionRate))\r\n      .div(realTotalTokenSupply),\r\n  )\r\n\r\n  // y = base * numerator ==> ox/s * ( r + (x(1 - r)/s) )\r\n  return base.mul(numerator).div(MAX_REDEMPTION_RATE)\r\n}\r\n","import { t, Trans } from '@lingui/macro'\r\nimport { Form, Space } from 'antd'\r\nimport { useForm } from 'antd/lib/form/Form'\r\n\r\nimport InputAccessoryButton from 'components/InputAccessoryButton'\r\nimport FormattedNumberInput from 'components/inputs/FormattedNumberInput'\r\n\r\nimport { CSSProperties, useContext, useState } from 'react'\r\nimport { formatPercent, formatWad, fromWad, parseWad } from 'utils/formatNumber'\r\n\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { tokenSymbolText } from 'utils/tokenSymbolText'\r\nimport useTotalBalanceOf from 'hooks/v2/contractReader/TotalBalanceOf'\r\nimport { NetworkContext } from 'contexts/networkContext'\r\nimport { ThemeContext } from 'contexts/themeContext'\r\nimport { formatRedemptionRate } from 'utils/v2/math'\r\nimport CurrencySymbol from 'components/CurrencySymbol'\r\nimport { useETHReceivedFromTokens } from 'hooks/v2/contractReader/ETHReceivedFromTokens'\r\nimport { V2_CURRENCY_USD } from 'utils/v2/currency'\r\nimport { useRedeemTokensTx } from 'hooks/v2/transactor/RedeemTokensTx'\r\nimport TransactionModal from 'components/TransactionModal'\r\n\r\nconst statsStyle: CSSProperties = {\r\n  display: 'flex',\r\n  justifyContent: 'space-between',\r\n  alignItems: 'baseline',\r\n}\r\n\r\n// This doubles as the 'Redeem' and 'Burn' modal depending on if project has overflow\r\nexport default function V2RedeemModal({\r\n  visible,\r\n  onCancel,\r\n  onConfirmed,\r\n}: {\r\n  visible?: boolean\r\n  onCancel?: VoidFunction\r\n  onConfirmed?: VoidFunction\r\n}) {\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n  const { userAddress } = useContext(NetworkContext)\r\n  const {\r\n    tokenSymbol,\r\n    fundingCycle,\r\n    primaryTerminalCurrentOverflow,\r\n    projectId,\r\n    totalTokenSupply,\r\n    distributionLimitCurrency,\r\n    fundingCycleMetadata,\r\n  } = useContext(V2ProjectContext)\r\n\r\n  const [redeemAmount, setRedeemAmount] = useState<string>()\r\n  const [loading, setLoading] = useState<boolean>()\r\n  const [transactionPending, setTransactionPending] = useState<boolean>()\r\n\r\n  const [form] = useForm<{\r\n    redeemAmount: string\r\n  }>()\r\n\r\n  const { data: totalBalance } = useTotalBalanceOf(userAddress, projectId)\r\n  const maxClaimable = useETHReceivedFromTokens({\r\n    tokenAmount: fromWad(totalBalance),\r\n  })\r\n  const rewardAmount = useETHReceivedFromTokens({ tokenAmount: redeemAmount })\r\n  const redeemTokensTx = useRedeemTokensTx()\r\n\r\n  if (!fundingCycle || !fundingCycleMetadata) return null\r\n\r\n  const share = formatPercent(totalBalance, totalTokenSupply)\r\n\r\n  // 0.5% slippage for USD-denominated projects\r\n  const minReturnedTokens = distributionLimitCurrency?.eq(V2_CURRENCY_USD)\r\n    ? rewardAmount?.mul(1000).div(1005)\r\n    : // ? rewardAmount?.mul(100).div(101)\r\n      rewardAmount\r\n\r\n  const tokensTextLong = tokenSymbolText({\r\n    tokenSymbol: tokenSymbol,\r\n    capitalize: false,\r\n    plural: true,\r\n    includeTokenWord: true,\r\n  })\r\n  const tokensTextShort = tokenSymbolText({\r\n    tokenSymbol: tokenSymbol,\r\n    capitalize: false,\r\n    plural: true,\r\n  })\r\n\r\n  let modalTitle: string\r\n  // Defining whole sentence for translations\r\n  if (primaryTerminalCurrentOverflow?.gt(0)) {\r\n    modalTitle = t`Redeem ${tokensTextLong} for ETH`\r\n  } else {\r\n    modalTitle = t`Burn ${tokensTextLong}`\r\n  }\r\n\r\n  const minReturnedTokensFormatted =\r\n    formatWad(minReturnedTokens, { precision: 8 }) || '--'\r\n\r\n  const validateRedeemAmount = () => {\r\n    const redeemBN = parseWad(redeemAmount ?? 0)\r\n\r\n    if (redeemBN.eq(0)) {\r\n      return Promise.reject(t`Required`)\r\n    } else if (redeemBN.gt(totalBalance ?? 0)) {\r\n      return Promise.reject(t`Balance exceeded`)\r\n    }\r\n    return Promise.resolve()\r\n  }\r\n\r\n  const exectuteRedeemTransaction = async () => {\r\n    await form.validateFields()\r\n    if (!minReturnedTokens) return\r\n\r\n    setLoading(true)\r\n\r\n    redeemTokensTx(\r\n      {\r\n        redeemAmount: parseWad(redeemAmount),\r\n        minReturnedTokens,\r\n      },\r\n      {\r\n        // step 1\r\n        onDone: () => {\r\n          setTransactionPending(true)\r\n          setRedeemAmount(undefined)\r\n        },\r\n        // step 2\r\n        onConfirmed: () => {\r\n          setTransactionPending(false)\r\n          setLoading(false)\r\n          onConfirmed?.()\r\n        },\r\n      },\r\n    )\r\n  }\r\n\r\n  return (\r\n    <TransactionModal\r\n      transactionPending={transactionPending}\r\n      title={modalTitle}\r\n      visible={visible}\r\n      confirmLoading={loading}\r\n      onOk={() => {\r\n        exectuteRedeemTransaction()\r\n      }}\r\n      onCancel={() => {\r\n        setRedeemAmount(undefined)\r\n\r\n        onCancel?.()\r\n      }}\r\n      okText={modalTitle}\r\n      okButtonProps={{\r\n        disabled: !redeemAmount || parseInt(redeemAmount) === 0,\r\n      }}\r\n      width={540}\r\n      centered\r\n    >\r\n      <Space direction=\"vertical\" style={{ width: '100%' }}>\r\n        <div>\r\n          <p style={statsStyle}>\r\n            <Trans>\r\n              Redemption rate:{' '}\r\n              <span>\r\n                {formatRedemptionRate(fundingCycleMetadata.redemptionRate)}%\r\n              </span>\r\n            </Trans>\r\n          </p>\r\n          <p style={statsStyle}>\r\n            <Trans>\r\n              {tokenSymbolText({ tokenSymbol: tokenSymbol, capitalize: true })}{' '}\r\n              balance:{' '}\r\n              <div\r\n                style={{\r\n                  display: 'flex',\r\n                  flexDirection: 'column',\r\n                  alignItems: 'flex-end',\r\n                }}\r\n              >\r\n                <div>\r\n                  {formatWad(totalBalance ?? 0, { precision: 0 })}{' '}\r\n                  {tokensTextShort}\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    cursor: 'default',\r\n                    fontSize: '0.8rem',\r\n                    fontWeight: 500,\r\n                    color: colors.text.tertiary,\r\n                  }}\r\n                >\r\n                  ({share}% of supply)\r\n                </div>\r\n              </div>\r\n            </Trans>\r\n          </p>\r\n          <p style={statsStyle}>\r\n            <Trans>\r\n              Currently worth:{' '}\r\n              <span>\r\n                <CurrencySymbol currency=\"ETH\" />\r\n                {formatWad(maxClaimable, { precision: 4 })}\r\n              </span>\r\n            </Trans>\r\n          </p>\r\n        </div>\r\n        <p>\r\n          {primaryTerminalCurrentOverflow?.gt(0) ? (\r\n            <Trans>\r\n              Tokens can be redeemed for a portion of this project's ETH\r\n              overflow, according to the redemption rate of the current funding\r\n              cycle.{' '}\r\n              <span style={{ fontWeight: 500, color: colors.text.warn }}>\r\n                Tokens are burned when they are redeemed.\r\n              </span>\r\n            </Trans>\r\n          ) : (\r\n            <span style={{ fontWeight: 500, color: colors.text.warn }}>\r\n              <Trans>\r\n                <strong>This project has no overflow</strong>, so you will not\r\n                receive any ETH for burning tokens.\r\n              </Trans>\r\n            </span>\r\n          )}\r\n        </p>\r\n        <div>\r\n          <Form form={form}>\r\n            <FormattedNumberInput\r\n              min={0}\r\n              step={0.001}\r\n              placeholder=\"0\"\r\n              value={redeemAmount}\r\n              accessory={\r\n                <InputAccessoryButton\r\n                  content={t`MAX`}\r\n                  onClick={() => setRedeemAmount(fromWad(totalBalance))}\r\n                />\r\n              }\r\n              formItemProps={{\r\n                rules: [{ validator: validateRedeemAmount }],\r\n              }}\r\n              disabled={totalBalance?.eq(0)}\r\n              onChange={val => setRedeemAmount(val)}\r\n            />\r\n          </Form>\r\n          {primaryTerminalCurrentOverflow?.gt(0) ? (\r\n            <div style={{ fontWeight: 500, marginTop: 20 }}>\r\n              {distributionLimitCurrency?.eq(V2_CURRENCY_USD) ? (\r\n                <Trans>\r\n                  You will receive minimum {minReturnedTokensFormatted} ETH\r\n                </Trans>\r\n              ) : (\r\n                <Trans>You will receive {minReturnedTokensFormatted} ETH</Trans>\r\n              )}\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      </Space>\r\n    </TransactionModal>\r\n  )\r\n}\r\n","import { NetworkContext } from 'contexts/networkContext'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport * as constants from '@ethersproject/constants'\r\nimport { useContext } from 'react'\r\n\r\nimport { V2UserContext } from 'contexts/v2/userContext'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\n\r\nimport { TransactorInstance } from '../../Transactor'\r\n\r\nconst DEFAULT_METADATA = 0\r\n\r\nexport function useRedeemTokensTx(): TransactorInstance<{\r\n  redeemAmount: BigNumber\r\n  minReturnedTokens: BigNumber\r\n}> {\r\n  const { transactor, contracts } = useContext(V2UserContext)\r\n  const { userAddress } = useContext(NetworkContext)\r\n  const { projectId } = useContext(V2ProjectContext)\r\n\r\n  return ({ redeemAmount, minReturnedTokens }, txOpts) => {\r\n    if (\r\n      !transactor ||\r\n      !userAddress ||\r\n      !projectId ||\r\n      !contracts?.JBETHPaymentTerminal\r\n    ) {\r\n      txOpts?.onDone?.()\r\n      return Promise.resolve(false)\r\n    }\r\n\r\n    const memo = '' //TODO: memo field on V2RedeemModal\r\n\r\n    return transactor(\r\n      contracts?.JBETHPaymentTerminal,\r\n      'redeemTokensOf',\r\n      [\r\n        userAddress, // _holder\r\n        projectId, // _projectId\r\n        redeemAmount, // _tokenCount, tokens to redeem\r\n        constants.AddressZero, // _token, unused parameter\r\n        minReturnedTokens, // _minReturnedTokens, min amount of ETH to receive\r\n        userAddress, // _beneficiary\r\n        memo, // _memo\r\n        DEFAULT_METADATA, // _metadata, TODO: metadata\r\n      ],\r\n      txOpts,\r\n    )\r\n  }\r\n}\r\n","// This icon file is generated automatically.\nvar WarningOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M464 720a48 48 0 1096 0 48 48 0 10-96 0zm16-304v184c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V416c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8zm475.7 440l-416-720c-6.2-10.7-16.9-16-27.7-16s-21.6 5.3-27.7 16l-416 720C56 877.4 71.4 904 96 904h832c24.6 0 40-26.6 27.7-48zm-783.5-27.9L512 239.9l339.8 588.2H172.2z\" } }] }, \"name\": \"warning\", \"theme\": \"outlined\" };\nexport default WarningOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport WarningOutlinedSvg from \"@ant-design/icons-svg/es/asn/WarningOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar WarningOutlined = function WarningOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: WarningOutlinedSvg\n  }));\n};\n\nWarningOutlined.displayName = 'WarningOutlined';\nexport default /*#__PURE__*/React.forwardRef(WarningOutlined);","import { t, Trans } from '@lingui/macro'\r\nimport { Descriptions, Form, Space } from 'antd'\r\nimport { WarningOutlined } from '@ant-design/icons'\r\nimport FormattedAddress from 'components/FormattedAddress'\r\nimport InputAccessoryButton from 'components/InputAccessoryButton'\r\nimport FormattedNumberInput from 'components/inputs/FormattedNumberInput'\r\nimport { ThemeContext } from 'contexts/themeContext'\r\nimport * as constants from '@ethersproject/constants'\r\nimport { useContext, useLayoutEffect, useState } from 'react'\r\nimport { formatWad, fromWad, parseWad } from 'utils/formatNumber'\r\nimport TransactionModal from 'components/TransactionModal'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { useClaimTokensTx } from 'hooks/v2/transactor/ClaimTokensTx'\r\nimport useUserUnclaimedTokenBalance from 'hooks/v2/contractReader/UserUnclaimedTokenBalance'\r\nimport { tokenSymbolText } from 'utils/tokenSymbolText'\r\n\r\nexport default function V2ClaimTokensModal({\r\n  visible,\r\n  onCancel,\r\n  onConfirmed,\r\n}: {\r\n  visible?: boolean\r\n  onCancel?: VoidFunction\r\n  onConfirmed?: VoidFunction\r\n}) {\r\n  const [loading, setLoading] = useState<boolean>()\r\n  const [transactionPending, setTransactionPending] = useState<boolean>()\r\n  const [claimAmount, setClaimAmount] = useState<string>()\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n  const { tokenSymbol, tokenAddress } = useContext(V2ProjectContext)\r\n  const claimTokensTx = useClaimTokensTx()\r\n\r\n  const { data: unclaimedBalance } = useUserUnclaimedTokenBalance()\r\n\r\n  useLayoutEffect(() => {\r\n    setClaimAmount(fromWad(unclaimedBalance))\r\n  }, [unclaimedBalance])\r\n\r\n  function executeClaimTokensTx() {\r\n    if (\r\n      !claimAmount ||\r\n      parseWad(claimAmount).eq(0) // Disable claiming 0 tokens\r\n    )\r\n      return\r\n\r\n    setLoading(true)\r\n\r\n    claimTokensTx(\r\n      { claimAmount: parseWad(claimAmount) },\r\n      {\r\n        onDone: () => {\r\n          setTransactionPending(true)\r\n          setLoading(false)\r\n        },\r\n        onConfirmed: () => {\r\n          setTransactionPending(false)\r\n          onConfirmed?.()\r\n        },\r\n      },\r\n    )\r\n  }\r\n\r\n  const ticketsIssued = tokenAddress\r\n    ? tokenAddress !== constants.AddressZero\r\n    : false\r\n\r\n  const tokenTextLong = tokenSymbolText({\r\n    tokenSymbol,\r\n    plural: true,\r\n    includeTokenWord: true,\r\n  })\r\n\r\n  const tokenTextShort = tokenSymbolText({\r\n    tokenSymbol,\r\n    plural: true,\r\n  })\r\n\r\n  return (\r\n    <TransactionModal\r\n      title={t`Claim ${tokenTextShort} as ERC-20 tokens`}\r\n      connectWalletText={t`Connect wallet to claim`}\r\n      visible={visible}\r\n      onOk={executeClaimTokensTx}\r\n      okText={t`Claim ${tokenTextShort}`}\r\n      confirmLoading={loading}\r\n      transactionPending={transactionPending}\r\n      okButtonProps={{ disabled: parseWad(claimAmount).eq(0) }}\r\n      onCancel={onCancel}\r\n      width={600}\r\n      centered\r\n    >\r\n      <Space direction=\"vertical\" size=\"large\">\r\n        {!ticketsIssued && (\r\n          <div style={{ padding: 10, background: colors.background.l1 }}>\r\n            <WarningOutlined />{' '}\r\n            <Trans>\r\n              Tokens cannot be claimed because no ERC-20 token has been issued\r\n              for this project. ERC-20 tokens must be issued by the project\r\n              owner.\r\n            </Trans>\r\n          </div>\r\n        )}\r\n\r\n        <div>\r\n          <p>\r\n            <Trans>\r\n              Claiming {tokenTextLong} will convert your {tokenTextShort}{' '}\r\n              balance to ERC-20 tokens and mint them to your wallet.\r\n            </Trans>\r\n          </p>\r\n          <p style={{ fontWeight: 600 }}>\r\n            <Trans>\r\n              If you're unsure if you need to claim, you probably don't.\r\n            </Trans>\r\n          </p>\r\n          <p>\r\n            <Trans>\r\n              You can redeem your {tokenTextLong} for overflow without claiming\r\n              them. You can transfer your unclaimed {tokenTextLong} to another\r\n              address from the Tools menu, which can be accessed from the wrench\r\n              icon in the upper right hand corner of this project.\r\n            </Trans>\r\n          </p>\r\n        </div>\r\n\r\n        <Descriptions size=\"small\" layout=\"horizontal\" column={1}>\r\n          <Descriptions.Item\r\n            label={<Trans>Your unclaimed {tokenTextLong}</Trans>}\r\n          >\r\n            {formatWad(unclaimedBalance, { precision: 8 })}\r\n          </Descriptions.Item>\r\n\r\n          {ticketsIssued && tokenSymbol && (\r\n            <Descriptions.Item\r\n              label={<Trans>{tokenSymbol} ERC-20 address</Trans>}\r\n            >\r\n              <FormattedAddress address={tokenAddress} />\r\n            </Descriptions.Item>\r\n          )}\r\n        </Descriptions>\r\n\r\n        <Form layout=\"vertical\">\r\n          <Form.Item label={t`Amount of ERC-20 tokens to claim`}>\r\n            <FormattedNumberInput\r\n              min={0}\r\n              max={parseFloat(fromWad(unclaimedBalance))}\r\n              disabled={!ticketsIssued}\r\n              placeholder=\"0\"\r\n              value={claimAmount}\r\n              accessory={\r\n                <InputAccessoryButton\r\n                  content={t`MAX`}\r\n                  onClick={() => setClaimAmount(fromWad(unclaimedBalance))}\r\n                />\r\n              }\r\n              onChange={val => setClaimAmount(val)}\r\n            />\r\n          </Form.Item>\r\n        </Form>\r\n      </Space>\r\n    </TransactionModal>\r\n  )\r\n}\r\n","import { NetworkContext } from 'contexts/networkContext'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { useContext } from 'react'\r\nimport { V2UserContext } from 'contexts/v2/userContext'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\n\r\nimport { TransactorInstance } from '../../Transactor'\r\n\r\nexport function useClaimTokensTx(): TransactorInstance<{\r\n  claimAmount: BigNumber\r\n}> {\r\n  const { transactor, contracts } = useContext(V2UserContext)\r\n  const { userAddress } = useContext(NetworkContext)\r\n  const { projectId } = useContext(V2ProjectContext)\r\n\r\n  return ({ claimAmount }, txOpts) => {\r\n    if (!transactor || !userAddress || !projectId || !contracts?.JBTokenStore) {\r\n      txOpts?.onDone?.()\r\n      return Promise.resolve(false)\r\n    }\r\n\r\n    return transactor(\r\n      contracts?.JBTokenStore,\r\n      'claimFor',\r\n      [userAddress, projectId, claimAmount.toHexString()],\r\n      txOpts,\r\n    )\r\n  }\r\n}\r\n","import { Form, Input, Switch } from 'antd'\r\nimport { useForm } from 'antd/lib/form/Form'\r\nimport FormattedNumberInput from 'components/inputs/FormattedNumberInput'\r\n\r\nimport * as constants from '@ethersproject/constants'\r\nimport { isAddress } from '@ethersproject/address'\r\nimport { useContext, useState } from 'react'\r\nimport { parseWad } from 'utils/formatNumber'\r\n\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { useMintTokensTx } from 'hooks/v2/transactor/MintTokensTx'\r\nimport TransactionModal from 'components/TransactionModal'\r\nimport { t, Trans } from '@lingui/macro'\r\nimport { tokenSymbolText } from 'utils/tokenSymbolText'\r\n\r\nexport default function V2MintModal({\r\n  visible,\r\n  onCancel,\r\n  onConfirmed,\r\n}: {\r\n  visible?: boolean\r\n  onCancel?: VoidFunction\r\n  onConfirmed?: VoidFunction\r\n}) {\r\n  const { tokenSymbol, tokenAddress } = useContext(V2ProjectContext)\r\n  const mintTokensTx = useMintTokensTx()\r\n  const [form] = useForm<{\r\n    beneficary: string\r\n    preferClaimed: boolean\r\n    memo: string\r\n  }>()\r\n\r\n  const [value, setValue] = useState<string>('0')\r\n  const [loading, setLoading] = useState<boolean>()\r\n  const [transactionPending, setTransactionPending] = useState<boolean>()\r\n\r\n  async function executeMintTx() {\r\n    const beneficiary = form.getFieldValue('beneficary')\r\n    if (!isAddress(beneficiary)) return\r\n\r\n    setLoading(true)\r\n\r\n    await form.validateFields()\r\n\r\n    mintTokensTx(\r\n      {\r\n        value: parseWad(value),\r\n        beneficiary,\r\n        preferClaimed: form.getFieldValue('preferClaimed'),\r\n        memo: form.getFieldValue('memo'),\r\n      },\r\n      {\r\n        onDone: () => {\r\n          setLoading(false)\r\n          setTransactionPending(true)\r\n        },\r\n        onConfirmed: () => {\r\n          form.resetFields()\r\n          setValue('0')\r\n          setTransactionPending(false)\r\n          onConfirmed?.()\r\n        },\r\n      },\r\n    )\r\n  }\r\n\r\n  const erc20Issued =\r\n    tokenSymbol && tokenAddress && tokenAddress !== constants.AddressZero\r\n\r\n  const tokensTokenLower = tokenSymbolText({\r\n    tokenSymbol: tokenSymbol,\r\n    capitalize: false,\r\n    plural: true,\r\n  })\r\n\r\n  const tokensTokenUpper = tokenSymbolText({\r\n    tokenSymbol: tokenSymbol,\r\n    capitalize: true,\r\n    plural: false,\r\n  })\r\n\r\n  return (\r\n    <TransactionModal\r\n      visible={visible}\r\n      title={t`Mint ${tokensTokenLower}`}\r\n      onOk={executeMintTx}\r\n      confirmLoading={loading}\r\n      transactionPending={transactionPending}\r\n      onCancel={onCancel}\r\n      okText={t`Mint ${tokensTokenLower}`}\r\n    >\r\n      <div style={{ marginBottom: 20 }}>\r\n        <Trans>\r\n          Note: Tokens can be minted manually when allowed in the current\r\n          funding cycle. This can be changed by the project owner for upcoming\r\n          cycles.\r\n        </Trans>\r\n      </div>\r\n\r\n      <Form layout=\"vertical\" form={form}>\r\n        <Form.Item\r\n          label={t`Tokens receiver`}\r\n          name=\"beneficary\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              validator: (rule, value) => {\r\n                if (!value || !isAddress(value))\r\n                  return Promise.reject('Not a valid ETH address')\r\n                else return Promise.resolve()\r\n              },\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder={constants.AddressZero} />\r\n        </Form.Item>\r\n        <FormattedNumberInput\r\n          formItemProps={{\r\n            label: t`${tokensTokenUpper} amount`,\r\n            extra: t`The amount of tokens to mint to the receiver.`,\r\n            rules: [{ required: true }],\r\n          }}\r\n          value={value}\r\n          onChange={val => setValue(val ?? '0')}\r\n        />\r\n        <br />\r\n        <Form.Item label=\"Memo\" name=\"memo\">\r\n          <Input placeholder=\"Memo included on-chain (optional)\" />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"preferClaimed\"\r\n          label={t`Mint as ERC-20`}\r\n          valuePropName=\"checked\"\r\n          extra={\r\n            erc20Issued\r\n              ? t`Enabling this will mint ${tokenSymbol} ERC-20 tokens. Otherwise, unclaimed ${tokenSymbol} tokens will be minted, which can be claimed later as ERC-20 by the receiver.`\r\n              : t`ERC-20 tokens can only be minted once an ERC-20 token has been issued for this project.`\r\n          }\r\n          initialValue={false}\r\n        >\r\n          <Switch disabled={!erc20Issued} />\r\n        </Form.Item>\r\n      </Form>\r\n    </TransactionModal>\r\n  )\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { useContext } from 'react'\r\nimport { V2UserContext } from 'contexts/v2/userContext'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\n\r\nimport { TransactorInstance } from '../../Transactor'\r\n\r\nexport function useMintTokensTx(): TransactorInstance<{\r\n  value: BigNumber\r\n  beneficiary: string\r\n  preferClaimed: boolean\r\n  memo: string\r\n}> {\r\n  const { transactor, contracts } = useContext(V2UserContext)\r\n  const { projectId } = useContext(V2ProjectContext)\r\n\r\n  // TODO new V2 feature:\r\n  // Whether to use the current funding cycle's reserved rate in the mint calculation.\r\n  const reservedRate = true\r\n\r\n  return ({ value, beneficiary, preferClaimed, memo }, txOpts) => {\r\n    if (!transactor || !contracts || !projectId) {\r\n      txOpts?.onDone?.()\r\n      return Promise.resolve(false)\r\n    }\r\n\r\n    const contract = contracts.JBController\r\n    const functionName = 'mintTokensOf'\r\n    const args = [\r\n      projectId,\r\n      value.toHexString(),\r\n      beneficiary,\r\n      memo ?? '',\r\n      preferClaimed,\r\n      reservedRate,\r\n    ]\r\n\r\n    return transactor(contract, functionName, args, txOpts)\r\n  }\r\n}\r\n","import { t, Trans } from '@lingui/macro'\r\nimport { Button, Descriptions, Space, Statistic } from 'antd'\r\nimport SectionHeader from 'components/SectionHeader'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport * as constants from '@ethersproject/constants'\r\nimport { NetworkContext } from 'contexts/networkContext'\r\nimport useERC20BalanceOf from 'hooks/v2/contractReader/ERC20BalanceOf'\r\n\r\nimport { CSSProperties, useContext, useState } from 'react'\r\nimport FormattedAddress from 'components/FormattedAddress'\r\nimport { formatPercent, formatWad } from 'utils/formatNumber'\r\n\r\nimport IssueTokenButton from 'components/IssueTokenButton'\r\nimport {\r\n  useHasPermission,\r\n  V2OperatorPermission,\r\n} from 'hooks/v2/contractReader/HasPermission'\r\nimport { useIssueTokensTx } from 'hooks/v2/transactor/IssueTokensTx'\r\nimport { tokenSymbolText } from 'utils/tokenSymbolText'\r\nimport useTotalBalanceOf from 'hooks/v2/contractReader/TotalBalanceOf'\r\nimport { ThemeContext } from 'contexts/themeContext'\r\nimport useUserUnclaimedTokenBalance from 'hooks/v2/contractReader/UserUnclaimedTokenBalance'\r\nimport ManageTokensModal from 'components/ManageTokensModal'\r\n\r\nimport ParticipantsModal from 'components/modals/ParticipantsModal'\r\n\r\nimport V2RedeemModal from './V2RedeemModal'\r\nimport V2ClaimTokensModal from './V2ClaimTokensModal'\r\nimport V2MintModal from './V2MintModal'\r\n\r\nexport default function V2ManageTokensSection() {\r\n  const [manageTokensModalVisible, setManageTokensModalVisible] =\r\n    useState<boolean>(false)\r\n\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n  const {\r\n    tokenAddress,\r\n    tokenSymbol,\r\n    isPreviewMode,\r\n    totalTokenSupply,\r\n    fundingCycleMetadata,\r\n    projectId,\r\n    primaryTerminalCurrentOverflow,\r\n    projectMetadata,\r\n    cv,\r\n  } = useContext(V2ProjectContext)\r\n\r\n  const { userAddress } = useContext(NetworkContext)\r\n\r\n  const { data: claimedBalance } = useERC20BalanceOf(tokenAddress, userAddress)\r\n  const { data: unclaimedBalance } = useUserUnclaimedTokenBalance()\r\n\r\n  const [participantsModalVisible, setParticipantsModalVisible] =\r\n    useState<boolean>(false)\r\n\r\n  const labelStyle: CSSProperties = {\r\n    width: 128,\r\n  }\r\n\r\n  const hasIssuedERC20 = tokenAddress !== constants.AddressZero\r\n\r\n  const hasIssueTicketsPermission = useHasPermission(V2OperatorPermission.ISSUE)\r\n\r\n  const tokenText = tokenSymbolText({\r\n    tokenSymbol: tokenSymbol,\r\n    capitalize: false,\r\n    plural: true,\r\n  })\r\n\r\n  const { data: totalBalance } = useTotalBalanceOf(userAddress, projectId)\r\n\r\n  // %age of tokens the user owns.\r\n  const userOwnershipPercentage =\r\n    formatPercent(totalBalance, totalTokenSupply) || '0'\r\n\r\n  const showIssueTokensButton =\r\n    !hasIssuedERC20 && hasIssueTicketsPermission && !isPreviewMode\r\n\r\n  const claimedBalanceFormatted = formatWad(claimedBalance ?? 0, {\r\n    precision: 0,\r\n  })\r\n  const unclaimedBalanceFormatted = formatWad(unclaimedBalance ?? 0, {\r\n    precision: 0,\r\n  })\r\n\r\n  const manageTokensRowStyle: CSSProperties = {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    gap: 5,\r\n    justifyContent: 'space-between',\r\n    width: '100%',\r\n  }\r\n  const hasOverflow = Boolean(primaryTerminalCurrentOverflow?.gt(0))\r\n\r\n  const userHasMintPermission = Boolean(\r\n    useHasPermission(V2OperatorPermission.MINT),\r\n  )\r\n  const projectAllowsMint = Boolean(fundingCycleMetadata?.allowMinting)\r\n\r\n  return (\r\n    <>\r\n      <Space direction=\"vertical\" size=\"large\">\r\n        <Statistic\r\n          title={\r\n            <div\r\n              style={{\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n              }}\r\n            >\r\n              <SectionHeader\r\n                text={<Trans>Tokens</Trans>}\r\n                tip={\r\n                  <Trans>\r\n                    {tokenSymbolText({\r\n                      tokenSymbol: tokenSymbol,\r\n                      capitalize: true,\r\n                      plural: true,\r\n                      includeTokenWord: true,\r\n                    })}{' '}\r\n                    are distributed to anyone who pays this project. If the\r\n                    project has set a funding target, tokens can be redeemed for\r\n                    a portion of the project's overflow whether or not they have\r\n                    been claimed yet.\r\n                  </Trans>\r\n                }\r\n              />\r\n              {showIssueTokensButton && (\r\n                <div style={{ marginBottom: 20 }}>\r\n                  <IssueTokenButton\r\n                    useIssueTokensTx={useIssueTokensTx}\r\n                    onCompleted={() => window.location.reload()}\r\n                  />\r\n                </div>\r\n              )}\r\n            </div>\r\n          }\r\n          valueRender={() => (\r\n            <Descriptions layout=\"horizontal\" column={1} size=\"small\">\r\n              {hasIssuedERC20 && tokenSymbol && (\r\n                <Descriptions.Item\r\n                  label={t`Project token`}\r\n                  labelStyle={labelStyle}\r\n                >\r\n                  <div style={manageTokensRowStyle}>\r\n                    <div>\r\n                      {tokenSymbol} (\r\n                      <FormattedAddress address={tokenAddress} />)\r\n                    </div>\r\n                  </div>\r\n                </Descriptions.Item>\r\n              )}\r\n              <Descriptions.Item\r\n                label={t`Total supply`}\r\n                labelStyle={labelStyle}\r\n              >\r\n                <div\r\n                  style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'baseline',\r\n                    width: '100%',\r\n                    gap: 5,\r\n                    flexWrap: 'wrap',\r\n                  }}\r\n                >\r\n                  {formatWad(totalTokenSupply, { precision: 0 })} {tokenText}\r\n                  <Button\r\n                    size=\"small\"\r\n                    onClick={() => setParticipantsModalVisible(true)}\r\n                    disabled={isPreviewMode}\r\n                  >\r\n                    <Trans>Holders</Trans>\r\n                  </Button>\r\n                </div>\r\n              </Descriptions.Item>\r\n              {userAddress ? (\r\n                <Descriptions.Item\r\n                  label={t`Your balance`}\r\n                  labelStyle={labelStyle}\r\n                  style={{ paddingBottom: '0.5rem' }}\r\n                >\r\n                  <div style={manageTokensRowStyle}>\r\n                    <div>\r\n                      {hasIssuedERC20 && (\r\n                        <div>\r\n                          {claimedBalanceFormatted} {tokenText}\r\n                        </div>\r\n                      )}\r\n                      <div>\r\n                        {hasIssuedERC20 ? (\r\n                          <Trans>\r\n                            {unclaimedBalanceFormatted} {tokenText} claimable\r\n                          </Trans>\r\n                        ) : (\r\n                          <>\r\n                            {unclaimedBalanceFormatted} {tokenText}\r\n                          </>\r\n                        )}\r\n                      </div>\r\n                      <div\r\n                        style={{\r\n                          cursor: 'default',\r\n                          fontSize: '0.8rem',\r\n                          fontWeight: 500,\r\n                          color: colors.text.tertiary,\r\n                        }}\r\n                      >\r\n                        <Trans>\r\n                          {userOwnershipPercentage}% of total supply\r\n                        </Trans>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <Button\r\n                      size=\"small\"\r\n                      onClick={() => setManageTokensModalVisible(true)}\r\n                      disabled={isPreviewMode}\r\n                    >\r\n                      <Trans>Manage {tokenText}</Trans>\r\n                    </Button>\r\n                  </div>\r\n                </Descriptions.Item>\r\n              ) : null}\r\n            </Descriptions>\r\n          )}\r\n        />\r\n      </Space>\r\n\r\n      <ManageTokensModal\r\n        visible={manageTokensModalVisible}\r\n        onCancel={() => setManageTokensModalVisible(false)}\r\n        projectAllowsMint={projectAllowsMint}\r\n        userHasMintPermission={userHasMintPermission}\r\n        hasOverflow={hasOverflow}\r\n        tokenSymbol={tokenSymbol}\r\n        tokenAddress={tokenAddress}\r\n        RedeemModal={V2RedeemModal}\r\n        ClaimTokensModal={V2ClaimTokensModal}\r\n        MintModal={V2MintModal}\r\n      />\r\n      <ParticipantsModal\r\n        projectId={projectId}\r\n        projectName={projectMetadata?.name}\r\n        tokenSymbol={tokenSymbol}\r\n        tokenAddress={tokenAddress}\r\n        cv={cv}\r\n        totalTokenSupply={totalTokenSupply}\r\n        visible={participantsModalVisible}\r\n        onCancel={() => setParticipantsModalVisible(false)}\r\n      />\r\n    </>\r\n  )\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { useErc20Contract } from 'hooks/Erc20Contract'\r\nimport { bigNumbersDiff } from 'utils/bigNumbers'\r\n\r\nimport useContractReader from './V2ContractReader'\r\n\r\n/** Returns ERC20 balance of `wallet`. Pass arguments for `projectId` and `terminalName` if the ERC20 is a project token, to update the returned value when relevant on-chain events are emitted. */\r\nexport default function useERC20BalanceOf(\r\n  tokenAddress: string | undefined,\r\n  walletAddress: string | undefined,\r\n) {\r\n  return useContractReader<BigNumber>({\r\n    contract: useErc20Contract(tokenAddress),\r\n    functionName: 'balanceOf',\r\n    args: walletAddress ? [walletAddress] : null,\r\n    valueDidChange: bigNumbersDiff,\r\n    // TODO: implement updateOn arg (useShouldUpdateTokens -> update on pay, redeem, mint or convert)\r\n  })\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { isAddress } from '@ethersproject/address'\r\nimport { t, Trans } from '@lingui/macro'\r\nimport { Checkbox, Descriptions, Form, Space, Switch } from 'antd'\r\nimport { useForm } from 'antd/lib/form/Form'\r\nimport FormattedAddress from 'components/FormattedAddress'\r\nimport ImageUploader from 'components/inputs/ImageUploader'\r\nimport { NetworkContext } from 'contexts/networkContext'\r\nimport { useCurrencyConverter } from 'hooks/CurrencyConverter'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\n\r\nimport { useContext, useState } from 'react'\r\nimport { formattedNum, formatWad } from 'utils/formatNumber'\r\n\r\nimport { tokenSymbolText } from 'utils/tokenSymbolText'\r\nimport {\r\n  V2CurrencyName,\r\n  V2_CURRENCY_ETH,\r\n  V2_CURRENCY_USD,\r\n} from 'utils/v2/currency'\r\nimport { usePayV2ProjectTx } from 'hooks/v2/transactor/PayV2ProjectTx'\r\n\r\nimport { FormItems } from 'components/formItems'\r\n\r\nimport * as constants from '@ethersproject/constants'\r\n\r\nimport {\r\n  getUnsafeV2FundingCycleProperties,\r\n  V2FundingCycleRiskCount,\r\n} from 'utils/v2/fundingCycle'\r\n\r\nimport Paragraph from 'components/Paragraph'\r\n\r\nimport { weightedAmount } from 'utils/v2/math'\r\n\r\nimport TransactionModal from 'components/TransactionModal'\r\nimport ProjectRiskNotice from 'components/ProjectRiskNotice'\r\nimport MemoFormItem from 'components/inputs/Pay/MemoFormItem'\r\n\r\nexport default function V2ConfirmPayModal({\r\n  visible,\r\n  weiAmount,\r\n  onSuccess,\r\n  onCancel,\r\n}: {\r\n  visible?: boolean\r\n  weiAmount: BigNumber | undefined\r\n  onSuccess?: VoidFunction\r\n  onCancel?: VoidFunction\r\n}) {\r\n  const { userAddress, onSelectWallet } = useContext(NetworkContext)\r\n  const {\r\n    fundingCycle,\r\n    fundingCycleMetadata,\r\n    projectMetadata,\r\n    projectId,\r\n    tokenAddress,\r\n    tokenSymbol,\r\n  } = useContext(V2ProjectContext)\r\n  const converter = useCurrencyConverter()\r\n  const payProjectTx = usePayV2ProjectTx()\r\n\r\n  const [loading, setLoading] = useState<boolean>()\r\n  const [preferClaimed, setPreferClaimed] = useState<boolean>(false)\r\n  const [customBeneficiaryEnabled, setCustomBeneficiaryEnabled] =\r\n    useState<boolean>(false)\r\n  const [memo, setMemo] = useState<string>('')\r\n  const [transactionPending, setTransactionPending] = useState<boolean>()\r\n\r\n  const [form] = useForm<{ beneficiary: string }>()\r\n\r\n  const usdAmount = converter.weiToUsd(weiAmount)\r\n\r\n  if (!fundingCycle || !projectId || !projectMetadata) return null\r\n\r\n  const reservedRate = fundingCycleMetadata?.reservedRate?.toNumber()\r\n\r\n  const receivedTickets = weightedAmount(\r\n    fundingCycle?.weight,\r\n    reservedRate,\r\n    weiAmount,\r\n    'payer',\r\n  )\r\n  const ownerTickets = weightedAmount(\r\n    fundingCycle?.weight,\r\n    reservedRate,\r\n    weiAmount,\r\n    'reserved',\r\n  )\r\n\r\n  const riskCount = fundingCycle\r\n    ? V2FundingCycleRiskCount(fundingCycle)\r\n    : undefined\r\n\r\n  const hasIssuedTokens = tokenAddress && tokenAddress !== constants.AddressZero\r\n\r\n  async function pay() {\r\n    if (!weiAmount) return\r\n    await form.validateFields()\r\n\r\n    const beneficiary = form.getFieldValue('beneficiary')\r\n    const txBeneficiary = beneficiary ? beneficiary : userAddress\r\n\r\n    // Prompt wallet connect if no wallet connected\r\n    if (!userAddress && onSelectWallet) {\r\n      onSelectWallet()\r\n    }\r\n    setLoading(true)\r\n\r\n    const txSuccess = await payProjectTx(\r\n      {\r\n        memo,\r\n        preferClaimedTokens: preferClaimed,\r\n        beneficiary: txBeneficiary,\r\n        value: weiAmount,\r\n      },\r\n      {\r\n        onConfirmed() {\r\n          setLoading(false)\r\n          setTransactionPending(false)\r\n\r\n          onSuccess?.()\r\n        },\r\n        onDone() {\r\n          setTransactionPending(true)\r\n        },\r\n      },\r\n    )\r\n\r\n    if (!txSuccess) {\r\n      setLoading(false)\r\n      setTransactionPending(false)\r\n    }\r\n  }\r\n\r\n  const validateCustomBeneficiary = () => {\r\n    const beneficiary = form.getFieldValue('beneficiary')\r\n    if (!beneficiary) {\r\n      return Promise.reject(t`Address required`)\r\n    } else if (!isAddress(beneficiary)) {\r\n      return Promise.reject(t`Invalid address`)\r\n    }\r\n    return Promise.resolve()\r\n  }\r\n\r\n  return (\r\n    <TransactionModal\r\n      transactionPending={transactionPending}\r\n      title={t`Pay ${projectMetadata.name}`}\r\n      visible={visible}\r\n      onOk={pay}\r\n      okText={t`Pay`}\r\n      connectWalletText={t`Connect wallet to pay`}\r\n      onCancel={onCancel}\r\n      confirmLoading={loading}\r\n      width={640}\r\n      centered={true}\r\n    >\r\n      <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\r\n        <p>\r\n          <Trans>\r\n            Paying <strong>{projectMetadata.name}</strong> is not an investment\r\n            — it's a way to support the project. Any value or utility of the\r\n            tokens you receive is determined by{' '}\r\n            <strong>{projectMetadata.name}</strong>.\r\n          </Trans>\r\n        </p>\r\n\r\n        {projectMetadata.payDisclosure && (\r\n          <div>\r\n            <h4>\r\n              <Trans>Notice from {projectMetadata.name}:</Trans>\r\n            </h4>\r\n            <Paragraph description={projectMetadata.payDisclosure} />\r\n          </div>\r\n        )}\r\n\r\n        {riskCount && fundingCycle ? (\r\n          <ProjectRiskNotice\r\n            unsafeProperties={getUnsafeV2FundingCycleProperties(fundingCycle)}\r\n          />\r\n        ) : null}\r\n\r\n        <Descriptions column={1} bordered>\r\n          <Descriptions.Item label={t`Pay amount`} className=\"content-right\">\r\n            {formattedNum(usdAmount)} {V2CurrencyName(V2_CURRENCY_USD)} (\r\n            {formatWad(weiAmount)} {V2CurrencyName(V2_CURRENCY_ETH)})\r\n          </Descriptions.Item>\r\n          <Descriptions.Item\r\n            label={t`${tokenSymbolText({\r\n              capitalize: true,\r\n              plural: true,\r\n            })} for you`}\r\n            className=\"content-right\"\r\n          >\r\n            <div>{formatWad(receivedTickets, { precision: 0 })}</div>\r\n            <div>\r\n              {userAddress ? (\r\n                <Trans>\r\n                  To: <FormattedAddress address={userAddress} />\r\n                </Trans>\r\n              ) : null}\r\n            </div>\r\n          </Descriptions.Item>\r\n          <Descriptions.Item\r\n            label={t`${tokenSymbolText({\r\n              tokenSymbol: tokenSymbol,\r\n              capitalize: true,\r\n              plural: true,\r\n            })} reserved`}\r\n            className=\"content-right\"\r\n          >\r\n            {formatWad(ownerTickets, { precision: 0 })}\r\n          </Descriptions.Item>\r\n        </Descriptions>\r\n        <Form form={form} layout=\"vertical\">\r\n          <MemoFormItem value={memo} onChange={setMemo} />\r\n          <Form.Item>\r\n            <ImageUploader\r\n              text={t`Add image`}\r\n              onSuccess={url => {\r\n                if (!url) return\r\n                setMemo(memo.length ? memo + ' ' + url : url)\r\n              }}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label={\r\n              <>\r\n                <Trans>Custom token beneficiary</Trans>\r\n                <Switch\r\n                  checked={customBeneficiaryEnabled}\r\n                  onChange={setCustomBeneficiaryEnabled}\r\n                  style={{ marginLeft: 10 }}\r\n                />\r\n              </>\r\n            }\r\n            extra={<Trans>Mint tokens to a custom address.</Trans>}\r\n            style={{ marginBottom: '1rem' }}\r\n          />\r\n\r\n          {customBeneficiaryEnabled && (\r\n            <FormItems.EthAddress\r\n              defaultValue={undefined}\r\n              name={'beneficiary'}\r\n              onAddressChange={beneficiary => {\r\n                form.setFieldsValue({ beneficiary })\r\n              }}\r\n              formItemProps={{\r\n                rules: [\r\n                  {\r\n                    validator: validateCustomBeneficiary,\r\n                  },\r\n                ],\r\n              }}\r\n            />\r\n          )}\r\n\r\n          {hasIssuedTokens && (\r\n            <Form.Item label={t`Receive ERC-20`}>\r\n              <Space align=\"start\">\r\n                <Checkbox\r\n                  style={{ padding: 20 }}\r\n                  checked={preferClaimed}\r\n                  onChange={e => setPreferClaimed(e.target.checked)}\r\n                />\r\n                <label htmlFor=\"preferClaimed\">\r\n                  <Trans>\r\n                    Check this to mint this project's ERC-20 tokens to your\r\n                    wallet. Leave unchecked to have your token balance tracked\r\n                    by Juicebox, saving gas on this transaction. You can always\r\n                    claim your ERC-20 tokens later.\r\n                  </Trans>\r\n                </label>\r\n              </Space>\r\n            </Form.Item>\r\n          )}\r\n        </Form>\r\n      </Space>\r\n    </TransactionModal>\r\n  )\r\n}\r\n","import { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { V2UserContext } from 'contexts/v2/userContext'\r\nimport { useContext } from 'react'\r\n\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\n\r\nimport { TransactorInstance } from '../../Transactor'\r\nimport { ETH_TOKEN_ADDRESS } from 'constants/v2/juiceboxTokens'\r\n\r\nconst DEFAULT_DELEGATE_METADATA = 0\r\n\r\ntype PayV2ProjectTx = TransactorInstance<{\r\n  memo: string\r\n  preferClaimedTokens: boolean\r\n  beneficiary?: string\r\n  value: BigNumber\r\n}>\r\n\r\nexport function usePayV2ProjectTx(): PayV2ProjectTx {\r\n  const { transactor, contracts } = useContext(V2UserContext)\r\n  const { projectId } = useContext(V2ProjectContext)\r\n  const minReturnedTokens = 0 // TODO will need a field for this in V2ConfirmPayOwnerModal\r\n\r\n  return ({ memo, preferClaimedTokens, beneficiary, value }, txOpts) => {\r\n    if (\r\n      !transactor ||\r\n      !projectId ||\r\n      !contracts?.JBETHPaymentTerminal ||\r\n      !beneficiary\r\n    ) {\r\n      txOpts?.onDone?.()\r\n      return Promise.resolve(false)\r\n    }\r\n\r\n    return transactor(\r\n      contracts?.JBETHPaymentTerminal,\r\n      'pay',\r\n      [\r\n        projectId,\r\n        value,\r\n        ETH_TOKEN_ADDRESS,\r\n        beneficiary,\r\n        minReturnedTokens,\r\n        preferClaimedTokens,\r\n        memo || '',\r\n        DEFAULT_DELEGATE_METADATA, //delegateMetadata\r\n      ],\r\n      {\r\n        ...txOpts,\r\n        value: value,\r\n      },\r\n    )\r\n  }\r\n}\r\n","import { t, Trans } from '@lingui/macro'\r\nimport { Button, Tooltip } from 'antd'\r\nimport CurrencySymbol from 'components/CurrencySymbol'\r\nimport { useContext, useState } from 'react'\r\nimport { formatWad } from 'utils/formatNumber'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { V2_CURRENCY_USD } from 'utils/v2/currency'\r\nimport PayWarningModal from 'components/PayWarningModal'\r\nimport useWeiConverter from 'hooks/WeiConverter'\r\nimport { V2CurrencyOption } from 'models/v2/currencyOption'\r\nimport { PayButtonProps } from 'components/inputs/Pay/PayInputGroup'\r\n\r\nimport V2ConfirmPayModal from './V2ConfirmPayModal'\r\n\r\nexport default function V2PayButton({\r\n  payAmount,\r\n  payInCurrency,\r\n  onError,\r\n  disabled,\r\n  wrapperStyle,\r\n}: PayButtonProps) {\r\n  const { projectMetadata, fundingCycleMetadata, isArchived } =\r\n    useContext(V2ProjectContext)\r\n\r\n  const [payModalVisible, setPayModalVisible] = useState<boolean>(false)\r\n  const [payWarningModalVisible, setPayWarningModalVisible] =\r\n    useState<boolean>(false)\r\n\r\n  const weiPayAmt = useWeiConverter<V2CurrencyOption>({\r\n    currency: payInCurrency as V2CurrencyOption,\r\n    amount: payAmount,\r\n  })\r\n\r\n  if (!fundingCycleMetadata) return null\r\n\r\n  const payButtonText = projectMetadata?.payButton?.length\r\n    ? projectMetadata.payButton\r\n    : t`Pay`\r\n\r\n  let disabledMessage: string | undefined\r\n  if (isArchived) {\r\n    disabledMessage = t`This project is archived and can't be paid.`\r\n  } else if (fundingCycleMetadata.pausePay) {\r\n    disabledMessage = t`Payments are paused for the current funding cycle.`\r\n  }\r\n\r\n  const isPayDisabled = Boolean(disabledMessage) || disabled\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center', ...wrapperStyle }}>\r\n      <Tooltip\r\n        visible={isPayDisabled ? undefined : false}\r\n        title={disabledMessage}\r\n        className=\"block\"\r\n      >\r\n        <Button\r\n          style={{ width: '100%' }}\r\n          type=\"primary\"\r\n          onClick={() => {\r\n            if (weiPayAmt?.eq(0)) {\r\n              return onError?.()\r\n            }\r\n            setPayWarningModalVisible(true)\r\n          }}\r\n          disabled={isPayDisabled}\r\n        >\r\n          {payButtonText}\r\n        </Button>\r\n      </Tooltip>\r\n      {payInCurrency === V2_CURRENCY_USD && (\r\n        <div style={{ fontSize: '.7rem' }}>\r\n          <Trans>\r\n            Paid as <CurrencySymbol currency=\"ETH\" />\r\n          </Trans>\r\n          {formatWad(weiPayAmt) || '0'}\r\n        </div>\r\n      )}\r\n\r\n      <PayWarningModal\r\n        visible={payWarningModalVisible}\r\n        onOk={() => {\r\n          setPayWarningModalVisible(false)\r\n          setPayModalVisible(true)\r\n        }}\r\n        onCancel={() => setPayWarningModalVisible(false)}\r\n      />\r\n      <V2ConfirmPayModal\r\n        visible={payModalVisible}\r\n        onSuccess={() => window.location.reload()}\r\n        onCancel={() => setPayModalVisible(false)}\r\n        weiAmount={weiPayAmt}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { useContext } from 'react'\r\nimport { V2UserContext } from 'contexts/v2/userContext'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\n\r\nimport { TransactorInstance } from '../../Transactor'\r\nimport { ETH_TOKEN_ADDRESS } from 'constants/v2/juiceboxTokens'\r\n\r\nconst DEFAULT_METADATA = 0\r\n\r\nexport function useAddToBalanceTx(): TransactorInstance<{\r\n  value: BigNumber\r\n}> {\r\n  const { transactor, contracts } = useContext(V2UserContext)\r\n  const { projectId } = useContext(V2ProjectContext)\r\n\r\n  const DEFAULT_MEMO = ''\r\n\r\n  return ({ value }, txOpts) => {\r\n    if (!transactor || !projectId || !contracts?.JBETHPaymentTerminal) {\r\n      txOpts?.onDone?.()\r\n      return Promise.resolve(false)\r\n    }\r\n\r\n    return transactor(\r\n      contracts?.JBETHPaymentTerminal,\r\n      'addToBalanceOf',\r\n      [projectId, value, ETH_TOKEN_ADDRESS, DEFAULT_MEMO, DEFAULT_METADATA],\r\n      {\r\n        ...txOpts,\r\n        value,\r\n      },\r\n    )\r\n  }\r\n}\r\n","import { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { V2UserContext } from 'contexts/v2/userContext'\r\nimport { useContext } from 'react'\r\n\r\nimport { TransactorInstance } from '../../Transactor'\r\n\r\nexport function useTransferProjectOwnershipTx(): TransactorInstance<{\r\n  newOwnerAddress: string // new owner address\r\n}> {\r\n  const { transactor, contracts } = useContext(V2UserContext)\r\n  const { projectId, projectOwnerAddress } = useContext(V2ProjectContext)\r\n\r\n  return ({ newOwnerAddress }, txOpts) => {\r\n    if (!transactor || !projectId || !contracts?.JBProjects) {\r\n      txOpts?.onDone?.()\r\n      return Promise.resolve(false)\r\n    }\r\n    return transactor(\r\n      contracts.JBProjects,\r\n      'safeTransferFrom(address,address,uint256)',\r\n      [projectOwnerAddress, newOwnerAddress, projectId],\r\n      txOpts,\r\n    )\r\n  }\r\n}\r\n","import { NetworkContext } from 'contexts/networkContext'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { useContext } from 'react'\r\nimport { V2UserContext } from 'contexts/v2/userContext'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\n\r\nimport { TransactorInstance } from '../../Transactor'\r\n\r\nexport function useTransferUnclaimedTokensTx(): TransactorInstance<{\r\n  amount: BigNumber\r\n  to: string\r\n}> {\r\n  const { transactor, contracts } = useContext(V2UserContext)\r\n  const { userAddress } = useContext(NetworkContext)\r\n  const { projectId } = useContext(V2ProjectContext)\r\n\r\n  return ({ amount, to }, txOpts) => {\r\n    if (!transactor || !projectId || !contracts?.JBTokenStore) {\r\n      txOpts?.onDone?.()\r\n      return Promise.resolve(false)\r\n    }\r\n\r\n    return transactor(\r\n      contracts.JBTokenStore,\r\n      'transferFrom',\r\n      [userAddress, projectId, to, amount.toHexString()],\r\n      txOpts,\r\n    )\r\n  }\r\n}\r\n","import { t, Trans } from '@lingui/macro'\r\nimport { Button, Tooltip } from 'antd'\r\nimport { ProjectToolsDrawer } from 'components/Project/ProjectToolsDrawer/ProjectToolsDrawer'\r\nimport { ThemeContext } from 'contexts/themeContext'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport {\r\n  useHasPermission,\r\n  V2OperatorPermission,\r\n} from 'hooks/v2/contractReader/HasPermission'\r\nimport { useContext, useState } from 'react'\r\nimport { ToolOutlined } from '@ant-design/icons'\r\n\r\nimport { useAddToBalanceTx } from 'hooks/v2/transactor/AddToBalanceTx'\r\nimport { useTransferProjectOwnershipTx } from 'hooks/v2/transactor/TransferProjectOwnershipTx'\r\nimport { useTransferUnclaimedTokensTx } from 'hooks/v2/transactor/TransferUnclaimedTokensTx'\r\nimport useUserUnclaimedTokenBalance from 'hooks/v2/contractReader/UserUnclaimedTokenBalance'\r\nimport { useDeployProjectPayerTx } from 'hooks/v2/transactor/DeployProjectPayerTx'\r\n\r\nimport ProjectVersionBadge from 'components/ProjectVersionBadge'\r\nimport { useEditV2ProjectDetailsTx } from 'hooks/v2/transactor/EditV2ProjectDetailsTx'\r\n\r\nimport V2ReconfigureFundingModalTrigger from './V2ProjectReconfigureModal/V2ReconfigureModalTrigger'\r\n\r\nexport default function V2ProjectHeaderActions() {\r\n  const { projectId, tokenSymbol, projectOwnerAddress } =\r\n    useContext(V2ProjectContext)\r\n\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n\r\n  const [toolDrawerVisible, setToolDrawerVisible] = useState<boolean>(false)\r\n\r\n  const canReconfigure = useHasPermission(V2OperatorPermission.RECONFIGURE)\r\n\r\n  const showReconfigureButton = canReconfigure\r\n\r\n  const { data: unclaimedTokenBalance } = useUserUnclaimedTokenBalance()\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n      }}\r\n    >\r\n      <span\r\n        style={{\r\n          color: colors.text.tertiary,\r\n          paddingRight: 10,\r\n        }}\r\n      >\r\n        {projectId && <Trans>ID: {projectId}</Trans>}{' '}\r\n        <Tooltip\r\n          title={t`This project uses the V2 version of the Juicebox contracts.`}\r\n        >\r\n          <ProjectVersionBadge versionText=\"V2\" />\r\n        </Tooltip>\r\n      </span>\r\n      <ProjectToolsDrawer\r\n        visible={toolDrawerVisible}\r\n        onClose={() => setToolDrawerVisible(false)}\r\n        unclaimedTokenBalance={unclaimedTokenBalance}\r\n        tokenSymbol={tokenSymbol}\r\n        ownerAddress={projectOwnerAddress}\r\n        useTransferProjectOwnershipTx={useTransferProjectOwnershipTx}\r\n        useTransferUnclaimedTokensTx={useTransferUnclaimedTokensTx}\r\n        useAddToBalanceTx={useAddToBalanceTx}\r\n        useSetProjectUriTx={() => undefined}\r\n        useEditV2ProjectDetailsTx={useEditV2ProjectDetailsTx}\r\n        useDeployProjectPayerTx={useDeployProjectPayerTx}\r\n      />\r\n      <div style={{ display: 'flex' }}>\r\n        <Tooltip title={t`Tools`} placement=\"bottom\">\r\n          <Button\r\n            onClick={() => setToolDrawerVisible(true)}\r\n            icon={<ToolOutlined />}\r\n            type=\"text\"\r\n          />\r\n        </Tooltip>\r\n        {showReconfigureButton && <V2ReconfigureFundingModalTrigger />}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { RightCircleOutlined } from '@ant-design/icons'\r\nimport { Trans } from '@lingui/macro'\r\nimport { Col, Row, Space } from 'antd'\r\nimport PayInputGroup from 'components/inputs/Pay/PayInputGroup'\r\nimport ProjectHeader from 'components/Project/ProjectHeader'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\n\r\nimport { lazy, useContext, useState } from 'react'\r\n\r\nimport { ThemeContext } from 'contexts/themeContext'\r\nimport useMobile from 'hooks/Mobile'\r\nimport {\r\n  useHasPermission,\r\n  V2OperatorPermission,\r\n} from 'hooks/v2/contractReader/HasPermission'\r\nimport useProjectQueuedFundingCycle from 'hooks/v2/contractReader/ProjectQueuedFundingCycle'\r\nimport { useEditV2ProjectDetailsTx } from 'hooks/v2/transactor/EditV2ProjectDetailsTx'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { weightedAmount } from 'utils/v2/math'\r\n\r\nimport { useIsUserAddress } from 'hooks/IsUserAddress'\r\n\r\nimport { v2ProjectRoute } from 'utils/routes'\r\nimport V2BugNotice from 'components/v2/shared/V2BugNotice'\r\n\r\nimport { textSecondary } from 'constants/styles/text'\r\nimport { V2_PROJECT_IDS } from 'constants/v2/projectIds'\r\nimport { RelaunchFundingCycleBanner } from './banners/RelaunchFundingCycleBanner'\r\nimport NewDeployModal from './NewDeployModal'\r\nimport ProjectActivity from './ProjectActivity'\r\nimport TreasuryStats from './TreasuryStats'\r\nimport { V2BalancesModal } from './V2BalancesModal/V2BalancesModal'\r\nimport V2FundingCycleSection from './V2FundingCycleSection'\r\nimport V2ManageTokensSection from './V2ManageTokensSection'\r\nimport V2PayButton from './V2PayButton'\r\nimport V2ProjectHeaderActions from './V2ProjectHeaderActions'\r\n\r\nconst GUTTER_PX = 40\r\n\r\nconst VolumeChart = lazy(() => import('components/VolumeChart'))\r\nimport { V2ReconfigureProjectHandleDrawer } from './V2ReconfigureProjectHandleDrawer'\r\n\r\nconst AllAssetsButton = ({ onClick }: { onClick: VoidFunction }) => {\r\n  const { theme } = useContext(ThemeContext)\r\n  const secondaryTextStyle = textSecondary(theme)\r\n  return (\r\n    <span\r\n      style={{ ...secondaryTextStyle, cursor: 'pointer' }}\r\n      onClick={onClick}\r\n    >\r\n      <Trans>All assets</Trans> <RightCircleOutlined />\r\n    </span>\r\n  )\r\n}\r\n\r\nexport default function V2Project({\r\n  singleColumnLayout,\r\n  expandFundingCycleCard,\r\n}: {\r\n  singleColumnLayout?: boolean\r\n  expandFundingCycleCard?: boolean\r\n}) {\r\n  const {\r\n    createdAt,\r\n    projectId,\r\n    projectMetadata,\r\n    fundingCycle,\r\n    fundingCycleMetadata,\r\n    isPreviewMode,\r\n    tokenSymbol,\r\n    tokenAddress,\r\n    cv,\r\n    isArchived,\r\n    projectOwnerAddress,\r\n    handle,\r\n  } = useContext(V2ProjectContext)\r\n  const canReconfigureFundingCycles = useHasPermission(\r\n    V2OperatorPermission.RECONFIGURE,\r\n  )\r\n\r\n  const [handleModalVisible, setHandleModalVisible] = useState<boolean>()\r\n\r\n  const { data: queuedFundingCycleResponse } = useProjectQueuedFundingCycle({\r\n    projectId,\r\n  })\r\n\r\n  const [queuedFundingCycle] = queuedFundingCycleResponse || []\r\n\r\n  const editV2ProjectDetailsTx = useEditV2ProjectDetailsTx()\r\n\r\n  // Checks URL to see if user was just directed from project deploy\r\n  const location = useLocation()\r\n  const params = new URLSearchParams(location.search)\r\n  const isNewDeploy = Boolean(params.get('newDeploy'))\r\n  const history = useHistory()\r\n  const isMobile = useMobile()\r\n\r\n  const hasEditPermission = useHasPermission(V2OperatorPermission.RECONFIGURE)\r\n\r\n  const isOwner = useIsUserAddress(projectOwnerAddress)\r\n\r\n  const [newDeployModalVisible, setNewDeployModalVisible] =\r\n    useState<boolean>(isNewDeploy)\r\n  const [balancesModalVisible, setBalancesModalVisible] =\r\n    useState<boolean>(false)\r\n\r\n  const colSizeMd = singleColumnLayout ? 24 : 12\r\n  const hasCurrentFundingCycle = fundingCycle?.number.gt(0)\r\n  const hasQueuedFundingCycle = queuedFundingCycle?.number.gt(0)\r\n\r\n  if (projectId === undefined) return null\r\n\r\n  const closeNewDeployModal = () => {\r\n    // Change URL without refreshing page\r\n    history.replace(v2ProjectRoute({ projectId }))\r\n    setNewDeployModalVisible(false)\r\n  }\r\n\r\n  // Temporarily disable pay for V2 projects until V2 contracts have been redeployed\r\n  const payIsDisabledPreV2Redeploy = () => {\r\n    // Do not disable pay for projects with these ids\r\n    const exceptionProjectIds = [V2_PROJECT_IDS.MOON_MARS]\r\n\r\n    if (exceptionProjectIds.includes(projectId)) return false\r\n\r\n    // disable if there's no current funding cycle\r\n    return !hasCurrentFundingCycle\r\n  }\r\n\r\n  return (\r\n    <Space direction=\"vertical\" size={GUTTER_PX} style={{ width: '100%' }}>\r\n      {!hasCurrentFundingCycle &&\r\n      !hasQueuedFundingCycle &&\r\n      canReconfigureFundingCycles ? (\r\n        <RelaunchFundingCycleBanner />\r\n      ) : null}\r\n\r\n      <ProjectHeader\r\n        metadata={projectMetadata}\r\n        actions={!isPreviewMode ? <V2ProjectHeaderActions /> : undefined}\r\n        isArchived={isArchived}\r\n        handle={handle}\r\n        onClickSetHandle={\r\n          isOwner ? () => setHandleModalVisible(true) : undefined\r\n        }\r\n      />\r\n      {!isPreviewMode &&\r\n        hasCurrentFundingCycle === false &&\r\n        hasQueuedFundingCycle === false && <V2BugNotice />}\r\n      <Row gutter={GUTTER_PX} align=\"bottom\">\r\n        <Col md={colSizeMd} xs={24}>\r\n          <TreasuryStats />\r\n          <div style={{ textAlign: 'right' }}>\r\n            <AllAssetsButton onClick={() => setBalancesModalVisible(true)} />\r\n          </div>\r\n        </Col>\r\n        <Col md={colSizeMd} xs={24} style={{ marginTop: GUTTER_PX }}>\r\n          <PayInputGroup\r\n            PayButton={V2PayButton}\r\n            reservedRate={fundingCycleMetadata?.reservedRate.toNumber()}\r\n            weight={fundingCycle?.weight}\r\n            weightingFn={weightedAmount}\r\n            tokenSymbol={tokenSymbol}\r\n            tokenAddress={tokenAddress}\r\n            disabled={isPreviewMode || payIsDisabledPreV2Redeploy()}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row gutter={GUTTER_PX}>\r\n        <Col md={colSizeMd} xs={24}>\r\n          <Space\r\n            direction=\"vertical\"\r\n            size={GUTTER_PX}\r\n            style={{ width: '100%' }}\r\n          >\r\n            {!isPreviewMode ? (\r\n              <VolumeChart\r\n                style={{ height: 240 }}\r\n                createdAt={createdAt}\r\n                projectId={projectId}\r\n                cv={cv ?? '2'}\r\n              />\r\n            ) : null}\r\n            <V2ManageTokensSection />\r\n            <V2FundingCycleSection expandCard={expandFundingCycleCard} />\r\n          </Space>\r\n        </Col>\r\n\r\n        {!isPreviewMode ? (\r\n          <Col\r\n            md={colSizeMd}\r\n            xs={24}\r\n            style={{ marginTop: isMobile ? GUTTER_PX : 0 }}\r\n          >\r\n            <ProjectActivity />\r\n          </Col>\r\n        ) : null}\r\n      </Row>\r\n      <NewDeployModal\r\n        visible={newDeployModalVisible}\r\n        onClose={closeNewDeployModal}\r\n      />\r\n      <V2BalancesModal\r\n        owner={projectOwnerAddress}\r\n        projectMetadata={projectMetadata}\r\n        projectName={projectMetadata?.name}\r\n        hasEditPermissions={hasEditPermission}\r\n        visible={balancesModalVisible}\r\n        onCancel={() => setBalancesModalVisible(false)}\r\n        storeCidTx={editV2ProjectDetailsTx}\r\n      />\r\n      {isOwner && !handle && (\r\n        <V2ReconfigureProjectHandleDrawer\r\n          visible={handleModalVisible}\r\n          onFinish={() => setHandleModalVisible(false)}\r\n        />\r\n      )}\r\n    </Space>\r\n  )\r\n}\r\n","import { t, Trans } from '@lingui/macro'\r\nimport { Form, Modal } from 'antd'\r\nimport { useForm } from 'antd/lib/form/Form'\r\nimport FormattedNumberInput from 'components/inputs/FormattedNumberInput'\r\nimport InputAccessoryButton from 'components/InputAccessoryButton'\r\nimport TooltipLabel from 'components/TooltipLabel'\r\n\r\nimport { CurrencyName } from 'constants/currency'\r\n\r\nexport default function SpecificLimitModal({\r\n  visible,\r\n  onClose,\r\n  setDistributionLimit,\r\n  currencyName,\r\n  onCurrencyChange,\r\n}: {\r\n  visible: boolean\r\n  onClose: VoidFunction\r\n  setDistributionLimit: (distributionLimit: string) => void\r\n  currencyName: CurrencyName\r\n  onCurrencyChange: (currencyName: CurrencyName) => void\r\n}) {\r\n  const [form] = useForm<{ distributionLimit: string }>()\r\n\r\n  function setNewSplitsFromLimit() {\r\n    form.validateFields()\r\n\r\n    setDistributionLimit(form.getFieldValue('distributionLimit'))\r\n    onClose()\r\n  }\r\n\r\n  const toggleCurrency = () => {\r\n    const newCurrency = currencyName === 'ETH' ? 'USD' : 'ETH'\r\n    onCurrencyChange(newCurrency)\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      visible={visible}\r\n      onCancel={onClose}\r\n      title={\r\n        <TooltipLabel\r\n          label={t`Set a distribution limit`}\r\n          tip={t`This is the maximum amount of funds that can leave the treasury each funding cycle.`}\r\n        />\r\n      }\r\n      onOk={setNewSplitsFromLimit}\r\n    >\r\n      <Form form={form}>\r\n        <FormattedNumberInput\r\n          placeholder=\"0\"\r\n          onChange={distributionLimit =>\r\n            form.setFieldsValue({\r\n              distributionLimit,\r\n            })\r\n          }\r\n          name=\"distributionLimit\"\r\n          formItemProps={{\r\n            rules: [{ required: true }],\r\n            extra: (\r\n              <TooltipLabel\r\n                label={t`Set this to the sum of all your payouts`}\r\n                tip={\r\n                  <Trans>\r\n                    Each payout will receive their percent of this total each\r\n                    funding cycle if there is enough in the treasury. Otherwise,\r\n                    they will receive their percent of whatever is in the\r\n                    treasury.\r\n                  </Trans>\r\n                }\r\n              />\r\n            ),\r\n          }}\r\n          min={0}\r\n          accessory={\r\n            <InputAccessoryButton\r\n              withArrow\r\n              content={currencyName}\r\n              onClick={toggleCurrency}\r\n            />\r\n          }\r\n        />\r\n      </Form>\r\n    </Modal>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { MinimalCollapse } from 'components/MinimalCollapse'\r\nimport ExternalLink from 'components/ExternalLink'\r\nimport { CSSProperties } from 'react'\r\nimport { helpPagePath } from 'utils/helpPageHelper'\r\n\r\nexport function PayoutConfigurationExplainerCollapse({\r\n  style,\r\n}: {\r\n  style?: CSSProperties\r\n}) {\r\n  return (\r\n    <MinimalCollapse header={<Trans>How do I decide?</Trans>} style={style}>\r\n      <p>\r\n        <Trans>\r\n          Use <strong>Amounts</strong> when you want to configure a{' '}\r\n          <strong>distribution limit</strong>. Treasury funds that exceed the\r\n          distribution limit are called <strong>overflow</strong>. Token holders\r\n          can redeem (burn) their tokens for a portion of the overflow.{' '}\r\n          <ExternalLink href={helpPagePath('dev/learn/glossary/overflow')}>\r\n            Learn more\r\n          </ExternalLink>\r\n          .\r\n        </Trans>\r\n      </p>\r\n\r\n      <p>\r\n        <Trans>\r\n          Use <strong>Percentages</strong> when you want to configure an{' '}\r\n          <strong>infinite distribution limit.</strong> With an infinite\r\n          distribution limit, your project reserves all funds for itself. Your\r\n          project won't have overflow, so tokens can never be redeemed for ETH.{' '}\r\n          <ExternalLink href={helpPagePath('dev/learn/glossary/overflow')}>\r\n            Learn more\r\n          </ExternalLink>\r\n          .\r\n        </Trans>\r\n      </p>\r\n    </MinimalCollapse>\r\n  )\r\n}\r\n","import { t, Trans } from '@lingui/macro'\r\nimport { Button, Form, Radio, Space } from 'antd'\r\nimport { useCallback, useContext, useEffect, useState } from 'react'\r\n\r\nimport { Split } from 'models/v2/splits'\r\nimport { FormItemExt } from 'components/formItems/formItemExt'\r\nimport { fromWad, parseWad } from 'utils/formatNumber'\r\nimport DistributionLimit from 'components/v2/V2Project/DistributionLimit'\r\nimport TooltipIcon from 'components/TooltipIcon'\r\nimport {\r\n  adjustedSplitPercents,\r\n  getNewDistributionLimit,\r\n  getTotalSplitsPercentage,\r\n} from 'utils/v2/distributions'\r\nimport { ThemeContext } from 'contexts/themeContext'\r\nimport { MAX_DISTRIBUTION_LIMIT, splitPercentFrom } from 'utils/v2/math'\r\nimport { NetworkContext } from 'contexts/networkContext'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { filter } from 'lodash'\r\n\r\nimport { v2ProjectRoute } from 'utils/routes'\r\n\r\nimport DistributionSplitCard from './DistributionSplitCard'\r\nimport { CurrencyName } from 'constants/currency'\r\nimport DistributionSplitModal from './DistributionSplitModal'\r\nimport SpecificLimitModal from './SpecificLimitModal'\r\nimport { PayoutConfigurationExplainerCollapse } from './PayoutConfigurationExplainerCollapse'\r\n\r\ntype DistributionType = 'amount' | 'percent'\r\n\r\nexport default function DistributionSplitsSection({\r\n  distributionLimit,\r\n  setDistributionLimit,\r\n  currencyName,\r\n  onCurrencyChange,\r\n  editableSplits,\r\n  lockedSplits,\r\n  onSplitsChanged,\r\n  formItemProps,\r\n}: {\r\n  distributionLimit: string | undefined\r\n  setDistributionLimit: (distributionLimit: string) => void\r\n  currencyName: CurrencyName\r\n  onCurrencyChange: (currencyName: CurrencyName) => void\r\n  editableSplits: Split[]\r\n  lockedSplits: Split[]\r\n  onSplitsChanged: (splits: Split[]) => void\r\n} & FormItemExt) {\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n  const { userAddress } = useContext(NetworkContext)\r\n\r\n  const distributionLimitIsInfinite =\r\n    !distributionLimit || parseWad(distributionLimit).eq(MAX_DISTRIBUTION_LIMIT)\r\n\r\n  const [addSplitModalVisible, setAddSplitModalVisible] =\r\n    useState<boolean>(false)\r\n\r\n  const [distributionType, setDistributionType] = useState<DistributionType>(\r\n    distributionLimitIsInfinite ? 'percent' : 'amount',\r\n  )\r\n\r\n  const [specificLimitModalOpen, setSpecificLimitModalOpen] =\r\n    useState<boolean>(false)\r\n\r\n  const allSplits = lockedSplits.concat(editableSplits)\r\n\r\n  const renderSplitCard = useCallback(\r\n    (split: Split, index: number, isLocked?: boolean) => {\r\n      if (!split) return\r\n      const isFirstSplit =\r\n        editableSplits.length === 0 ||\r\n        (editableSplits.length === 1 && index === 0)\r\n      return (\r\n        <DistributionSplitCard\r\n          split={split}\r\n          splits={allSplits}\r\n          distributionLimit={distributionLimit}\r\n          setDistributionLimit={setDistributionLimit}\r\n          onSplitsChanged={onSplitsChanged}\r\n          onCurrencyChange={isFirstSplit ? onCurrencyChange : undefined}\r\n          currencyName={currencyName}\r\n          isLocked={isLocked}\r\n          onSplitDelete={split => {\r\n            let adjustedSplits = allSplits\r\n            if (!distributionLimitIsInfinite && allSplits.length !== 1) {\r\n              const newDistributionLimit = getNewDistributionLimit({\r\n                currentDistributionLimit: distributionLimit,\r\n                newSplitAmount: 0,\r\n                editingSplitPercent: split.percent,\r\n              }).toString()\r\n              adjustedSplits = adjustedSplitPercents({\r\n                splits: editableSplits,\r\n                oldDistributionLimit: distributionLimit,\r\n                newDistributionLimit,\r\n              })\r\n              setDistributionLimit(newDistributionLimit)\r\n            }\r\n            if (allSplits.length === 1) setDistributionLimit('0')\r\n            const splitsAfterDelete = filter(\r\n              adjustedSplits,\r\n              s => s.beneficiary !== split.beneficiary,\r\n            )\r\n\r\n            onSplitsChanged(splitsAfterDelete)\r\n          }}\r\n        />\r\n      )\r\n    },\r\n    [\r\n      editableSplits,\r\n      allSplits,\r\n      distributionLimit,\r\n      setDistributionLimit,\r\n      onSplitsChanged,\r\n      onCurrencyChange,\r\n      currencyName,\r\n      distributionLimitIsInfinite,\r\n    ],\r\n  )\r\n\r\n  useEffect(() => {\r\n    setDistributionType(distributionLimitIsInfinite ? 'percent' : 'amount')\r\n  }, [distributionLimitIsInfinite])\r\n\r\n  if (!allSplits) return null\r\n\r\n  const totalSplitsPercentage = getTotalSplitsPercentage(allSplits)\r\n  const totalSplitsPercentageInvalid = totalSplitsPercentage > 100\r\n  const remainingSplitsPercentage = 100 - getTotalSplitsPercentage(allSplits) // this amount goes to the project owner\r\n  let ownerSplit: Split\r\n\r\n  if (remainingSplitsPercentage) {\r\n    ownerSplit = {\r\n      beneficiary: userAddress,\r\n      percent: splitPercentFrom(remainingSplitsPercentage).toNumber(),\r\n    } as Split\r\n  }\r\n\r\n  function OwnerSplitCard() {\r\n    return (\r\n      <DistributionSplitCard\r\n        split={ownerSplit}\r\n        splits={allSplits}\r\n        distributionLimit={distributionLimit}\r\n        setDistributionLimit={setDistributionLimit}\r\n        onSplitsChanged={onSplitsChanged}\r\n        onCurrencyChange={onCurrencyChange}\r\n        currencyName={currencyName}\r\n        isLocked={distributionLimitIsInfinite}\r\n        isProjectOwner\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Form.Item\r\n      {...formItemProps}\r\n      style={{\r\n        ...formItemProps?.style,\r\n        display: 'block',\r\n        marginBottom: 0,\r\n      }}\r\n    >\r\n      <Space\r\n        direction=\"vertical\"\r\n        style={{ width: '100%', minHeight: 0 }}\r\n        size=\"large\"\r\n      >\r\n        <Form.Item style={{ marginBottom: 0 }}>\r\n          <p style={{ color: colors.text.primary }}>\r\n            <Trans>Choose how you would like to configure your payouts.</Trans>\r\n          </p>\r\n          <PayoutConfigurationExplainerCollapse\r\n            style={{ marginBottom: '1rem' }}\r\n          />\r\n          <Radio.Group\r\n            onChange={e => {\r\n              const newType = e.target.value\r\n              if (newType === 'percent') {\r\n                setDistributionLimit(fromWad(MAX_DISTRIBUTION_LIMIT))\r\n                setDistributionType(newType)\r\n              } else if (newType === 'amount') {\r\n                if (editableSplits.length) {\r\n                  setSpecificLimitModalOpen(true)\r\n                } else {\r\n                  setDistributionLimit('0')\r\n                  setDistributionType(newType)\r\n                }\r\n                if (\r\n                  remainingSplitsPercentage &&\r\n                  remainingSplitsPercentage !== 100\r\n                ) {\r\n                  editableSplits.push(ownerSplit)\r\n                }\r\n              }\r\n            }}\r\n            value={distributionType}\r\n          >\r\n            <Space direction=\"vertical\">\r\n              <Radio value=\"amount\">\r\n                <Trans>Amounts</Trans>\r\n                <p style={{ fontWeight: 400, fontSize: '0.8rem' }}>\r\n                  <Trans>\r\n                    Distribute a specific amount of funds to entities each\r\n                    funding cycle. Your distribution limit will equal the{' '}\r\n                    <strong>sum of all payout amounts.</strong>\r\n                  </Trans>\r\n                </p>\r\n              </Radio>\r\n              <Radio value=\"percent\">\r\n                <Trans>Percentages</Trans>\r\n                <p style={{ fontWeight: 400, fontSize: '0.8rem' }}>\r\n                  <Trans>\r\n                    Distribute a percentage of all funds received to entities.\r\n                    Your distribution limit will be <strong>infinite</strong>.\r\n                  </Trans>\r\n                </p>\r\n              </Radio>\r\n            </Space>\r\n          </Radio.Group>\r\n        </Form.Item>\r\n\r\n        <Space style={{ width: '100%' }} direction=\"vertical\" size=\"small\">\r\n          {editableSplits.map((split, index) => renderSplitCard(split, index))}\r\n        </Space>\r\n        {lockedSplits ? (\r\n          <Space style={{ width: '100%' }} direction=\"vertical\" size=\"small\">\r\n            {lockedSplits.map((split, index) =>\r\n              renderSplitCard(split, index, true),\r\n            )}\r\n          </Space>\r\n        ) : null}\r\n        {totalSplitsPercentageInvalid ? (\r\n          <span style={{ color: colors.text.failure, fontWeight: 600 }}>\r\n            <Trans>Sum of percentages cannot exceed 100%.</Trans>\r\n          </span>\r\n        ) : remainingSplitsPercentage > 0 && distributionLimit !== '0' ? (\r\n          <OwnerSplitCard />\r\n        ) : null}\r\n        <Form.Item\r\n          extra={\r\n            <Space size=\"small\">\r\n              <Trans>\r\n                Payouts to Ethereum addresses incur a 2.5% JBX membership fee\r\n              </Trans>\r\n              <TooltipIcon\r\n                tip={\r\n                  <Trans>\r\n                    When distributing, payouts to Ethereum addresses incur a\r\n                    2.5% JBX membership fee. Payouts to other Juicebox projects\r\n                    don't incur fees. Your project will receive (the{' '}\r\n                    <Link to={v2ProjectRoute({ projectId: 1 })}>\r\n                      JuiceboxDAO\r\n                    </Link>{' '}\r\n                    token) in return at the current issuance rate.\r\n                  </Trans>\r\n                }\r\n              />\r\n            </Space>\r\n          }\r\n        >\r\n          <Button\r\n            type=\"dashed\"\r\n            onClick={() => {\r\n              setAddSplitModalVisible(true)\r\n            }}\r\n            block\r\n          >\r\n            <Trans>Add payout</Trans>\r\n          </Button>\r\n        </Form.Item>\r\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n          <span style={{ color: colors.text.primary }}>\r\n            <Trans>\r\n              Distribution Limit{' '}\r\n              <TooltipIcon\r\n                tip={t`The maximum amount of funds that can be distributed from the treasury each funding cycle.`}\r\n                placement={'topLeft'}\r\n                iconStyle={{ marginRight: 5 }}\r\n              />\r\n              :\r\n            </Trans>\r\n          </span>\r\n          <span>\r\n            <strong>\r\n              <DistributionLimit\r\n                distributionLimit={parseWad(distributionLimit)}\r\n                currencyName={currencyName}\r\n                showTooltip\r\n              />\r\n            </strong>\r\n          </span>\r\n        </div>\r\n      </Space>\r\n      <DistributionSplitModal\r\n        visible={addSplitModalVisible}\r\n        onSplitsChanged={onSplitsChanged}\r\n        mode={'Add'}\r\n        splits={allSplits}\r\n        distributionLimit={distributionLimit}\r\n        setDistributionLimit={setDistributionLimit}\r\n        currencyName={currencyName}\r\n        onCurrencyChange={onCurrencyChange}\r\n        onClose={() => setAddSplitModalVisible(false)}\r\n      />\r\n      <SpecificLimitModal\r\n        visible={specificLimitModalOpen}\r\n        onClose={() => setSpecificLimitModalOpen(false)}\r\n        setDistributionLimit={setDistributionLimit}\r\n        currencyName={currencyName}\r\n        onCurrencyChange={onCurrencyChange}\r\n      />\r\n    </Form.Item>\r\n  )\r\n}\r\n","import { t } from '@lingui/macro'\r\n\r\nexport type DurationUnitsOption = 'days' | 'hours' | 'minutes' | 'seconds'\r\n\r\nexport const DURATION_UNIT_OPTIONS: DurationUnitsOption[] = [\r\n  'days',\r\n  'hours',\r\n  'minutes',\r\n  'seconds',\r\n]\r\n\r\nexport const durationUnitText = (unit: DurationUnitsOption) => {\r\n  switch (unit) {\r\n    case 'seconds':\r\n      return t`Seconds`\r\n    case 'hours':\r\n      return t`Hours`\r\n    case 'minutes':\r\n      return t`Minutes`\r\n    default:\r\n      return t`Days`\r\n  }\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { Form, Select } from 'antd'\r\nimport FormattedNumberInput from 'components/inputs/FormattedNumberInput'\r\n\r\nimport {\r\n  DurationUnitsOption,\r\n  durationUnitText,\r\n  DURATION_UNIT_OPTIONS,\r\n} from 'constants/time'\r\n\r\nexport default function DurationInputAndSelect({\r\n  defaultDurationUnit,\r\n}: {\r\n  defaultDurationUnit: DurationUnitsOption | undefined\r\n}) {\r\n  return (\r\n    <div style={{ display: 'flex' }}>\r\n      <Form.Item\r\n        name=\"duration\"\r\n        label={<Trans>Funding cycle duration</Trans>}\r\n        style={{ width: '100%' }}\r\n        required\r\n      >\r\n        <FormattedNumberInput\r\n          placeholder=\"30\"\r\n          min={1}\r\n          style={{ paddingRight: 15 }}\r\n        />\r\n      </Form.Item>\r\n      <Form.Item name=\"durationUnit\" label={<span></span>}>\r\n        <Select\r\n          className=\"medium\"\r\n          style={{\r\n            minWidth: 125,\r\n            height: 32,\r\n          }}\r\n          defaultValue={defaultDurationUnit}\r\n        >\r\n          {DURATION_UNIT_OPTIONS.map(value => (\r\n            <Select.Option key={value} value={value}>\r\n              {durationUnitText(value)}\r\n            </Select.Option>\r\n          ))}\r\n        </Select>\r\n      </Form.Item>\r\n    </div>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { MinimalCollapse } from 'components/MinimalCollapse'\r\n\r\nexport function FundingCycleExplainerCollapse() {\r\n  return (\r\n    <MinimalCollapse header={<Trans>What are automated funding cycles?</Trans>}>\r\n      <div>\r\n        <p>\r\n          <Trans>\r\n            Automated funding cycles enable the following characteristics:\r\n          </Trans>\r\n        </p>\r\n        <ol style={{ marginBottom: 0 }}>\r\n          <li>\r\n            <Trans>\r\n              <strong>Recurring funding cycles</strong>. For example, distribute\r\n              funds from your project's treasury every week.\r\n            </Trans>\r\n          </li>\r\n          <li>\r\n            <Trans>\r\n              <strong>Discount rate</strong>, to reduce your project token's\r\n              issuance rate (tokens per ETH) each funding cycle.\r\n            </Trans>\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    </MinimalCollapse>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\n\r\nimport { Button, Form } from 'antd'\r\n\r\nimport {\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useLayoutEffect,\r\n  useMemo,\r\n  useState,\r\n} from 'react'\r\n\r\nimport { ThemeContext } from 'contexts/themeContext'\r\n\r\nimport { V2CurrencyOption } from 'models/v2/currencyOption'\r\n\r\nimport { useAppDispatch } from 'hooks/AppDispatch'\r\nimport {\r\n  defaultFundingCycleData,\r\n  defaultFundingCycleMetadata,\r\n  editingV2ProjectActions,\r\n} from 'redux/slices/editingV2Project'\r\nimport { V2UserContext } from 'contexts/v2/userContext'\r\nimport { useAppSelector } from 'hooks/AppSelector'\r\nimport { SerializedV2FundAccessConstraint } from 'utils/v2/serializers'\r\n\r\nimport { sanitizeSplit } from 'utils/v2/splits'\r\n\r\nimport { getDefaultFundAccessConstraint } from 'utils/v2/fundingCycle'\r\nimport {\r\n  getV2CurrencyOption,\r\n  V2CurrencyName,\r\n  V2_CURRENCY_ETH,\r\n} from 'utils/v2/currency'\r\n\r\nimport ExternalLink from 'components/ExternalLink'\r\n\r\nimport { Split } from 'models/v2/splits'\r\n\r\nimport {\r\n  DEFAULT_FUNDING_CYCLE_DURATION,\r\n  MAX_DISTRIBUTION_LIMIT,\r\n} from 'utils/v2/math'\r\n\r\nimport {\r\n  deriveDurationUnit,\r\n  secondsToOtherUnit,\r\n  otherUnitToSeconds,\r\n} from 'utils/formatTime'\r\nimport { fromWad } from 'utils/formatNumber'\r\n\r\nimport FormItemWarningText from 'components/FormItemWarningText'\r\n\r\nimport SwitchHeading from 'components/SwitchHeading'\r\nimport DistributionSplitsSection from 'components/v2/shared/DistributionSplitsSection'\r\nimport { getTotalSplitsPercentage } from 'utils/v2/distributions'\r\nimport { V2ProjectContext } from 'contexts/v2/projectContext'\r\nimport { ItemNoInput } from 'components/formItems/ItemNoInput'\r\nimport { helpPagePath } from 'utils/helpPageHelper'\r\n\r\nimport isEqual from 'lodash/isEqual'\r\n\r\nimport { ETH_TOKEN_ADDRESS } from 'constants/v2/juiceboxTokens'\r\n\r\nimport { shadowCard } from 'constants/styles/shadowCard'\r\n\r\nimport DurationInputAndSelect from './DurationInputAndSelect'\r\nimport { DurationUnitsOption } from 'constants/time'\r\n\r\nimport { FundingCycleExplainerCollapse } from './FundingCycleExplainerCollapse'\r\n\r\ntype FundingFormFields = {\r\n  duration?: string\r\n  durationUnit?: DurationUnitsOption\r\n  durationEnabled?: boolean\r\n  totalSplitsPercentage?: number\r\n}\r\n\r\nexport default function FundingForm({\r\n  onFormUpdated,\r\n  onFinish,\r\n  isCreate,\r\n}: {\r\n  onFormUpdated?: (updated: boolean) => void\r\n  onFinish: VoidFunction\r\n  isCreate?: boolean // Instance of FundingForm in create flow\r\n}) {\r\n  const {\r\n    theme,\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n  const { contracts } = useContext(V2UserContext)\r\n  const { payoutSplits } = useContext(V2ProjectContext)\r\n\r\n  const dispatch = useAppDispatch()\r\n\r\n  const [fundingForm] = Form.useForm<FundingFormFields>()\r\n\r\n  // Load redux state (will be empty in create flow)\r\n  const { fundAccessConstraints, fundingCycleData, payoutGroupedSplits } =\r\n    useAppSelector(state => state.editingV2Project)\r\n  const fundAccessConstraint =\r\n    getDefaultFundAccessConstraint<SerializedV2FundAccessConstraint>(\r\n      fundAccessConstraints,\r\n    )\r\n\r\n  const [splits, setSplits] = useState<Split[]>([])\r\n  // Must differentiate between splits loaded from redux and\r\n  // ones just added to be able to still edit splits you've\r\n  // added with a lockedUntil\r\n  const [editingSplits, setEditingSplits] = useState<Split[]>([])\r\n\r\n  const [distributionLimit, setDistributionLimit] = useState<\r\n    string | undefined\r\n  >('0')\r\n\r\n  const [distributionLimitCurrency, setDistributionLimitCurrency] =\r\n    useState<V2CurrencyOption>(V2_CURRENCY_ETH)\r\n  const [durationEnabled, setDurationEnabled] = useState<boolean>(false)\r\n\r\n  // Form initial values set by default\r\n  const initialValues = useMemo(\r\n    () => ({\r\n      durationSeconds: fundingCycleData ? fundingCycleData.duration : '0',\r\n      distributionLimit: fundAccessConstraint?.distributionLimit ?? '0',\r\n      distributionLimitCurrency: parseInt(\r\n        fundAccessConstraint?.distributionLimitCurrency ??\r\n          V2_CURRENCY_ETH.toString(),\r\n      ) as V2CurrencyOption,\r\n      payoutSplits: payoutGroupedSplits.splits,\r\n    }),\r\n    [fundingCycleData, fundAccessConstraint, payoutGroupedSplits],\r\n  )\r\n\r\n  const {\r\n    editableSplits,\r\n    lockedSplits,\r\n  }: {\r\n    editableSplits: Split[]\r\n    lockedSplits: Split[]\r\n  } = useMemo(() => {\r\n    const now = new Date().valueOf() / 1000\r\n\r\n    // Checks if the given split exists in the projectContext splits.\r\n    // If it doesn't, then it means it was just added or edited is which case\r\n    // we want to still be able to edit it\r\n    const confirmedSplitsIncludesSplit = (split: Split) => {\r\n      let includes = false\r\n      payoutSplits?.forEach(confirmedSplit => {\r\n        if (isEqual(confirmedSplit, split)) {\r\n          includes = true\r\n        }\r\n      })\r\n      return includes\r\n    }\r\n\r\n    const isLockedSplit = (split: Split) => {\r\n      return (\r\n        split.lockedUntil &&\r\n        split.lockedUntil > now &&\r\n        !isCreate &&\r\n        confirmedSplitsIncludesSplit(split)\r\n      )\r\n    }\r\n\r\n    const lockedSplits = splits?.filter(split => isLockedSplit(split)) ?? []\r\n    const editableSplits = splits?.filter(split => !isLockedSplit(split)) ?? []\r\n    return {\r\n      lockedSplits,\r\n      editableSplits,\r\n    }\r\n  }, [splits, isCreate, payoutSplits])\r\n\r\n  useLayoutEffect(() => setEditingSplits(editableSplits), [editableSplits])\r\n\r\n  // Loads redux state into form\r\n  const resetProjectForm = useCallback(() => {\r\n    const _distributionLimit = fundAccessConstraint?.distributionLimit ?? '0'\r\n    const _distributionLimitCurrency = parseInt(\r\n      fundAccessConstraint?.distributionLimitCurrency ??\r\n        V2_CURRENCY_ETH.toString(),\r\n    ) as V2CurrencyOption\r\n\r\n    const durationSeconds = fundingCycleData\r\n      ? parseInt(fundingCycleData.duration)\r\n      : 0\r\n    setDurationEnabled(durationSeconds > 0)\r\n\r\n    const durationUnit = deriveDurationUnit(durationSeconds)\r\n\r\n    fundingForm.setFieldsValue({\r\n      durationUnit: durationUnit,\r\n      duration: secondsToOtherUnit({\r\n        duration: durationSeconds,\r\n        unit: durationUnit,\r\n      }).toString(),\r\n    })\r\n\r\n    const payoutSplits = payoutGroupedSplits?.splits\r\n\r\n    setDistributionLimit(_distributionLimit)\r\n    setDistributionLimitCurrency(_distributionLimitCurrency)\r\n    setSplits(payoutSplits ?? [])\r\n  }, [fundingForm, fundingCycleData, fundAccessConstraint, payoutGroupedSplits])\r\n\r\n  const onFundingFormSave = useCallback(\r\n    async (fields: FundingFormFields) => {\r\n      if (!contracts) throw new Error('Failed to save funding configuration.')\r\n\r\n      const fundAccessConstraint: SerializedV2FundAccessConstraint | undefined =\r\n        {\r\n          terminal: contracts.JBETHPaymentTerminal.address,\r\n          token: ETH_TOKEN_ADDRESS,\r\n          distributionLimit:\r\n            distributionLimit ?? fromWad(MAX_DISTRIBUTION_LIMIT),\r\n          distributionLimitCurrency:\r\n            distributionLimitCurrency?.toString() ?? V2_CURRENCY_ETH,\r\n          overflowAllowance: '0', // nothing for the time being.\r\n          overflowAllowanceCurrency: '0',\r\n        }\r\n\r\n      const duration = fields?.duration ? parseInt(fields?.duration) : 0\r\n      const durationUnit = fields?.durationUnit ?? 'days'\r\n\r\n      const durationInSeconds = otherUnitToSeconds({\r\n        duration: duration,\r\n        unit: durationUnit,\r\n      }).toString()\r\n\r\n      dispatch(\r\n        editingV2ProjectActions.setFundAccessConstraints(\r\n          fundAccessConstraint ? [fundAccessConstraint] : [],\r\n        ),\r\n      )\r\n      dispatch(\r\n        editingV2ProjectActions.setPayoutSplits(\r\n          lockedSplits.concat(editingSplits).map(sanitizeSplit),\r\n        ),\r\n      )\r\n      dispatch(editingV2ProjectActions.setDuration(durationInSeconds ?? '0'))\r\n\r\n      // reset discount rate if duration is 0\r\n      if (!durationInSeconds || durationInSeconds === '0') {\r\n        dispatch(\r\n          editingV2ProjectActions.setDiscountRate(\r\n            defaultFundingCycleData.discountRate,\r\n          ),\r\n        )\r\n      }\r\n\r\n      // reset redemption rate if distributionLimit is 0\r\n      if (!distributionLimit || distributionLimit === '0') {\r\n        dispatch(\r\n          editingV2ProjectActions.setRedemptionRate(\r\n            defaultFundingCycleMetadata.redemptionRate,\r\n          ),\r\n        )\r\n        dispatch(\r\n          editingV2ProjectActions.setBallotRedemptionRate(\r\n            defaultFundingCycleMetadata.ballotRedemptionRate,\r\n          ),\r\n        )\r\n      }\r\n\r\n      onFinish?.()\r\n    },\r\n    [\r\n      editingSplits,\r\n      lockedSplits,\r\n      contracts,\r\n      dispatch,\r\n      distributionLimit,\r\n      distributionLimitCurrency,\r\n      onFinish,\r\n    ],\r\n  )\r\n\r\n  // initially fill form with any existing redux state\r\n  useLayoutEffect(() => {\r\n    resetProjectForm()\r\n  }, [resetProjectForm])\r\n\r\n  // Ensures total split percentages do not exceed 100\r\n  const validateTotalSplitsPercentage = () => {\r\n    if (fundingForm.getFieldValue('totalSplitsPercentage') > 100)\r\n      return Promise.reject()\r\n    return Promise.resolve()\r\n  }\r\n\r\n  const onFormChange = useCallback(() => {\r\n    const duration = fundingForm.getFieldValue('duration') as number\r\n    const durationUnit = fundingForm.getFieldValue(\r\n      'durationUnit',\r\n    ) as DurationUnitsOption\r\n\r\n    const durationInSeconds = durationEnabled\r\n      ? otherUnitToSeconds({\r\n          duration: duration,\r\n          unit: durationUnit,\r\n        }).toString()\r\n      : '0'\r\n    const splits = lockedSplits.concat(editingSplits).map(sanitizeSplit)\r\n    const hasFormUpdated =\r\n      initialValues.durationSeconds !== durationInSeconds ||\r\n      initialValues.distributionLimit !== distributionLimit ||\r\n      initialValues.distributionLimitCurrency !== distributionLimitCurrency ||\r\n      !isEqual(initialValues.payoutSplits, splits)\r\n    onFormUpdated?.(hasFormUpdated)\r\n  }, [\r\n    durationEnabled,\r\n    editingSplits,\r\n    fundingForm,\r\n    initialValues,\r\n    lockedSplits,\r\n    onFormUpdated,\r\n    distributionLimitCurrency,\r\n    distributionLimit,\r\n  ])\r\n\r\n  useEffect(() => {\r\n    onFormChange()\r\n  }, [onFormChange])\r\n\r\n  return (\r\n    <Form\r\n      form={fundingForm}\r\n      onValuesChange={onFormChange}\r\n      layout=\"vertical\"\r\n      onFinish={onFundingFormSave}\r\n    >\r\n      <div\r\n        style={{\r\n          padding: '2rem',\r\n          marginBottom: 10,\r\n          ...shadowCard(theme),\r\n          color: colors.text.primary,\r\n        }}\r\n      >\r\n        <SwitchHeading\r\n          checked={durationEnabled}\r\n          onChange={checked => {\r\n            setDurationEnabled(checked)\r\n\r\n            if (!checked) {\r\n              fundingForm.setFieldsValue({ duration: '0' })\r\n            }\r\n            fundingForm.setFieldsValue({\r\n              duration: DEFAULT_FUNDING_CYCLE_DURATION.toString(),\r\n            })\r\n          }}\r\n          style={{ marginBottom: '1rem' }}\r\n        >\r\n          <Trans>Automate funding cycles</Trans>\r\n        </SwitchHeading>\r\n\r\n        {!durationEnabled ? (\r\n          <FormItemWarningText>\r\n            <Trans>\r\n              With no funding cycles, the project's owner can start a new\r\n              funding cycle (Funding Cycle #2) on-demand.{' '}\r\n              <ExternalLink href={helpPagePath('dev/learn/risks')}>\r\n                Learn more.\r\n              </ExternalLink>\r\n            </Trans>\r\n          </FormItemWarningText>\r\n        ) : null}\r\n\r\n        {durationEnabled && (\r\n          <DurationInputAndSelect\r\n            defaultDurationUnit={fundingForm.getFieldValue('durationUnit')}\r\n          />\r\n        )}\r\n\r\n        <div>\r\n          <FundingCycleExplainerCollapse />\r\n        </div>\r\n      </div>\r\n\r\n      <div\r\n        style={{\r\n          padding: '2rem',\r\n          marginBottom: 10,\r\n          ...shadowCard(theme),\r\n          color: colors.text.primary,\r\n        }}\r\n      >\r\n        <h3 style={{ color: colors.text.primary }}>\r\n          <Trans>Payouts</Trans>\r\n        </h3>\r\n\r\n        <DistributionSplitsSection\r\n          distributionLimit={distributionLimit}\r\n          setDistributionLimit={setDistributionLimit}\r\n          currencyName={V2CurrencyName(distributionLimitCurrency) ?? 'ETH'}\r\n          onCurrencyChange={currencyName =>\r\n            setDistributionLimitCurrency(getV2CurrencyOption(currencyName))\r\n          }\r\n          editableSplits={editingSplits}\r\n          lockedSplits={lockedSplits}\r\n          onSplitsChanged={newSplits => {\r\n            setEditingSplits(newSplits)\r\n            fundingForm.setFieldsValue({\r\n              totalSplitsPercentage: getTotalSplitsPercentage(newSplits),\r\n            })\r\n          }}\r\n        />\r\n        <ItemNoInput\r\n          name={'totalSplitsPercentage'}\r\n          rules={[\r\n            {\r\n              validator: validateTotalSplitsPercentage,\r\n            },\r\n          ]}\r\n        />\r\n      </div>\r\n\r\n      <Form.Item style={{ marginTop: '2rem' }}>\r\n        <Button htmlType=\"submit\" type=\"primary\">\r\n          <Trans>Save funding configuration</Trans>\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  )\r\n}\r\n","import { t } from '@lingui/macro'\r\nimport FundingCycleDrawer from 'components/v2/shared/FundingCycleConfigurationDrawers/FundingCycleDrawer'\r\nimport { useFundingCycleDrawer } from 'components/v2/shared/FundingCycleConfigurationDrawers/useFundingCycleDrawer'\r\nimport UnsavedChangesModal from 'components/v2/shared/UnsavedChangesModal'\r\n\r\nimport FundingForm from '../../../../pages/create/forms/FundingForm'\r\n\r\nexport default function FundingDrawer({\r\n  visible,\r\n  onClose,\r\n  isCreate,\r\n}: {\r\n  visible: boolean\r\n  onClose: VoidFunction\r\n  isCreate?: boolean\r\n}) {\r\n  const {\r\n    handleDrawerCloseClick,\r\n    emitDrawerClose,\r\n    setFormUpdated,\r\n    unsavedChangesModalVisible,\r\n    closeModal,\r\n  } = useFundingCycleDrawer(onClose)\r\n\r\n  return (\r\n    <>\r\n      <FundingCycleDrawer\r\n        title={t`Funding`}\r\n        visible={visible}\r\n        onClose={handleDrawerCloseClick}\r\n      >\r\n        <FundingForm\r\n          onFinish={emitDrawerClose}\r\n          onFormUpdated={setFormUpdated}\r\n          isCreate={isCreate}\r\n        />\r\n      </FundingCycleDrawer>\r\n      <UnsavedChangesModal\r\n        visible={unsavedChangesModalVisible}\r\n        onOk={() => {\r\n          closeModal()\r\n          emitDrawerClose()\r\n        }}\r\n        onCancel={closeModal}\r\n      />\r\n    </>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { CSSProperties, useState } from 'react'\r\n\r\nimport { FormItemExt } from 'components/formItems/formItemExt'\r\nimport { FormItems } from 'components/formItems'\r\nimport { toMod, toSplit } from 'utils/v2/splits'\r\nimport { Split } from 'models/v2/splits'\r\nimport { defaultFundingCycleMetadata } from 'redux/slices/editingV2Project'\r\nimport FormItemWarningText from 'components/FormItemWarningText'\r\n\r\nexport default function ReservedTokensFormItem({\r\n  hideLabel,\r\n  initialValue,\r\n  reservedTokensSplits,\r\n  onReservedTokensSplitsChange,\r\n  style = {},\r\n  onChange,\r\n  issuanceRate,\r\n}: {\r\n  initialValue: number | undefined\r\n  reservedTokensSplits: Split[]\r\n  onReservedTokensSplitsChange: (splits: Split[]) => void\r\n  onChange: (val?: number) => void\r\n  style?: CSSProperties\r\n  issuanceRate?: number\r\n} & FormItemExt) {\r\n  // Using a state here because relying on the form does not\r\n  // pass through updated reservedRate to ProjectTicketMods\r\n  const [reservedRate, setReservedRate] = useState<number | undefined>(\r\n    initialValue,\r\n  )\r\n\r\n  const hasReservedRate = !(\r\n    reservedRate === undefined ||\r\n    reservedRate.toString() === defaultFundingCycleMetadata.reservedRate\r\n  )\r\n\r\n  const [reservedRateChecked, setReservedRateChecked] =\r\n    useState<boolean>(hasReservedRate)\r\n\r\n  const defaultReservedRateNum = parseInt(\r\n    defaultFundingCycleMetadata.reservedRate,\r\n  )\r\n\r\n  return (\r\n    <div style={style}>\r\n      <FormItems.ProjectReserved\r\n        value={reservedRate}\r\n        onChange={val => {\r\n          setReservedRate(val)\r\n          onChange(val)\r\n        }}\r\n        checked={reservedRateChecked}\r\n        onToggled={checked => {\r\n          setReservedRateChecked(checked)\r\n          if (!checked) {\r\n            setReservedRate(defaultReservedRateNum)\r\n            onChange(defaultReservedRateNum)\r\n          }\r\n        }}\r\n        hideLabel={hideLabel}\r\n        issuanceRate={issuanceRate}\r\n      />\r\n\r\n      {(hasReservedRate && reservedRateChecked) ||\r\n      reservedTokensSplits.length ? (\r\n        <>\r\n          {!hasReservedRate && (\r\n            <FormItemWarningText>\r\n              <Trans>\r\n                Reserved rate is 0% but has reserved token allocation. Consider\r\n                adding a reserved rate that is greater than zero, or remove the\r\n                token allocation.\r\n              </Trans>\r\n            </FormItemWarningText>\r\n          )}\r\n          <FormItems.ProjectTicketMods\r\n            mods={reservedTokensSplits.map(split => toMod(split))}\r\n            onModsChanged={mods => {\r\n              const splits = mods.map(mod => toSplit(mod))\r\n              onReservedTokensSplitsChange(splits)\r\n            }}\r\n            formItemProps={{\r\n              label: <Trans>Reserved token allocation (optional)</Trans>,\r\n              extra: (\r\n                <Trans>\r\n                  Allocate a portion of your project's reserved tokens to other\r\n                  Ethereum wallets or Juicebox projects.\r\n                </Trans>\r\n              ),\r\n            }}\r\n            reservedRate={reservedRate ?? 0}\r\n          />\r\n        </>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { Form } from 'antd'\r\nimport FormattedNumberInput from 'components/inputs/FormattedNumberInput'\r\nimport TooltipLabel from 'components/TooltipLabel'\r\nimport { ThemeContext } from 'contexts/themeContext'\r\nimport { useContext } from 'react'\r\nimport { MAX_MINT_RATE } from 'utils/v2/math'\r\n\r\nexport default function MintRateFormItem({\r\n  value,\r\n  onChange,\r\n  hasDuration,\r\n  isCreate,\r\n}: {\r\n  value: string | undefined\r\n  onChange: (newWeight: string | undefined) => void\r\n  hasDuration: boolean\r\n  isCreate: boolean\r\n}) {\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n  return (\r\n    <div style={{ display: 'flex' }}>\r\n      <Form.Item\r\n        label={\r\n          <TooltipLabel\r\n            label={\r\n              isCreate ? (\r\n                <Trans>Initial mint rate</Trans>\r\n              ) : (\r\n                <Trans>Mint rate</Trans>\r\n              )\r\n            }\r\n            tip={\r\n              hasDuration && isCreate ? (\r\n                <Trans>\r\n                  The number of project tokens minted when 1 ETH is contributed\r\n                  in the first funding cycle.\r\n                </Trans>\r\n              ) : (\r\n                <Trans>\r\n                  The number of project tokens minted when 1 ETH is contributed.\r\n                </Trans>\r\n              )\r\n            }\r\n          />\r\n        }\r\n        style={{ width: '100%' }}\r\n        required\r\n      >\r\n        <FormattedNumberInput\r\n          min={1}\r\n          max={MAX_MINT_RATE}\r\n          accessory={\r\n            <span style={{ color: colors.text.primary, marginRight: 20 }}>\r\n              <Trans>tokens per ETH contributed</Trans>\r\n            </span>\r\n          }\r\n          value={value}\r\n          onChange={onChange}\r\n          style={{ paddingRight: 15 }}\r\n        />\r\n      </Form.Item>\r\n    </div>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { Button, Form, Space } from 'antd'\r\nimport { ThemeContext } from 'contexts/themeContext'\r\nimport { useAppDispatch } from 'hooks/AppDispatch'\r\nimport { useAppSelector } from 'hooks/AppSelector'\r\nimport ReservedTokensFormItem from 'pages/create/forms/TokenForm/ReservedTokensFormItem'\r\nimport { round } from 'lodash'\r\nimport { ItemNoInput } from 'components/formItems/ItemNoInput'\r\n\r\nimport {\r\n  CSSProperties,\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n} from 'react'\r\nimport {\r\n  defaultFundingCycleData,\r\n  defaultFundingCycleMetadata,\r\n  editingV2ProjectActions,\r\n} from 'redux/slices/editingV2Project'\r\n\r\nimport { sanitizeSplit } from 'utils/v2/splits'\r\n\r\nimport { Split } from 'models/v2/splits'\r\n\r\nimport {\r\n  DEFAULT_MINT_RATE,\r\n  discountRateFrom,\r\n  formatDiscountRate,\r\n  formatIssuanceRate,\r\n  formatRedemptionRate,\r\n  formatReservedRate,\r\n  issuanceRateFrom,\r\n  redemptionRateFrom,\r\n  reservedRateFrom,\r\n} from 'utils/v2/math'\r\n\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\n\r\nimport { FormItems } from 'components/formItems'\r\n\r\nimport {\r\n  getDefaultFundAccessConstraint,\r\n  hasDistributionLimit,\r\n  hasFundingDuration,\r\n} from 'utils/v2/fundingCycle'\r\n\r\nimport { SerializedV2FundAccessConstraint } from 'utils/v2/serializers'\r\n\r\nimport SwitchHeading from 'components/SwitchHeading'\r\n\r\nimport NumberSlider from 'components/inputs/NumberSlider'\r\n\r\nimport FormItemWarningText from 'components/FormItemWarningText'\r\nimport { formattedNum } from 'utils/formatNumber'\r\nimport { DEFAULT_BONDING_CURVE_RATE_PERCENTAGE } from 'components/formItems/ProjectRedemptionRate'\r\n\r\nimport { DISCOUNT_RATE_EXPLANATION } from 'components/v2/V2Project/V2FundingCycleSection/settingExplanations'\r\nimport { getTotalSplitsPercentage } from 'utils/v2/distributions'\r\nimport { useForm } from 'antd/lib/form/Form'\r\nimport Callout from 'components/Callout'\r\n\r\nimport { shadowCard } from 'constants/styles/shadowCard'\r\nimport MintRateFormItem from './MintRateFormItem'\r\n\r\nconst MAX_DISCOUNT_RATE = 20 // this is an opinionated limit\r\n\r\nfunction DiscountRateExtra({\r\n  hasDuration,\r\n  initialIssuanceRate,\r\n  discountRatePercent,\r\n  isCreate,\r\n}: {\r\n  hasDuration?: boolean\r\n  initialIssuanceRate: number\r\n  discountRatePercent: number\r\n  isCreate?: boolean\r\n}) {\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n\r\n  const discountRateDecimal = discountRatePercent * 0.01\r\n  const secondIssuanceRate = round(\r\n    initialIssuanceRate - initialIssuanceRate * discountRateDecimal,\r\n    4,\r\n  )\r\n\r\n  const thirdIssuanceRate = round(\r\n    secondIssuanceRate - secondIssuanceRate * discountRateDecimal,\r\n    4,\r\n  )\r\n\r\n  return (\r\n    <div style={{ fontSize: '0.9rem' }}>\r\n      {!hasDuration && (\r\n        <FormItemWarningText>\r\n          <Trans>\r\n            Disabled when your project's funding cycle has no duration.\r\n          </Trans>\r\n        </FormItemWarningText>\r\n      )}\r\n      <p>{DISCOUNT_RATE_EXPLANATION}</p>\r\n      {discountRatePercent > 0 && isCreate && (\r\n        <>\r\n          <Callout\r\n            style={{ marginTop: 20, backgroundColor: colors.background.l1 }}\r\n          >\r\n            <p>\r\n              <Trans>\r\n                Contributors will receive{' '}\r\n                <strong>{discountRatePercent}%</strong> more tokens for\r\n                contributions they make this funding cycle compared to the next\r\n                funding cycle.\r\n              </Trans>\r\n            </p>\r\n            <p>\r\n              <Trans>\r\n                The <strong>issuance rate</strong> of your second funding cycle\r\n                will be{' '}\r\n                <strong style={{ whiteSpace: 'nowrap' }}>\r\n                  {formattedNum(secondIssuanceRate)} tokens per 1 ETH\r\n                </strong>\r\n                , then{' '}\r\n                <strong style={{ whiteSpace: 'nowrap' }}>\r\n                  {formattedNum(thirdIssuanceRate)} tokens per 1 ETH{' '}\r\n                </strong>\r\n                for your third funding cycle, and so on.\r\n              </Trans>\r\n            </p>\r\n          </Callout>\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function TokenForm({\r\n  onFormUpdated,\r\n  onFinish,\r\n  isCreate,\r\n}: {\r\n  onFormUpdated?: (updated: boolean) => void\r\n  onFinish: VoidFunction\r\n  isCreate?: boolean // If the instance of this form is in the create flow (not reconfig)\r\n}) {\r\n  const {\r\n    theme,\r\n    theme: { colors },\r\n  } = useContext(ThemeContext)\r\n\r\n  const [tokenForm] = useForm<{ totalReservedSplitPercent: number }>()\r\n\r\n  const dispatch = useAppDispatch()\r\n  const {\r\n    fundingCycleMetadata,\r\n    fundingCycleData,\r\n    reservedTokensGroupedSplits,\r\n    fundAccessConstraints,\r\n  } = useAppSelector(state => state.editingV2Project)\r\n  const fundAccessConstraint =\r\n    getDefaultFundAccessConstraint<SerializedV2FundAccessConstraint>(\r\n      fundAccessConstraints,\r\n    )\r\n\r\n  const canSetRedemptionRate = hasDistributionLimit(fundAccessConstraint)\r\n  const hasDuration = hasFundingDuration(fundingCycleData)\r\n  const canSetDiscountRate = hasDuration\r\n\r\n  // Form initial values set by default\r\n  const initialValues = useMemo(\r\n    () => ({\r\n      reservedRate:\r\n        fundingCycleMetadata.reservedRate ??\r\n        defaultFundingCycleMetadata.reservedRate,\r\n      discountRate:\r\n        (canSetDiscountRate && fundingCycleData?.discountRate) ||\r\n        defaultFundingCycleData.discountRate,\r\n      redemptionRate:\r\n        (canSetRedemptionRate && fundingCycleMetadata?.redemptionRate) ||\r\n        defaultFundingCycleMetadata.redemptionRate,\r\n      weight: fundingCycleData?.weight\r\n        ? formatIssuanceRate(fundingCycleData?.weight)\r\n        : DEFAULT_MINT_RATE.toString(),\r\n    }),\r\n    [\r\n      fundingCycleMetadata.reservedRate,\r\n      fundingCycleMetadata?.redemptionRate,\r\n      canSetDiscountRate,\r\n      fundingCycleData?.discountRate,\r\n      fundingCycleData?.weight,\r\n      canSetRedemptionRate,\r\n    ],\r\n  )\r\n\r\n  /**\r\n   * NOTE: these values will all be in their 'native' units,\r\n   * e.g. permyriads, parts-per-billion etc.\r\n   *\r\n   * We will convert these to percentages to pass as\r\n   * props later on.\r\n   */\r\n  const [reservedRate, setReservedRate] = useState<string>(\r\n    initialValues.reservedRate,\r\n  )\r\n  const [discountRate, setDiscountRate] = useState<string>(\r\n    initialValues.discountRate,\r\n  )\r\n  const [redemptionRate, setRedemptionRate] = useState<string>(\r\n    initialValues.redemptionRate,\r\n  )\r\n  const [weight, setWeight] = useState<string>(initialValues.weight)\r\n\r\n  const [discountRateChecked, setDiscountRateChecked] = useState<boolean>(\r\n    fundingCycleData?.discountRate !== defaultFundingCycleData.discountRate,\r\n  )\r\n\r\n  const [redemptionRateChecked, setRedemptionRateChecked] = useState<boolean>(\r\n    fundingCycleMetadata?.redemptionRate !==\r\n      defaultFundingCycleMetadata.redemptionRate,\r\n  )\r\n\r\n  const [reservedTokensSplits, setReservedTokensSplits] = useState<Split[]>(\r\n    reservedTokensGroupedSplits?.splits,\r\n  )\r\n\r\n  const onTokenFormSaved = useCallback(async () => {\r\n    await tokenForm.validateFields()\r\n    const newReservedTokensSplits = reservedTokensSplits.map(split =>\r\n      sanitizeSplit(split),\r\n    )\r\n    /**\r\n     * NOTE: all values dispatched to Redux should be in their 'native' units,\r\n     * e.g. permyriads, parts-per-billion etc.\r\n     * and NOT percentages.\r\n     */\r\n    dispatch(\r\n      editingV2ProjectActions.setWeight(\r\n        issuanceRateFrom(weight ?? DEFAULT_MINT_RATE.toString()),\r\n      ),\r\n    )\r\n    dispatch(editingV2ProjectActions.setDiscountRate(discountRate ?? '0'))\r\n    dispatch(editingV2ProjectActions.setReservedRate(reservedRate ?? '0'))\r\n\r\n    // When setting redemption rate, also set ballotRedemptionRate\r\n    dispatch(editingV2ProjectActions.setRedemptionRate(redemptionRate))\r\n    dispatch(editingV2ProjectActions.setBallotRedemptionRate(redemptionRate))\r\n\r\n    dispatch(\r\n      editingV2ProjectActions.setReservedTokensSplits(newReservedTokensSplits),\r\n    )\r\n\r\n    onFinish?.()\r\n  }, [\r\n    dispatch,\r\n    reservedTokensSplits,\r\n    onFinish,\r\n    discountRate,\r\n    weight,\r\n    reservedRate,\r\n    redemptionRate,\r\n    tokenForm,\r\n  ])\r\n\r\n  useEffect(() => {\r\n    const hasFormUpdated =\r\n      initialValues.reservedRate !== reservedRate ||\r\n      initialValues.discountRate !== discountRate ||\r\n      initialValues.redemptionRate !== redemptionRate\r\n    onFormUpdated?.(hasFormUpdated)\r\n  })\r\n\r\n  const defaultValueStyle: CSSProperties = {\r\n    color: colors.text.tertiary,\r\n  }\r\n\r\n  const reservedRatePercent = parseFloat(\r\n    formatReservedRate(BigNumber.from(reservedRate)),\r\n  )\r\n\r\n  const discountRatePercent = parseFloat(\r\n    formatDiscountRate(BigNumber.from(discountRate)),\r\n  )\r\n\r\n  // Total tokens minted as a result of a 1 ETH contribution\r\n  const initialMintingRate = parseFloat(weight) ?? DEFAULT_MINT_RATE\r\n  const reservedRateDecimal = reservedRatePercent * 0.01\r\n  // Tokens received by contributor's per ETH\r\n  const initialIssuanceRate =\r\n    initialMintingRate - reservedRateDecimal * initialMintingRate\r\n\r\n  const validateTotalReservedPercent = () => {\r\n    if (getTotalSplitsPercentage(reservedTokensSplits) > 100) {\r\n      return Promise.reject(`Reserved allocations exceed 100%.`)\r\n    }\r\n    return Promise.resolve()\r\n  }\r\n\r\n  return (\r\n    <Form layout=\"vertical\" onFinish={onTokenFormSaved} form={tokenForm}>\r\n      <Space size=\"middle\" direction=\"vertical\">\r\n        <div>\r\n          <MintRateFormItem\r\n            value={weight}\r\n            onChange={newWeight => {\r\n              setWeight(newWeight ?? DEFAULT_MINT_RATE.toString())\r\n            }}\r\n            hasDuration={hasDuration}\r\n            isCreate={Boolean(isCreate)}\r\n          />\r\n          <ReservedTokensFormItem\r\n            initialValue={reservedRatePercent}\r\n            onChange={newReservedRatePercentage => {\r\n              setReservedRate(\r\n                reservedRateFrom(\r\n                  newReservedRatePercentage?.toString() ?? '0',\r\n                ).toString(),\r\n              )\r\n            }}\r\n            style={{ ...shadowCard(theme), padding: 25, marginBottom: 10 }}\r\n            reservedTokensSplits={reservedTokensSplits}\r\n            onReservedTokensSplitsChange={setReservedTokensSplits}\r\n            issuanceRate={parseInt(weight)}\r\n          />\r\n\r\n          <Form.Item\r\n            extra={\r\n              <DiscountRateExtra\r\n                hasDuration={canSetDiscountRate}\r\n                initialIssuanceRate={initialIssuanceRate}\r\n                discountRatePercent={discountRatePercent}\r\n                isCreate={isCreate}\r\n              />\r\n            }\r\n            label={\r\n              <SwitchHeading\r\n                onChange={checked => {\r\n                  setDiscountRateChecked(checked)\r\n                  if (!checked)\r\n                    setDiscountRate(defaultFundingCycleData.discountRate)\r\n                }}\r\n                checked={discountRateChecked}\r\n                disabled={!canSetDiscountRate}\r\n              >\r\n                <Trans>Discount rate</Trans>\r\n                {!discountRateChecked && canSetDiscountRate && (\r\n                  <span style={defaultValueStyle}>\r\n                    {' '}\r\n                    ({defaultFundingCycleData.discountRate}%)\r\n                  </span>\r\n                )}\r\n              </SwitchHeading>\r\n            }\r\n            style={{ ...shadowCard(theme), padding: 25, marginBottom: 10 }}\r\n          >\r\n            {canSetDiscountRate && discountRateChecked && (\r\n              <NumberSlider\r\n                max={MAX_DISCOUNT_RATE}\r\n                sliderValue={discountRatePercent}\r\n                suffix=\"%\"\r\n                onChange={value =>\r\n                  setDiscountRate(\r\n                    discountRateFrom(value?.toString() ?? '0').toString(),\r\n                  )\r\n                }\r\n                step={0.1}\r\n              />\r\n            )}\r\n          </Form.Item>\r\n\r\n          <FormItems.ProjectRedemptionRate\r\n            label={\r\n              <>\r\n                <Trans>Redemption rate</Trans>\r\n                {!redemptionRateChecked && canSetRedemptionRate && (\r\n                  <span style={defaultValueStyle}>\r\n                    {' '}\r\n                    ({DEFAULT_BONDING_CURVE_RATE_PERCENTAGE}%)\r\n                  </span>\r\n                )}\r\n              </>\r\n            }\r\n            value={formatRedemptionRate(BigNumber.from(redemptionRate))}\r\n            onChange={newRedemptionRatePercentage => {\r\n              setRedemptionRate(\r\n                redemptionRateFrom(\r\n                  newRedemptionRatePercentage?.toString() ?? '0',\r\n                ).toString(),\r\n              )\r\n            }}\r\n            style={{ ...shadowCard(theme), padding: 25, marginBottom: 10 }}\r\n            onToggled={setRedemptionRateChecked}\r\n            checked={redemptionRateChecked}\r\n            disabled={!canSetRedemptionRate}\r\n          />\r\n        </div>\r\n        <ItemNoInput\r\n          name={'totalSplitsPercentage'}\r\n          rules={[\r\n            {\r\n              validator: validateTotalReservedPercent,\r\n            },\r\n          ]}\r\n        />\r\n        <Form.Item>\r\n          <Button htmlType=\"submit\" type=\"primary\">\r\n            <Trans>Save token configuration</Trans>\r\n          </Button>\r\n        </Form.Item>\r\n      </Space>\r\n    </Form>\r\n  )\r\n}\r\n","import { t, Trans } from '@lingui/macro'\r\nimport Callout from 'components/Callout'\r\nimport FundingCycleDrawer from 'components/v2/shared/FundingCycleConfigurationDrawers/FundingCycleDrawer'\r\nimport { useFundingCycleDrawer } from 'components/v2/shared/FundingCycleConfigurationDrawers/useFundingCycleDrawer'\r\nimport UnsavedChangesModal from 'components/v2/shared/UnsavedChangesModal'\r\n\r\nimport TokenForm from '../../../../pages/create/forms/TokenForm'\r\n\r\nexport default function TokenDrawer({\r\n  visible,\r\n  onClose,\r\n  isCreate,\r\n}: {\r\n  visible: boolean\r\n  onClose: VoidFunction\r\n  isCreate?: boolean\r\n}) {\r\n  const {\r\n    handleDrawerCloseClick,\r\n    emitDrawerClose,\r\n    setFormUpdated,\r\n    unsavedChangesModalVisible,\r\n    closeModal,\r\n  } = useFundingCycleDrawer(onClose)\r\n\r\n  return (\r\n    <>\r\n      <FundingCycleDrawer\r\n        title={t`Project token`}\r\n        visible={visible}\r\n        onClose={handleDrawerCloseClick}\r\n      >\r\n        <p>\r\n          <Trans>Design how your tokens should work.</Trans>\r\n        </p>\r\n        <Callout style={{ marginBottom: '2rem' }}>\r\n          <Trans>\r\n            Project tokens <strong>aren't ERC-20 tokens</strong> by default.\r\n            Once you deploy your project, you can issue an ERC-20 for your\r\n            holders to claim. This is <strong>optional</strong>.\r\n          </Trans>\r\n        </Callout>\r\n\r\n        <TokenForm\r\n          onFinish={emitDrawerClose}\r\n          onFormUpdated={setFormUpdated}\r\n          isCreate={isCreate}\r\n        />\r\n      </FundingCycleDrawer>\r\n      <UnsavedChangesModal\r\n        visible={unsavedChangesModalVisible}\r\n        onOk={() => {\r\n          closeModal()\r\n          emitDrawerClose()\r\n        }}\r\n        onCancel={closeModal}\r\n      />\r\n    </>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { Space } from 'antd'\r\nimport FormItemWarningText from 'components/FormItemWarningText'\r\n\r\nexport default function TokenMintingExtra({\r\n  showMintingWarning,\r\n}: {\r\n  showMintingWarning: boolean\r\n}) {\r\n  return (\r\n    <Space direction=\"vertical\">\r\n      <Trans>\r\n        When enabled, the project owner can manually mint any amount of tokens\r\n        to any address.\r\n      </Trans>\r\n      {showMintingWarning && (\r\n        <FormItemWarningText>\r\n          <Trans>\r\n            Enabling token minting will appear risky to contributors.\r\n          </Trans>\r\n        </FormItemWarningText>\r\n      )}\r\n    </Space>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { Button, Form, Space, Switch } from 'antd'\r\n\r\nimport { useAppDispatch } from 'hooks/AppDispatch'\r\nimport { useAppSelector } from 'hooks/AppSelector'\r\nimport { useCallback, useContext, useEffect, useMemo, useState } from 'react'\r\nimport { editingV2ProjectActions } from 'redux/slices/editingV2Project'\r\nimport { ThemeContext } from 'contexts/themeContext'\r\n\r\nimport { isAddress } from '@ethersproject/address'\r\n\r\nimport ReconfigurationStrategySelector from 'components/ReconfigurationStrategy/ReconfigurationStrategySelector'\r\n\r\nimport { BallotStrategy } from 'models/ballot'\r\n\r\nimport isEqual from 'lodash/isEqual'\r\n\r\nimport { shadowCard } from 'constants/styles/shadowCard'\r\nimport {\r\n  ballotStrategies,\r\n  DEFAULT_BALLOT_STRATEGY,\r\n} from 'constants/v2/ballotStrategies'\r\nimport FormItemLabel from '../../FormItemLabel'\r\nimport { getBallotStrategyByAddress } from 'constants/v2/ballotStrategies/getBallotStrategiesByAddress'\r\nimport TokenMintingExtra from './TokenMintingExtra'\r\n\r\nexport default function RulesForm({\r\n  onFormUpdated,\r\n  onFinish,\r\n}: {\r\n  onFormUpdated?: (updated: boolean) => void\r\n  onFinish: VoidFunction\r\n}) {\r\n  const { theme } = useContext(ThemeContext)\r\n\r\n  const dispatch = useAppDispatch()\r\n  const { fundingCycleMetadata, fundingCycleData } = useAppSelector(\r\n    state => state.editingV2Project,\r\n  )\r\n\r\n  // Form initial values set by default\r\n  const initialValues = useMemo(\r\n    () => ({\r\n      pausePay: fundingCycleMetadata.pausePay,\r\n      allowMinting: fundingCycleMetadata.allowMinting,\r\n      ballotStrategy: getBallotStrategyByAddress(\r\n        fundingCycleData.ballot ?? DEFAULT_BALLOT_STRATEGY.address,\r\n      ),\r\n    }),\r\n    [fundingCycleData, fundingCycleMetadata],\r\n  )\r\n\r\n  const [showMintingWarning, setShowMintingWarning] = useState<boolean>(false)\r\n  const [ballotStrategy, setBallotStrategy] = useState<BallotStrategy>(\r\n    initialValues.ballotStrategy,\r\n  )\r\n  const [pausePay, setPausePay] = useState<boolean>(initialValues.pausePay)\r\n  const [allowMinting, setAllowMinting] = useState<boolean>(\r\n    initialValues.allowMinting,\r\n  )\r\n\r\n  useEffect(() => {\r\n    const hasFormUpdated =\r\n      initialValues.allowMinting !== allowMinting ||\r\n      initialValues.pausePay !== pausePay ||\r\n      !isEqual(initialValues.ballotStrategy, ballotStrategy)\r\n    onFormUpdated?.(hasFormUpdated)\r\n  }, [onFormUpdated, initialValues, pausePay, allowMinting, ballotStrategy])\r\n\r\n  const onFormSaved = useCallback(() => {\r\n    dispatch(editingV2ProjectActions.setPausePay(pausePay))\r\n    dispatch(editingV2ProjectActions.setAllowMinting(allowMinting))\r\n    dispatch(editingV2ProjectActions.setBallot(ballotStrategy.address))\r\n    onFinish?.()\r\n  }, [dispatch, onFinish, ballotStrategy, pausePay, allowMinting])\r\n\r\n  const switchContainerStyle = {\r\n    display: 'flex',\r\n    color: theme.colors.text.primary,\r\n    fontWeight: 500,\r\n  }\r\n\r\n  const disableSaveButton =\r\n    !ballotStrategy || !isAddress(ballotStrategy.address)\r\n\r\n  return (\r\n    <Form layout=\"vertical\" onFinish={onFormSaved}>\r\n      <Space direction=\"vertical\" size=\"large\">\r\n        <div style={{ ...shadowCard(theme), padding: '2rem' }}>\r\n          <Form.Item\r\n            extra={\r\n              <Trans>\r\n                When enabled, your project cannot receive direct payments.\r\n              </Trans>\r\n            }\r\n          >\r\n            <div\r\n              style={{\r\n                ...switchContainerStyle,\r\n              }}\r\n            >\r\n              <Switch\r\n                onChange={setPausePay}\r\n                style={{ marginRight: '0.5rem' }}\r\n                checked={pausePay}\r\n              />\r\n              <Trans>Pause payments</Trans>\r\n            </div>\r\n          </Form.Item>\r\n          <Form.Item\r\n            extra={\r\n              <TokenMintingExtra showMintingWarning={showMintingWarning} />\r\n            }\r\n          >\r\n            <div\r\n              style={{\r\n                ...switchContainerStyle,\r\n              }}\r\n            >\r\n              <Switch\r\n                onChange={checked => {\r\n                  setShowMintingWarning(checked)\r\n                  setAllowMinting(checked)\r\n                }}\r\n                style={{ marginRight: '0.5rem' }}\r\n                checked={allowMinting}\r\n              />\r\n              <Trans>Allow token minting</Trans>\r\n            </div>\r\n          </Form.Item>\r\n        </div>\r\n\r\n        <Form.Item\r\n          style={{ ...shadowCard(theme), padding: '2rem' }}\r\n          label={\r\n            <FormItemLabel>\r\n              <Trans>Reconfiguration rules</Trans>\r\n            </FormItemLabel>\r\n          }\r\n        >\r\n          <ReconfigurationStrategySelector\r\n            ballotStrategies={ballotStrategies()}\r\n            selectedStrategy={ballotStrategy}\r\n            onChange={setBallotStrategy}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item>\r\n          <Button htmlType=\"submit\" type=\"primary\" disabled={disableSaveButton}>\r\n            <Trans>Save rules</Trans>\r\n          </Button>\r\n        </Form.Item>\r\n      </Space>\r\n    </Form>\r\n  )\r\n}\r\n","import { t } from '@lingui/macro'\r\nimport FundingCycleDrawer from 'components/v2/shared/FundingCycleConfigurationDrawers/FundingCycleDrawer'\r\nimport { useFundingCycleDrawer } from 'components/v2/shared/FundingCycleConfigurationDrawers/useFundingCycleDrawer'\r\nimport UnsavedChangesModal from 'components/v2/shared/UnsavedChangesModal'\r\n\r\nimport RulesForm from '../../../../pages/create/forms/RulesForm'\r\n\r\nexport default function RulesDrawer({\r\n  visible,\r\n  onClose,\r\n}: {\r\n  visible: boolean\r\n  onClose: VoidFunction\r\n}) {\r\n  const {\r\n    handleDrawerCloseClick,\r\n    emitDrawerClose,\r\n    setFormUpdated,\r\n    unsavedChangesModalVisible,\r\n    closeModal,\r\n  } = useFundingCycleDrawer(onClose)\r\n\r\n  return (\r\n    <>\r\n      <FundingCycleDrawer\r\n        title={t`Rules`}\r\n        visible={visible}\r\n        onClose={handleDrawerCloseClick}\r\n      >\r\n        <RulesForm onFinish={emitDrawerClose} onFormUpdated={setFormUpdated} />\r\n      </FundingCycleDrawer>\r\n      <UnsavedChangesModal\r\n        visible={unsavedChangesModalVisible}\r\n        onOk={() => {\r\n          closeModal()\r\n          emitDrawerClose()\r\n        }}\r\n        onCancel={closeModal}\r\n      />\r\n    </>\r\n  )\r\n}\r\n","import * as React from 'react';\nvar RadioGroupContext = /*#__PURE__*/React.createContext(null);\nexport var RadioGroupContextProvider = RadioGroupContext.Provider;\nexport default RadioGroupContext;\nexport var RadioOptionTypeContext = /*#__PURE__*/React.createContext(null);\nexport var RadioOptionTypeContextProvider = RadioOptionTypeContext.Provider;","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport RcCheckbox from 'rc-checkbox';\nimport classNames from 'classnames';\nimport { composeRef } from \"rc-util/es/ref\";\nimport { useContext } from 'react';\nimport { FormItemInputContext } from '../form/context';\nimport { ConfigContext } from '../config-provider';\nimport RadioGroupContext, { RadioOptionTypeContext } from './context';\nimport DisabledContext from '../config-provider/DisabledContext';\nimport warning from '../_util/warning';\n\nvar InternalRadio = function InternalRadio(props, ref) {\n  var _classNames;\n\n  var groupContext = React.useContext(RadioGroupContext);\n  var radioOptionTypeContext = React.useContext(RadioOptionTypeContext);\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls,\n      direction = _React$useContext.direction;\n\n  var innerRef = React.useRef();\n  var mergedRef = composeRef(ref, innerRef);\n\n  var _useContext = useContext(FormItemInputContext),\n      isFormItemInput = _useContext.isFormItemInput;\n\n  process.env.NODE_ENV !== \"production\" ? warning(!('optionType' in props), 'Radio', '`optionType` is only support in Radio.Group.') : void 0;\n\n  var onChange = function onChange(e) {\n    var _a, _b;\n\n    (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    (_b = groupContext === null || groupContext === void 0 ? void 0 : groupContext.onChange) === null || _b === void 0 ? void 0 : _b.call(groupContext, e);\n  };\n\n  var customizePrefixCls = props.prefixCls,\n      className = props.className,\n      children = props.children,\n      style = props.style,\n      customDisabled = props.disabled,\n      restProps = __rest(props, [\"prefixCls\", \"className\", \"children\", \"style\", \"disabled\"]);\n\n  var radioPrefixCls = getPrefixCls('radio', customizePrefixCls);\n  var prefixCls = ((groupContext === null || groupContext === void 0 ? void 0 : groupContext.optionType) || radioOptionTypeContext) === 'button' ? \"\".concat(radioPrefixCls, \"-button\") : radioPrefixCls;\n\n  var radioProps = _extends({}, restProps); // ===================== Disabled =====================\n\n\n  var disabled = React.useContext(DisabledContext);\n  radioProps.disabled = customDisabled || disabled;\n\n  if (groupContext) {\n    radioProps.name = groupContext.name;\n    radioProps.onChange = onChange;\n    radioProps.checked = props.value === groupContext.value;\n    radioProps.disabled = radioProps.disabled || groupContext.disabled;\n  }\n\n  var wrapperClassString = classNames(\"\".concat(prefixCls, \"-wrapper\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-wrapper-checked\"), radioProps.checked), _defineProperty(_classNames, \"\".concat(prefixCls, \"-wrapper-disabled\"), radioProps.disabled), _defineProperty(_classNames, \"\".concat(prefixCls, \"-wrapper-rtl\"), direction === 'rtl'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-wrapper-in-form-item\"), isFormItemInput), _classNames), className);\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/label-has-associated-control\n    React.createElement(\"label\", {\n      className: wrapperClassString,\n      style: style,\n      onMouseEnter: props.onMouseEnter,\n      onMouseLeave: props.onMouseLeave\n    }, /*#__PURE__*/React.createElement(RcCheckbox, _extends({}, radioProps, {\n      type: \"radio\",\n      prefixCls: prefixCls,\n      ref: mergedRef\n    })), children !== undefined ? /*#__PURE__*/React.createElement(\"span\", null, children) : null)\n  );\n};\n\nvar Radio = /*#__PURE__*/React.forwardRef(InternalRadio);\nRadio.displayName = 'Radio';\nexport default Radio;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport Radio from './radio';\nimport { ConfigContext } from '../config-provider';\nimport SizeContext from '../config-provider/SizeContext';\nimport { RadioGroupContextProvider } from './context';\nimport getDataOrAriaProps from '../_util/getDataOrAriaProps';\nvar RadioGroup = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls,\n      direction = _React$useContext.direction;\n\n  var size = React.useContext(SizeContext);\n\n  var _useMergedState = useMergedState(props.defaultValue, {\n    value: props.value\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      value = _useMergedState2[0],\n      setValue = _useMergedState2[1];\n\n  var onRadioChange = function onRadioChange(ev) {\n    var lastValue = value;\n    var val = ev.target.value;\n\n    if (!('value' in props)) {\n      setValue(val);\n    }\n\n    var onChange = props.onChange;\n\n    if (onChange && val !== lastValue) {\n      onChange(ev);\n    }\n  };\n\n  var renderGroup = function renderGroup() {\n    var _classNames;\n\n    var customizePrefixCls = props.prefixCls,\n        _props$className = props.className,\n        className = _props$className === void 0 ? '' : _props$className,\n        options = props.options,\n        _props$buttonStyle = props.buttonStyle,\n        buttonStyle = _props$buttonStyle === void 0 ? 'outline' : _props$buttonStyle,\n        disabled = props.disabled,\n        children = props.children,\n        customizeSize = props.size,\n        style = props.style,\n        id = props.id,\n        onMouseEnter = props.onMouseEnter,\n        onMouseLeave = props.onMouseLeave;\n    var prefixCls = getPrefixCls('radio', customizePrefixCls);\n    var groupPrefixCls = \"\".concat(prefixCls, \"-group\");\n    var childrenToRender = children; // 如果存在 options, 优先使用\n\n    if (options && options.length > 0) {\n      childrenToRender = options.map(function (option) {\n        if (typeof option === 'string' || typeof option === 'number') {\n          // 此处类型自动推导为 string\n          return /*#__PURE__*/React.createElement(Radio, {\n            key: option.toString(),\n            prefixCls: prefixCls,\n            disabled: disabled,\n            value: option,\n            checked: value === option\n          }, option);\n        } // 此处类型自动推导为 { label: string value: string }\n\n\n        return /*#__PURE__*/React.createElement(Radio, {\n          key: \"radio-group-value-options-\".concat(option.value),\n          prefixCls: prefixCls,\n          disabled: option.disabled || disabled,\n          value: option.value,\n          checked: value === option.value,\n          style: option.style\n        }, option.label);\n      });\n    }\n\n    var mergedSize = customizeSize || size;\n    var classString = classNames(groupPrefixCls, \"\".concat(groupPrefixCls, \"-\").concat(buttonStyle), (_classNames = {}, _defineProperty(_classNames, \"\".concat(groupPrefixCls, \"-\").concat(mergedSize), mergedSize), _defineProperty(_classNames, \"\".concat(groupPrefixCls, \"-rtl\"), direction === 'rtl'), _classNames), className);\n    return /*#__PURE__*/React.createElement(\"div\", _extends({}, getDataOrAriaProps(props), {\n      className: classString,\n      style: style,\n      onMouseEnter: onMouseEnter,\n      onMouseLeave: onMouseLeave,\n      id: id,\n      ref: ref\n    }), childrenToRender);\n  };\n\n  return /*#__PURE__*/React.createElement(RadioGroupContextProvider, {\n    value: {\n      onChange: onRadioChange,\n      value: value,\n      disabled: props.disabled,\n      name: props.name,\n      optionType: props.optionType\n    }\n  }, renderGroup());\n});\nexport default /*#__PURE__*/React.memo(RadioGroup);","export default function getDataOrAriaProps(props) {\n  return Object.keys(props).reduce(function (prev, key) {\n    if ((key.startsWith('data-') || key.startsWith('aria-') || key === 'role') && !key.startsWith('data-__')) {\n      prev[key] = props[key];\n    }\n\n    return prev;\n  }, {});\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport Radio from './radio';\nimport { ConfigContext } from '../config-provider';\nimport { RadioOptionTypeContextProvider } from './context';\n\nvar RadioButton = function RadioButton(props, ref) {\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls;\n\n  var customizePrefixCls = props.prefixCls,\n      radioProps = __rest(props, [\"prefixCls\"]);\n\n  var prefixCls = getPrefixCls('radio', customizePrefixCls);\n  return /*#__PURE__*/React.createElement(RadioOptionTypeContextProvider, {\n    value: \"button\"\n  }, /*#__PURE__*/React.createElement(Radio, _extends({\n    prefixCls: prefixCls\n  }, radioProps, {\n    type: \"radio\",\n    ref: ref\n  })));\n};\n\nexport default /*#__PURE__*/React.forwardRef(RadioButton);","import InternalRadio from './radio';\nimport Group from './group';\nimport Button from './radioButton';\nvar Radio = InternalRadio;\nRadio.Button = Button;\nRadio.Group = Group;\nexport { Button, Group };\nexport default Radio;"],"sourceRoot":""}