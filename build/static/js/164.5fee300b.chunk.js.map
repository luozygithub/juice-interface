{"version":3,"sources":["pages/v2/p/index.tsx","hooks/v2/contractReader/ProjectMetadataContent.ts","hooks/v2/contractReader/PaymentTerminalBalance.ts","hooks/v2/contractReader/ProjectHandle.ts","hooks/v2/contractReader/ProjectTokenTotalSupply.ts","hooks/v2/contractReader/BallotState.ts","pages/v2/p/V2DashboardGateway.tsx"],"names":["V2Dashboard","projectId","data","metadataCID","loading","metadataURILoading","useV2ContractReader","contract","V2ContractName","JBProjects","functionName","args","JUICEBOX_MONEY_METADATA_DOMAIN","useProjectMetadataContent","projectMetadata","error","metadataError","isLoading","metadataLoading","useProjectMetadata","usePageTitle","title","name","undefined","projects","useProjectsQuery","keys","cv","createdAt","first","totalVolume","totalPaid","fundingCycleResponse","fundingCycleLoading","useProjectCurrentFundingCycle","fundingCycle","fundingCycleMetadata","payoutSplits","useProjectSplits","splitGroup","ETH_PAYOUT_SPLIT_GROUP","domain","configuration","toString","terminals","useProjectTerminals","location","useLocation","params","URLSearchParams","search","isNewDeploy","Boolean","get","primaryTerminal","distributionLimitData","distributionLimitLoading","useProjectDistributionLimit","terminal","usedDistributionLimit","usedDistributionLimitLoading","useUsedDistributionLimit","fundingCycleNumber","number","distributionLimit","distributionLimitCurrency","reservedTokensSplits","RESERVED_TOKEN_SPLIT_GROUP","ETHBalance","ETHBalanceLoading","JBSingleTokenPaymentTerminalStore","usePaymentTerminalBalance","tokenAddress","useProjectToken","handle","JBProjectHandles","updateOn","useMemo","eventName","topics","BigNumber","from","toHexString","PublicResolver","projectHandleENSTextRecordKey","useProjectHandle","tokenSymbol","useSymbolOfERC20","primaryTerminalCurrentOverflow","useTerminalCurrentOverflow","converter","useCurrencyConverter","balanceInDistributionLimitCurrency","balanceInDistributionLimitCurrencyLoading","eq","V2_CURRENCY_ETH","NO_CURRENCY","wadToCurrency","V2CurrencyName","toNumber","projectOwnerAddress","useProjectOwner","totalTokenSupply","useContractReader","JBTokenStore","valueDidChange","bigNumbersDiff","useProjectTokenTotalSupply","ballotState","JBFundingCycleStore","useBallotState","isArchived","V2ArchivedProjectIds","includes","archived","Loading","NewDeployNotAvailable","handleOrId","Project404","project","Provider","value","style","layouts","maxWidth","V2Project","textAlign","marginTop","ScrollToTopButton","V2DashboardGateway","useParams","_projectId","isNaN","parseInt","useSubgraphQuery","entity","where","key","length"],"mappings":"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","file":"static/js/164.5fee300b.chunk.js","sourcesContent":["import Loading from 'components/Loading'\r\nimport NewDeployNotAvailable from 'components/NewDeployNotAvailable'\r\nimport ScrollToTopButton from 'components/ScrollToTopButton'\r\n\r\nimport {\r\n  V2ProjectContext,\r\n  V2ProjectContextType,\r\n} from 'contexts/v2/projectContext'\r\nimport { useCurrencyConverter } from 'hooks/CurrencyConverter'\r\nimport { usePageTitle } from 'hooks/PageTitle'\r\nimport { useProjectMetadata } from 'hooks/ProjectMetadata'\r\nimport { useProjectsQuery } from 'hooks/Projects'\r\nimport useSymbolOfERC20 from 'hooks/SymbolOfERC20'\r\nimport { useBallotState } from 'hooks/v2/contractReader/BallotState'\r\nimport { usePaymentTerminalBalance } from 'hooks/v2/contractReader/PaymentTerminalBalance'\r\nimport useProjectCurrentFundingCycle from 'hooks/v2/contractReader/ProjectCurrentFundingCycle'\r\nimport useProjectDistributionLimit from 'hooks/v2/contractReader/ProjectDistributionLimit'\r\nimport useProjectHandle from 'hooks/v2/contractReader/ProjectHandle'\r\nimport useProjectMetadataContent from 'hooks/v2/contractReader/ProjectMetadataContent'\r\nimport useProjectOwner from 'hooks/v2/contractReader/ProjectOwner'\r\nimport useProjectSplits from 'hooks/v2/contractReader/ProjectSplits'\r\nimport useProjectTerminals from 'hooks/v2/contractReader/ProjectTerminals'\r\nimport useProjectToken from 'hooks/v2/contractReader/ProjectToken'\r\nimport useProjectTokenTotalSupply from 'hooks/v2/contractReader/ProjectTokenTotalSupply'\r\nimport useTerminalCurrentOverflow from 'hooks/v2/contractReader/TerminalCurrentOverflow'\r\nimport useUsedDistributionLimit from 'hooks/v2/contractReader/UsedDistributionLimit'\r\nimport { first } from 'lodash'\r\nimport { V2CurrencyOption } from 'models/v2/currencyOption'\r\nimport { useMemo } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { NO_CURRENCY, V2_CURRENCY_ETH, V2CurrencyName } from 'utils/v2/currency'\r\n\r\nimport {\r\n  ETH_PAYOUT_SPLIT_GROUP,\r\n  RESERVED_TOKEN_SPLIT_GROUP,\r\n} from 'constants/v2/splits'\r\nimport { V2ArchivedProjectIds } from 'constants/v2/archivedProjects'\r\nimport { layouts } from 'constants/styles/layouts'\r\n\r\nimport Project404 from '../../../components/Project404'\r\nimport V2Project from '../../../components/v2/V2Project'\r\n\r\nexport default function V2Dashboard({ projectId }: { projectId: number }) {\r\n  const { data: metadataCID, loading: metadataURILoading } =\r\n    useProjectMetadataContent(projectId)\r\n\r\n  const {\r\n    data: projectMetadata,\r\n    error: metadataError,\r\n    isLoading: metadataLoading,\r\n  } = useProjectMetadata(metadataCID)\r\n\r\n  usePageTitle({\r\n    title: projectMetadata?.name\r\n      ? `${projectMetadata.name} | Juicebox`\r\n      : undefined,\r\n  })\r\n\r\n  const { data: projects } = useProjectsQuery({\r\n    projectId,\r\n    keys: ['createdAt', 'totalPaid'],\r\n    cv: ['2'],\r\n  })\r\n  const createdAt = first(projects)?.createdAt\r\n  const totalVolume = first(projects)?.totalPaid\r\n\r\n  const { data: fundingCycleResponse, loading: fundingCycleLoading } =\r\n    useProjectCurrentFundingCycle({\r\n      projectId,\r\n    })\r\n  const [fundingCycle, fundingCycleMetadata] = fundingCycleResponse ?? []\r\n\r\n  const { data: payoutSplits } = useProjectSplits({\r\n    projectId,\r\n    splitGroup: ETH_PAYOUT_SPLIT_GROUP,\r\n    domain: fundingCycle?.configuration?.toString(),\r\n  })\r\n\r\n  const { data: terminals } = useProjectTerminals({\r\n    projectId,\r\n  })\r\n\r\n  const location = useLocation()\r\n  const params = new URLSearchParams(location.search)\r\n  const isNewDeploy = Boolean(params.get('newDeploy'))\r\n\r\n  const primaryTerminal = terminals?.[0] // TODO: make primaryTerminalOf hook and use it\r\n\r\n  const { data: distributionLimitData, loading: distributionLimitLoading } =\r\n    useProjectDistributionLimit({\r\n      projectId,\r\n      configuration: fundingCycle?.configuration?.toString(),\r\n      terminal: primaryTerminal,\r\n    })\r\n\r\n  const { data: usedDistributionLimit, loading: usedDistributionLimitLoading } =\r\n    useUsedDistributionLimit({\r\n      projectId,\r\n      terminal: primaryTerminal,\r\n      fundingCycleNumber: fundingCycle?.number,\r\n    })\r\n\r\n  const [distributionLimit, distributionLimitCurrency] =\r\n    distributionLimitData ?? []\r\n\r\n  const { data: reservedTokensSplits } = useProjectSplits({\r\n    projectId,\r\n    splitGroup: RESERVED_TOKEN_SPLIT_GROUP,\r\n    domain: fundingCycle?.configuration?.toString(),\r\n  })\r\n\r\n  const { data: ETHBalance, loading: ETHBalanceLoading } =\r\n    usePaymentTerminalBalance({\r\n      terminal: primaryTerminal,\r\n      projectId,\r\n    })\r\n\r\n  const { data: tokenAddress } = useProjectToken({\r\n    projectId,\r\n  })\r\n\r\n  const { data: handle } = useProjectHandle({\r\n    projectId,\r\n  })\r\n\r\n  const tokenSymbol = useSymbolOfERC20(tokenAddress)\r\n\r\n  const { data: primaryTerminalCurrentOverflow } = useTerminalCurrentOverflow({\r\n    projectId,\r\n    terminal: primaryTerminal,\r\n  })\r\n\r\n  const converter = useCurrencyConverter()\r\n  const {\r\n    data: balanceInDistributionLimitCurrency,\r\n    loading: balanceInDistributionLimitCurrencyLoading,\r\n  } = useMemo(() => {\r\n    if (ETHBalanceLoading) return { loading: true }\r\n\r\n    // if ETH, no conversion necessary\r\n    if (\r\n      distributionLimitCurrency?.eq(V2_CURRENCY_ETH) ||\r\n      distributionLimitCurrency?.eq(NO_CURRENCY)\r\n    ) {\r\n      return { data: ETHBalance, loading: false }\r\n    }\r\n\r\n    return {\r\n      data: converter.wadToCurrency(\r\n        ETHBalance,\r\n        V2CurrencyName(\r\n          distributionLimitCurrency?.toNumber() as V2CurrencyOption,\r\n        ),\r\n        V2CurrencyName(V2_CURRENCY_ETH),\r\n      ),\r\n      loading: false,\r\n    }\r\n  }, [ETHBalance, ETHBalanceLoading, converter, distributionLimitCurrency])\r\n\r\n  const { data: projectOwnerAddress } = useProjectOwner(projectId)\r\n\r\n  const { data: totalTokenSupply } = useProjectTokenTotalSupply(projectId)\r\n\r\n  const { data: ballotState } = useBallotState(projectId)\r\n\r\n  const isArchived = projectId\r\n    ? V2ArchivedProjectIds.includes(projectId) || projectMetadata?.archived\r\n    : false\r\n\r\n  if (metadataLoading || metadataURILoading) return <Loading />\r\n  if (isNewDeploy && !metadataCID) {\r\n    return <NewDeployNotAvailable handleOrId={projectId} />\r\n  }\r\n  if (metadataError || !metadataCID) {\r\n    return <Project404 projectId={projectId} />\r\n  }\r\n\r\n  const project: V2ProjectContextType = {\r\n    cv: '2',\r\n    handle,\r\n    projectId,\r\n    createdAt,\r\n    projectMetadata,\r\n    fundingCycle,\r\n    fundingCycleMetadata,\r\n    distributionLimit,\r\n    usedDistributionLimit,\r\n    payoutSplits,\r\n    reservedTokensSplits,\r\n    tokenAddress,\r\n    terminals,\r\n    primaryTerminal,\r\n    ETHBalance,\r\n    totalVolume,\r\n    distributionLimitCurrency,\r\n    balanceInDistributionLimitCurrency,\r\n    tokenSymbol,\r\n    projectOwnerAddress,\r\n    primaryTerminalCurrentOverflow,\r\n    totalTokenSupply,\r\n    ballotState,\r\n    isArchived,\r\n\r\n    loading: {\r\n      ETHBalanceLoading,\r\n      balanceInDistributionLimitCurrencyLoading,\r\n      distributionLimitLoading,\r\n      fundingCycleLoading,\r\n      usedDistributionLimitLoading,\r\n    },\r\n  }\r\n\r\n  return (\r\n    <V2ProjectContext.Provider value={project}>\r\n      <div style={layouts.maxWidth}>\r\n        <V2Project />\r\n\r\n        <div style={{ textAlign: 'center', marginTop: '3rem' }}>\r\n          <ScrollToTopButton />\r\n        </div>\r\n      </div>\r\n    </V2ProjectContext.Provider>\r\n  )\r\n}\r\n","import { V2ContractName } from 'models/v2/contracts'\r\n\r\nimport { JUICEBOX_MONEY_METADATA_DOMAIN } from 'constants/v2/metadataDomain'\r\nimport useV2ContractReader from './V2ContractReader'\r\n\r\nexport default function useProjectMetadataContent(\r\n  projectId: number | undefined,\r\n) {\r\n  return useV2ContractReader<string>({\r\n    contract: V2ContractName.JBProjects,\r\n    functionName: 'metadataContentOf',\r\n    args: projectId ? [projectId, JUICEBOX_MONEY_METADATA_DOMAIN] : null,\r\n  })\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { V2ContractName } from 'models/v2/contracts'\r\n\r\nimport useV2ContractReader from './V2ContractReader'\r\n\r\nexport function usePaymentTerminalBalance({\r\n  projectId,\r\n  terminal,\r\n}: {\r\n  terminal: string | undefined\r\n  projectId: number | undefined\r\n}) {\r\n  return useV2ContractReader<BigNumber>({\r\n    contract: V2ContractName.JBSingleTokenPaymentTerminalStore,\r\n    functionName: 'balanceOf',\r\n    args: terminal && projectId ? [terminal, projectId] : null,\r\n  })\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { V2ContractName } from 'models/v2/contracts'\r\nimport { useMemo } from 'react'\r\n\r\nimport { projectHandleENSTextRecordKey } from 'constants/projectHandleENSTextRecordKey'\r\n\r\nimport useV2ContractReader from './V2ContractReader'\r\n\r\nexport default function useProjectHandle({\r\n  projectId,\r\n}: {\r\n  projectId?: number\r\n}) {\r\n  return useV2ContractReader<string>({\r\n    contract: V2ContractName.JBProjectHandles,\r\n    functionName: 'handleOf',\r\n    args: projectId ? [projectId] : null,\r\n    updateOn: useMemo(\r\n      () =>\r\n        projectId\r\n          ? [\r\n              {\r\n                contract: V2ContractName.JBProjectHandles,\r\n                eventName: 'SetEnsNameParts',\r\n                topics: [BigNumber.from(projectId).toHexString()],\r\n              },\r\n              {\r\n                contract: V2ContractName.PublicResolver,\r\n                eventName: 'TextChanged',\r\n                topics: [[], projectHandleENSTextRecordKey],\r\n              },\r\n            ]\r\n          : undefined,\r\n      [projectId],\r\n    ),\r\n  })\r\n}\r\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber'\r\nimport { V2ContractName } from 'models/v2/contracts'\r\nimport { bigNumbersDiff } from 'utils/bigNumbers'\r\n\r\nimport useContractReader from './V2ContractReader'\r\n\r\n/** Returns total supply of tokens for project with `projectId`. */\r\nexport default function useProjectTokenTotalSupply(\r\n  projectId: BigNumberish | undefined,\r\n) {\r\n  return useContractReader<BigNumber>({\r\n    contract: V2ContractName.JBTokenStore,\r\n    functionName: 'totalSupplyOf',\r\n    args: projectId ? [BigNumber.from(projectId).toHexString()] : null,\r\n    valueDidChange: bigNumbersDiff,\r\n  })\r\n}\r\n","import { V2BallotState } from 'models/ballot'\r\n\r\nimport { V2ContractName } from 'models/v2/contracts'\r\n\r\nimport useV2ContractReader from './V2ContractReader'\r\n\r\nexport function useBallotState(projectId: number | undefined) {\r\n  return useV2ContractReader<V2BallotState>({\r\n    contract: V2ContractName.JBFundingCycleStore,\r\n    functionName: 'currentBallotStateOf',\r\n    args: projectId ? [projectId] : null,\r\n  })\r\n}\r\n","import Loading from 'components/Loading'\r\nimport Project404 from 'components/Project404'\r\nimport V2Dashboard from 'pages/v2/p'\r\nimport useSubgraphQuery from 'hooks/SubgraphQuery'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nexport default function V2DashboardGateway() {\r\n  const { handle, projectId }: { handle?: string; projectId?: string } =\r\n    useParams()\r\n\r\n  const _projectId =\r\n    projectId && !isNaN(parseInt(projectId)) ? parseInt(projectId) : undefined\r\n\r\n  // IF handle AND no projectId, query graph for project with that handle.\r\n  const { isLoading, data: projects } = useSubgraphQuery(\r\n    handle && !_projectId\r\n      ? {\r\n          entity: 'project',\r\n          keys: ['projectId'],\r\n          where: [\r\n            { key: 'cv', value: '2' },\r\n            { key: 'handle', value: handle },\r\n          ],\r\n        }\r\n      : null,\r\n  )\r\n\r\n  // IF projectId, return V2Dashboard with projectId.\r\n  if (_projectId) return <V2Dashboard projectId={_projectId} />\r\n\r\n  if (isLoading) return <Loading />\r\n\r\n  if (!projects?.length) {\r\n    return handle ? (\r\n      <Project404 handle={handle} />\r\n    ) : (\r\n      <Project404 projectId={_projectId} />\r\n    )\r\n  }\r\n\r\n  // If matching project found in query, return dashboard for that project.\r\n  return <V2Dashboard projectId={projects[0].projectId} />\r\n}\r\n"],"sourceRoot":""}